package org.utbot.framework.codegen.model.util

import org.utbot.framework.codegen.model.constructor.context.CgContext
import org.utbot.framework.plugin.api.CodegenLanguage
import org.utbot.framework.plugin.api.FieldId
import org.utbot.framework.plugin.api.MethodId
import org.utbot.framework.plugin.api.util.voidClassId

/**
 * For now we will count field accessible if it is not private and its class is also accessible,
 * because we generate tests in the same package with the class under test,
 * which means we can access public, protected and package-private fields
 *
 * @param context context in which code is generated (it is needed because the method needs to know package and language)
 */
// TODO: change parameter from packageName: String to context: CgContext in ClassId.isAccessibleFrom and ExecutableId.isAccessibleFrom ?
internal infix fun FieldId.isAccessibleFrom(context: CgContext): Boolean {
    if (context.codegenLanguage == CodegenLanguage.KOTLIN) {
        // Here we call field accessible iff its getter is accessible, checks for setter are made in FieldId.canBeSetIn
        return declaringClass.allMethods.contains(getter) && getter.isAccessibleFrom(context.testClassPackageName)
    }
    val packageName = context.testClassPackageName
    val isClassAccessible = declaringClass.isAccessibleFrom(packageName)
    val isAccessibleByVisibility = isPublic || (declaringClass.packageName == packageName && (isPackagePrivate || isProtected))
    val isAccessibleFromPackageByModifiers = isAccessibleByVisibility && !isSynthetic

    return isClassAccessible && isAccessibleFromPackageByModifiers
}

/**
 * Whether or not a field can be set without reflection
 */
internal fun FieldId.canBeSetIn(context: CgContext): Boolean {
    if (context.codegenLanguage == CodegenLanguage.KOTLIN) {
        return declaringClass.allMethods.contains(setter) && setter.isAccessibleFrom(context.testClassPackageName)
    }
    return isAccessibleFrom(context) && !isFinal
}

/**
 * The default getter method for field (the one which is generated by Kotlin compiler)
 */
val FieldId.getter: MethodId
    get() = MethodId(declaringClass, "get${name.replaceFirstChar { it.uppercase() } }", type, emptyList())

/**
 * The default setter method for field (the one which is generated by Kotlin compiler)
 */
val FieldId.setter: MethodId
    get() = MethodId(declaringClass, "set${name.replaceFirstChar { it.uppercase() } }", voidClassId, listOf(type))
