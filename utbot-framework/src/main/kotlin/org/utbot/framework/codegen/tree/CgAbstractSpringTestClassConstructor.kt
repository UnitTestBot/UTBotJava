package org.utbot.framework.codegen.tree

import org.utbot.framework.codegen.domain.builtin.TestClassUtilMethodProvider
import org.utbot.framework.codegen.domain.context.CgContext
import org.utbot.framework.codegen.domain.models.AnnotationTarget.Method
import org.utbot.framework.codegen.domain.models.CgClassBody
import org.utbot.framework.codegen.domain.models.CgFieldDeclaration
import org.utbot.framework.codegen.domain.models.CgFrameworkUtilMethod
import org.utbot.framework.codegen.domain.models.CgMethod
import org.utbot.framework.codegen.domain.models.CgMethodTestSet
import org.utbot.framework.codegen.domain.models.CgMethodsCluster
import org.utbot.framework.codegen.domain.models.CgRegion
import org.utbot.framework.codegen.domain.models.CgStatement
import org.utbot.framework.codegen.domain.models.CgStaticsRegion
import org.utbot.framework.codegen.domain.models.SimpleTestClassModel
import org.utbot.framework.codegen.tree.fieldmanager.ClassFieldManagerFacade
import org.utbot.framework.plugin.api.UtExecution
import org.utbot.framework.plugin.api.util.id

abstract class CgAbstractSpringTestClassConstructor(context: CgContext) :
    CgAbstractTestClassConstructor<SimpleTestClassModel>(context) {

    protected val variableConstructor: CgSpringVariableConstructor =
        CgComponents.getVariableConstructorBy(context) as CgSpringVariableConstructor

    override fun constructTestClassBody(testClassModel: SimpleTestClassModel): CgClassBody {
        return buildClassBody(currentTestClass) {

            // TODO: support inner classes here

            fields += constructClassFields(testClassModel)
            clearUnwantedVariableModels()

            constructAdditionalTestMethods()?.let { methodRegions += it }

            for ((testSetIndex, testSet) in testClassModel.methodTestSets.withIndex()) {
                updateExecutableUnderTest(testSet.executableUnderTest)
                withTestSetIdScope(testSetIndex) {
                    val currentMethodUnderTestRegions = constructTestSet(testSet) ?: return@withTestSetIdScope
                    val executableUnderTestCluster = CgMethodsCluster(
                        "Test suites for executable $currentExecutableUnderTest",
                        currentMethodUnderTestRegions
                    )
                    methodRegions += executableUnderTestCluster
                }
            }

            constructAdditionalUtilMethods()?.let { methodRegions += it }

            if (currentTestClass == outerMostTestClass) {
                val utilEntities = collectUtilEntities()
                // If utilMethodProvider is TestClassUtilMethodProvider, then util entities should be declared
                // in the test class. Otherwise, util entities will be located elsewhere (e.g. another class).
                if (utilMethodProvider is TestClassUtilMethodProvider && utilEntities.isNotEmpty()) {
                    staticDeclarationRegions += CgStaticsRegion("Util methods", utilEntities)
                }
            }
        }
    }

    override fun constructTestSet(testSet: CgMethodTestSet): List<CgRegion<CgMethod>>? {
        val regions = mutableListOf<CgRegion<CgMethod>>()

        if (testSet.executions.any()) {
            runCatching {
                createTest(testSet, regions)
            }.onFailure { e -> processFailure(testSet, e) }
        }

        val errors = testSet.allErrors
        if (errors.isNotEmpty()) {
            regions += methodConstructor.errorMethod(testSet, errors)
            testsGenerationReport.addMethodErrors(testSet, errors)
        }

        return if (regions.any()) regions else null
    }

    abstract fun constructClassFields(testClassModel: SimpleTestClassModel): List<CgFieldDeclaration>

    /**
     * Here "additional" means that these tests are not obtained from
     * [UtExecution]s generated by engine or fuzzer, but have another origin.
     */
    open fun constructAdditionalTestMethods(): CgMethodsCluster? = null

    open fun constructAdditionalUtilMethods(): CgMethodsCluster? = null


    /**
     * Clears the results of variable instantiations that occurred
     * when we create class variables with specific annotations.
     * Actually, only mentioned variables should be stored in `valueByModelId`.
     *
     * This is a kind of HACK.
     * It is better to distinguish creating variable by model with all
     * related side effects and just creating a variable definition,
     * but it will take very long time to do it now.
     */
    private fun clearUnwantedVariableModels() {
        val trustedListOfModels = ClassFieldManagerFacade(context).findTrustedModels()

        valueByUtModelWrapper
            .filterNot { it.key in trustedListOfModels }
            .forEach { valueByUtModelWrapper.remove(it.key) }
    }

    protected fun constructBeforeMethod(statements: List<CgStatement>): CgFrameworkUtilMethod {
        val beforeAnnotation = addAnnotation(context.testFramework.beforeMethodId, Method)
        return CgFrameworkUtilMethod(
            name = "setUp",
            statements = statements,
            exceptions = emptySet(),
            annotations = listOf(beforeAnnotation),
        )
    }

    protected fun constructAfterMethod(statements: List<CgStatement>): CgFrameworkUtilMethod {
        val afterAnnotation = addAnnotation(context.testFramework.afterMethodId, Method)
        return CgFrameworkUtilMethod(
            name = "tearDown",
            statements = statements,
            exceptions = setOf(Exception::class.id),
            annotations = listOf(afterAnnotation),
        )
    }
}