@file:JvmName("FuzzingApi")
package org.utbot.fuzzing

import kotlinx.coroutines.*
import mu.KotlinLogging
import org.utbot.fuzzing.seeds.KnownValue
import org.utbot.fuzzing.seeds.StringValue
import org.utbot.fuzzing.utils.MissedSeed
import org.utbot.fuzzing.utils.chooseOne
import org.utbot.fuzzing.utils.flipCoin
import kotlin.random.Random

private val logger by lazy { KotlinLogging.logger {} }

/**
 * Describes some data to start fuzzing: initial seeds and how to run target program using generated values.
 *
 * @see [org.utbot.fuzzing.demo.AbcFuzzingKt]
 * @see [org.utbot.fuzzing.demo.JavaFuzzing]
 * @see [org.utbot.fuzzing.demo.JsonFuzzingKt]
 */
interface Fuzzing<TYPE, RESULT, DESCRIPTION : Description<TYPE>, FEEDBACK : Feedback<TYPE, RESULT>> {

    /**
     * Before producing seeds, this method is called to recognize,
     * whether seeds should be generated especially.
     *
     * [Description.clone] method must be overridden, or it throws an exception if the scope is changed.
     */
    fun enrich(description: DESCRIPTION, type: TYPE, scope: Scope) {}

    /**
     * Generates seeds for a concrete type.
     *
     * If any information except type is required, like parameter index or another,
     * [description] parameter can be used.
     *
     * NB: Fuzzing implementation caches seeds for concrete types to improve performance because
     * usually all seeds are statically defined. In case some dynamic behavior is required use
     * [Feedback.control] to reset caches.
     */
    fun generate(description: DESCRIPTION, type: TYPE): Sequence<Seed<TYPE, RESULT>>

    /**
     * This method is called on every value list generated by fuzzer.
     *
     * Fuzzing combines, randomize and mutates values using the seeds.
     * Then it generates values and runs them with this method. This method should provide some feedback,
     * which is the most important part for a good fuzzing result. [emptyFeedback] can be provided only for test
     * or infinite loops. Consider implementing own implementation of [Feedback] to provide more correct data or
     * use [BaseFeedback] to generate key based feedback. In this case, the key is used to analyze what value should be next.
     *
     * @param description contains user-defined information about the current run. Can be used as a state of the run.
     * @param values current values to process.
     */
    suspend fun handle(description: DESCRIPTION, values: List<RESULT>): FEEDBACK

    /**
     * Starts fuzzing with new description but with copy of [Statistic].
     */
    suspend fun fork(description: DESCRIPTION, statistics: Statistic<TYPE, RESULT>) {
        fuzz(description, StatisticImpl(statistics))
    }

    /**
     * Checks whether the fuzzer should stop.
     */
    suspend fun isCancelled(description: DESCRIPTION, stats: Statistic<TYPE, RESULT>): Boolean {
        return false
    }

    suspend fun beforeIteration(description: DESCRIPTION, statistics: Statistic<TYPE, RESULT>) { }
    suspend fun afterIteration(description: DESCRIPTION, statistics: Statistic<TYPE, RESULT>) { }
}

/**
 * Some description of the current fuzzing run. Usually, it contains the name of the target method and its parameter list.
 */
open class Description<TYPE>(
    parameters: List<TYPE>
) {
    val parameters: List<TYPE> = parameters.toList()

    open fun clone(scope: Scope): Description<TYPE> {
        error("Scope was changed for $this, but method clone is not specified")
    }
}

class Scope(
    val parameterIndex: Int,
    val recursionDepth: Int,
    private val properties: MutableMap<ScopeProperty<*>, Any?> = hashMapOf(),
) {
    fun <T> putProperty(param: ScopeProperty<T>, value: T) {
        properties[param] = value
    }

    fun <T> getProperty(param: ScopeProperty<T>): T? {
        @Suppress("UNCHECKED_CAST")
        return properties[param] as? T
    }

    fun isNotEmpty(): Boolean = properties.isNotEmpty()
}

class ScopeProperty<T>(
    val description: String
) {
    fun getValue(scope: Scope): T? {
        return scope.getProperty(this)
    }
}

/**
 * Input value that fuzzing knows how to build and use them.
 */
sealed interface Seed<TYPE, RESULT> {
    /**
     * Simple value is just a concrete value that should be used as is.
     *
     * Any mutation can be provided if it is applicable to this value.
     */
    class Simple<TYPE, RESULT>(val value: RESULT, val mutation: (RESULT, random: Random) -> RESULT = { f, _ -> f }): Seed<TYPE, RESULT>

    /**
     * Known value is a typical value that can be manipulated by fuzzing without knowledge about object structure
     * in concrete language. For example, integer can be represented as a bit vector of n-bits.
     *
     * The list of the known to fuzzing values are:
     *
     * 1. BitVectorValue represents a vector of bits.
     * 2. ...
     */
    class Known<TYPE, RESULT, V : KnownValue<V>>(val value: V, val build: (V) -> RESULT): Seed<TYPE, RESULT>

    /**
     * Recursive value defines an object with typically has a constructor and list of modifications.
     *
     * This task creates a tree of object values.
     */
    class Recursive<TYPE, RESULT>(
        val construct: Routine.Create<TYPE, RESULT>,
        val modify: Sequence<Routine.Call<TYPE, RESULT>> = emptySequence(),
        val empty: Routine.Empty<TYPE, RESULT>
    ) : Seed<TYPE, RESULT>

    /**
     * Collection is a task, that has 2 main options:
     *
     * 1. Construction the collection
     * 2. Modification of the collections that depends on some number of iterations.
     */
    class Collection<TYPE, RESULT>(
        val construct: Routine.Collection<TYPE, RESULT>,
        val modify: Routine.ForEach<TYPE, RESULT>
    ) : Seed<TYPE, RESULT>
}

/**
 * Routine is a task that is used to build a value.
 *
 * There are several types of a routine, which all are generally only functions.
 * These functions accept some data and generate target value.
 */
sealed class Routine<T, R>(val types: List<T>) : Iterable<T> by types {

    /**
     * Creates an empty recursive object.
     */
    class Create<T, R>(
        types: List<T>,
        val builder: (arguments: List<R>) -> R,
    ) : Routine<T, R>(types) {
        operator fun invoke(arguments: List<R>): R = builder(arguments)
    }

    /**
     * Calls routine for a given object.
     */
    class Call<T, R>(
        types: List<T>,
        val callable: (instance: R, arguments: List<R>) -> Unit
    ) : Routine<T, R>(types) {
        operator fun invoke(instance: R, arguments: List<R>) {
            callable(instance, arguments)
        }
    }

    /**
     * Creates a collection of concrete sizes.
     */
    class Collection<T, R>(
        val builder: (size: Int) -> R,
    ) : Routine<T, R>(emptyList()) {
        operator fun invoke(size: Int): R = builder(size)
    }

    /**
     * Is called for a collection with index of iterations.
     */
    class ForEach<T, R>(
        types: List<T>,
        val callable: (instance: R, index: Int, arguments: List<R>) -> Unit
    ) : Routine<T, R>(types) {
        operator fun invoke(instance: R, index: Int, arguments: List<R>) = callable(instance, index, arguments)
    }

    /**
     * Empty routine that generates a concrete value.
     */
    class Empty<T, R>(
        val builder: () -> R,
    ) : Routine<T, R>(emptyList()) {
        operator fun invoke(): R = builder()
    }
}

/**
 * Interface to force [Any.hashCode] and [Any.equals] implementation for [Feedback],
 * because it is used in the map.
 */
interface AsKey {
    override fun equals(other: Any?): Boolean
    override fun hashCode(): Int
}

/**
 * Language feedback from a concrete execution of the target code.
 */
interface Feedback<TYPE, RESULT> : AsKey {
    /**
     * Controls what fuzzing should do.
     *
     * @see [Control]
     */
    val control: Control
}

/**
 * Base implementation of [Feedback].
 *
 * NB! [VALUE] type must implement [equals] and [hashCode] due to the fact it uses as a key in map.
 * If it doesn't implement those methods, [OutOfMemoryError] is possible.
 */
data class BaseFeedback<VALUE, TYPE, RESULT>(
    val result: VALUE,
    override val control: Control,
) : Feedback<TYPE, RESULT>

/**
 * Controls fuzzing execution.
 */
enum class Control {
    /**
     * Analyze feedback and continue.
     */
    CONTINUE,

    /**
     * Do not process this feedback and just start the next value generation.
     */
    PASS,

    /**
     * Stop fuzzing.
     */
    STOP,
}

/**
 * Returns empty feedback which is equals to any another empty feedback.
 */
@Suppress("UNCHECKED_CAST")
fun <T, I> emptyFeedback(): Feedback<T, I> = (EmptyFeedback as Feedback<T, I>)

private object EmptyFeedback : Feedback<Nothing, Nothing> {
    override val control: Control
        get() = Control.CONTINUE

    override fun equals(other: Any?): Boolean {
        return true
    }

    override fun hashCode(): Int {
        return 0
    }
}

class NoSeedValueException internal constructor(
    // this type cannot be generalized because Java forbids types for [Throwable].
    val type: Any?
) : Exception("No seed candidates generated for type: $type")

suspend fun <T, R, D : Description<T>, F : Feedback<T, R>> Fuzzing<T, R, D, F>.fuzz(
    description: D,
    random: Random = Random(0),
    configuration: Configuration = Configuration()
) {
    fuzz(description, StatisticImpl(random = random, configuration = configuration))
}

/**
 * Starts fuzzing for this [Fuzzing] object.
 *
 * This is an entry point for every fuzzing.
 */
private suspend fun <T, R, D : Description<T>, F : Feedback<T, R>> Fuzzing<T, R, D, F>.fuzz(
    description: D,
    statistic: StatisticImpl<T, R, F>,
) {
    val random = statistic.random
    val configuration = statistic.configuration
    val fuzzing = this
    val typeCache = hashMapOf<T, List<Seed<T, R>>>()
    fun fuzzOne(parameters: List<T>): Node<T, R> = fuzz(
        parameters = parameters,
        fuzzing = fuzzing,
        description = description,
        random = random,
        configuration = configuration,
        builder = PassRoutine("Main Routine"),
        state = State(1, typeCache, statistic.missedTypes),
    )

    while (!fuzzing.isCancelled(description, statistic)) {
        beforeIteration(description, statistic)
        var values = if (statistic.isNotEmpty() && random.flipCoin(configuration.probSeedRetrievingInsteadGenerating)) {
            statistic.getRandomSeed(random, configuration)
        } else {
            val actualParameters = description.parameters
            // fuzz one value, seems to be bad, when have only a few and simple values
            fuzzOne(actualParameters)
        }
        values = mutate(
            values,
            fuzzing,
            random,
            configuration,
            State(1, typeCache, statistic.missedTypes)
        )
        afterIteration(description, statistic)

        yield()
        statistic.apply {
            totalRuns++
        }
        check(values.parameters.size == values.result.size) { "Cannot create value for ${values.parameters}" }
        val valuesCache = mutableMapOf<Result<T, R>, R>()
        val result = values.result.map { valuesCache.computeIfAbsent(it) { r -> create(r) } }
        val feedback = fuzzing.handle(description, result)
        when (feedback.control) {
            Control.CONTINUE -> {
                statistic.put(random, configuration, feedback, values)
            }
            Control.STOP -> {
                break
            }
            Control.PASS -> {}
        }
    }
}


///region Implementation of the fuzzing and non-public functions.

private fun <TYPE, RESULT, DESCRIPTION : Description<TYPE>, FEEDBACK : Feedback<TYPE, RESULT>> fuzz(
    parameters: List<TYPE>,
    fuzzing: Fuzzing<TYPE, RESULT, DESCRIPTION, FEEDBACK>,
    description: DESCRIPTION,
    random: Random,
    configuration: Configuration,
    builder: Routine<TYPE, RESULT>,
    state: State<TYPE, RESULT>,
): Node<TYPE, RESULT>  {
    val typeCache = mutableMapOf<TYPE, MutableList<Result<TYPE, RESULT>>>()
    val result = parameters.mapIndexed { index, type ->
        val results = typeCache.computeIfAbsent(type) { mutableListOf() }
        if (results.isNotEmpty() && random.flipCoin(configuration.probReuseGeneratedValueForSameType)) {
            // we need to check cases when one value is passed for different arguments
            results.random(random)
        } else {
            produce(type, fuzzing, description, random, configuration, State(
                state.recursionTreeDepth,
                state.cache,
                state.missedTypes,
                state.iterations,
                index
            )).also {
                results += it
            }
        }
    }
    // is not inlined to debug values generated for a concrete type
    return Node(result, parameters, builder)
}

private fun <TYPE, RESULT, DESCRIPTION : Description<TYPE>, FEEDBACK : Feedback<TYPE, RESULT>> produce(
    type: TYPE,
    fuzzing: Fuzzing<TYPE, RESULT, DESCRIPTION, FEEDBACK>,
    description: DESCRIPTION,
    random: Random,
    configuration: Configuration,
    state: State<TYPE, RESULT>,
): Result<TYPE, RESULT> {
    val scope = Scope(state.parameterIndex, state.recursionTreeDepth).apply {
        fuzzing.enrich(description, type, this)
    }
    @Suppress("UNCHECKED_CAST")
    val seeds = when {
        scope.isNotEmpty() -> {
            fuzzing.generate(description.clone(scope) as DESCRIPTION, type).toList()
        }
        else -> state.cache.computeIfAbsent(type) {
            fuzzing.generate(description, it).toList()
        }
    }
    if (seeds.isEmpty()) {
        throw NoSeedValueException(type)
    }
    val candidates = seeds.map {
        when (it) {
            is Seed.Simple<TYPE, RESULT> -> Result.Simple(it.value, it.mutation)
            is Seed.Known<TYPE, RESULT, *> -> it.asResult()
            is Seed.Recursive<TYPE, RESULT> -> reduce(it, fuzzing, description, random, configuration, state)
            is Seed.Collection<TYPE, RESULT> -> reduce(it, fuzzing, description, random, configuration, state)
        }
    }
    return candidates.random(random)
}

/**
 * reduces [Seed.Collection] type. When `configuration.recursionTreeDepth` limit is reached it creates
 * an empty collection and doesn't do any modification to it.
 */
private fun <TYPE, RESULT, DESCRIPTION : Description<TYPE>, FEEDBACK : Feedback<TYPE, RESULT>>  reduce(
    task: Seed.Collection<TYPE, RESULT>,
    fuzzing: Fuzzing<TYPE, RESULT, DESCRIPTION, FEEDBACK>,
    description: DESCRIPTION,
    random: Random,
    configuration: Configuration,
    state: State<TYPE, RESULT>,
): Result<TYPE, RESULT> {
    return if (state.recursionTreeDepth > configuration.recursionTreeDepth) {
        Result.Empty { task.construct.builder(0) }
    } else try {
        val iterations = when {
            state.iterations >= 0 && random.flipCoin(configuration.probCreateRectangleCollectionInsteadSawLike) -> state.iterations
            random.flipCoin(configuration.probEmptyCollectionCreation) -> 0
            else -> random.nextInt(1, configuration.collectionIterations + 1)
        }
        Result.Collection(
            construct = fuzz(
                task.construct.types,
                fuzzing,
                description,
                random,
                configuration,
                task.construct,
                State(state.recursionTreeDepth + 1, state.cache, state.missedTypes, iterations)
            ),
            modify = if (random.flipCoin(configuration.probCollectionMutationInsteadCreateNew)) {
                val result = fuzz(task.modify.types, fuzzing, description, random, configuration, task.modify, State(state.recursionTreeDepth + 1, state.cache, state.missedTypes, iterations))
                Array(iterations) {
                    if (it == 0) {
                        result
                    } else {
                        mutate(result, fuzzing, random, configuration, state)
                    }
                }.toList()
            } else {
                (0 until iterations).map {
                    fuzz(task.modify.types, fuzzing, description, random, configuration, task.modify, State(state.recursionTreeDepth + 1, state.cache, state.missedTypes, iterations))
                }
            },
            iterations = iterations
        )
    } catch (nsv: NoSeedValueException) {
        @Suppress("UNCHECKED_CAST")
        state.missedTypes[nsv.type as TYPE] = task
        if (configuration.generateEmptyCollectionsForMissedTypes) {
            Result.Empty { task.construct.builder(0) }
        } else {
            throw nsv
        }
    }
}

/**
 *  reduces [Seed.Recursive] type.  When `configuration.recursionTreeDepth` limit is reached it calls
 *  `Seed.Recursive#empty` routine to create an empty object.
 */
private fun <TYPE, RESULT, DESCRIPTION : Description<TYPE>, FEEDBACK : Feedback<TYPE, RESULT>> reduce(
    task: Seed.Recursive<TYPE, RESULT>,
    fuzzing: Fuzzing<TYPE, RESULT, DESCRIPTION, FEEDBACK>,
    description: DESCRIPTION,
    random: Random,
    configuration: Configuration,
    state: State<TYPE, RESULT>,
): Result<TYPE, RESULT> {
    return if (state.recursionTreeDepth > configuration.recursionTreeDepth) {
        Result.Empty { task.empty.builder() }
    } else try {
        Result.Recursive(
            construct = fuzz(
                task.construct.types,
                fuzzing,
                description,
                random,
                configuration,
                task.construct,
                State(state.recursionTreeDepth + 1, state.cache, state.missedTypes)
            ),
            modify = task.modify
//                .toMutableList()
//                .transformIfNotEmpty {
//                    shuffle(random)
//                    take(random.nextInt(size + 1))
//                }
                .mapTo(arrayListOf()) { routine ->
                    fuzz(
                        routine.types,
                        fuzzing,
                        description,
                        random,
                        configuration,
                        routine,
                        State(state.recursionTreeDepth + 1, state.cache, state.missedTypes)
                    )
                }
        )
    } catch (nsv: NoSeedValueException) {
        @Suppress("UNCHECKED_CAST")
        state.missedTypes[nsv.type as TYPE] = task
        if (configuration.generateEmptyRecursiveForMissedTypes) {
            Result.Empty { task.empty.builder() }
        } else {
            throw nsv
        }
    }
}

private fun <TYPE, RESULT> canMutate(node: Result<TYPE, RESULT>): Boolean {
    return when (node) {
        is Result.Simple<TYPE, RESULT> -> node.mutation === emptyMutation<RESULT>()
        is Result.Known<TYPE, RESULT, *> -> node.value.mutations().isNotEmpty()
        is Result.Recursive<TYPE, RESULT> -> node.modify.isNotEmpty()
        is Result.Collection<TYPE, RESULT> -> node.modify.isNotEmpty() && node.iterations > 0
        is Result.Empty<TYPE, RESULT> -> false
    }
}

/**
 *  Starts mutations of some seeds from the object tree.
 */
private fun <TYPE, RESULT, DESCRIPTION : Description<TYPE>, FEEDBACK : Feedback<TYPE, RESULT>> mutate(
    node: Node<TYPE, RESULT>,
    fuzzing: Fuzzing<TYPE, RESULT, DESCRIPTION, FEEDBACK>,
    random: Random,
    configuration: Configuration,
    state: State<TYPE, RESULT>,
): Node<TYPE, RESULT> {
    if (node.result.isEmpty()) return node
    val indexOfMutatedResult = random.chooseOne(node.result.map(::rate).toDoubleArray())
    val recursive: NodeMutation<TYPE, RESULT> = NodeMutation { n, r, c ->
        mutate(n, fuzzing, r, c, State(state.recursionTreeDepth + 1, state.cache, state.missedTypes))
    }
    val mutated = when (val resultToMutate = node.result[indexOfMutatedResult]) {
        is Result.Simple<TYPE, RESULT> -> Result.Simple(resultToMutate.mutation(resultToMutate.result, random), resultToMutate.mutation)
        is Result.Known<TYPE, RESULT, *> -> {
            val mutations = resultToMutate.value.mutations()
            if (mutations.isNotEmpty()) {
                resultToMutate.mutate(mutations.random(random), random, configuration)
            } else {
                resultToMutate
            }
        }
        is Result.Recursive<TYPE, RESULT> -> {
            when {
                resultToMutate.modify.isEmpty() || random.flipCoin(configuration.probConstructorMutationInsteadModificationMutation) ->
                    RecursiveMutations.Constructor<TYPE, RESULT>()
                random.flipCoin(configuration.probShuffleAndCutRecursiveObjectModificationMutation) ->
                    RecursiveMutations.ShuffleAndCutModifications()
                else ->
                    RecursiveMutations.Mutate()
            }.mutate(resultToMutate, recursive, random, configuration)
        }
        is Result.Collection<TYPE, RESULT> -> if (resultToMutate.modify.isNotEmpty()) {
            when {
                random.flipCoin(100 - configuration.probCollectionShuffleInsteadResultMutation) ->
                    CollectionMutations.Mutate()
                else ->
                    CollectionMutations.Shuffle<TYPE, RESULT>()
            }.mutate(resultToMutate, recursive, random, configuration)
        } else {
            resultToMutate
        }
        is Result.Empty -> resultToMutate
    }
    return Node(node.result.toMutableList().apply {
        set(indexOfMutatedResult, mutated)
    }, node.parameters, node.builder)
}

private const val ALMOST_ZERO = 1E-7

/**
 * Rates somehow the result.
 *
 * For example, fuzzing should not try to mutate some empty structures, like empty collections or objects.
 */
private fun <TYPE, RESULT> rate(result: Result<TYPE, RESULT>): Double {
    if (!canMutate(result)) {
        return ALMOST_ZERO
    }
    return when (result) {
        is Result.Recursive<TYPE, RESULT> -> if (result.construct.parameters.isEmpty() and result.modify.isEmpty()) ALMOST_ZERO else 0.5
        is Result.Collection<TYPE, RESULT> -> if (result.iterations == 0) return ALMOST_ZERO else 0.7
        is StringValue -> 2.0
        is Result.Known<TYPE, RESULT, *> -> 1.2
        is Result.Simple<TYPE, RESULT> -> 2.0
        is Result.Empty -> ALMOST_ZERO
    }
}

/**
 * Creates a real result.
 *
 * Fuzzing doesn't use real object because it mutates values by itself.
 */
@Suppress("UNCHECKED_CAST")
private fun <TYPE, R> create(result: Result<TYPE, R>): R = when(result) {
    is Result.Simple<TYPE, R> -> result.result
    is Result.Known<TYPE, R, *> -> (result.build as KnownValue<*>.() -> R)(result.value)
    is Result.Recursive<TYPE, R> -> with(result) {
        val obj: R = when (val c = construct.builder) {
            is Routine.Create<TYPE, R> -> c(construct.result.map { create(it) })
            is Routine.Empty<TYPE, R> -> c()
            else -> error("Undefined create method")
        }
        modify.forEach { func ->
            when (val builder = func.builder) {
                is Routine.Call<TYPE, R> -> builder(obj, func.result.map { create(it) })
                is PassRoutine<TYPE, R> -> logger.warn { "Routine pass: ${builder.description}" }
                else -> error("Undefined object call method ${func.builder}")
            }
        }
        obj
    }
    is Result.Collection<TYPE, R> -> with(result) {
        val collection: R = when (val c = construct.builder) {
            is Routine.Create<TYPE, R> -> c(construct.result.map { create(it) })
            is Routine.Empty<TYPE, R> -> c()
            is Routine.Collection<TYPE, R> -> c(modify.size)
            else -> error("Undefined create method")
        }
        modify.forEachIndexed { index, func ->
            when (val builder = func.builder) {
                is Routine.ForEach<TYPE, R> -> builder(collection, index, func.result.map { create(it) })
                is PassRoutine<TYPE, R> -> logger.warn { "Routine pass: ${builder.description}" }
                else -> error("Undefined collection call method ${func.builder}")
            }
        }
        collection
    }
    is Result.Empty<TYPE, R> -> result.build()
}

/**
 * Empty routine to start a recursion within [fuzz].
 */
private data class PassRoutine<T, R>(val description: String) : Routine<T, R>(emptyList())

/**
 * Internal state for one fuzzing run.
 */
private class State<TYPE, RESULT>(
    val recursionTreeDepth: Int = 1,
    val cache: MutableMap<TYPE, List<Seed<TYPE, RESULT>>>,
    val missedTypes: MissedSeed<TYPE, RESULT>,
    val iterations: Int = -1,
    val parameterIndex: Int = -1,
)

private val IDENTITY_MUTATION: (Any, random: Random) -> Any = { f, _ -> f }

private fun <RESULT> emptyMutation(): (RESULT, random: Random) -> RESULT {
    @Suppress("UNCHECKED_CAST")
    return IDENTITY_MUTATION as (RESULT, random: Random) -> RESULT
}

/**
 * The result of producing real values for the language.
 */
sealed interface Result<TYPE, RESULT> {

    /**
     * Simple result as is.
     */
    class Simple<TYPE, RESULT>(val result: RESULT, val mutation: (RESULT, random: Random) -> RESULT = emptyMutation()) : Result<TYPE, RESULT>

    /**
     * Known value.
     */
    class Known<TYPE, RESULT, V : KnownValue<V>>(val value: V, val build: (V) -> RESULT) : Result<TYPE, RESULT>
    /**
     * A tree of object that has constructor and some modifications.
     */
    class Recursive<TYPE, RESULT>(
        val construct: Node<TYPE, RESULT>,
        val modify: List<Node<TYPE, RESULT>>,
    ) : Result<TYPE, RESULT>

    /**
     * A tree of collection-like structures and their modification.
     */
    class Collection<TYPE, RESULT>(
        val construct: Node<TYPE, RESULT>,
        val modify: List<Node<TYPE, RESULT>>,
        val iterations: Int,
    ) : Result<TYPE, RESULT>

    /**
     * Empty result which just returns a value.
     */
    class Empty<TYPE, RESULT>(
        val build: () -> RESULT
    ) : Result<TYPE, RESULT>
}

/**
 * Temporary object to storage information about partly calculated values tree.
 */
class Node<TYPE, RESULT>(
    val result: List<Result<TYPE, RESULT>>,
    val parameters: List<TYPE>,
    val builder: Routine<TYPE, RESULT>,
)

private class StatisticImpl<TYPE, RESULT, FEEDBACK : Feedback<TYPE, RESULT>>(
    override var totalRuns: Long = 0,
    override val startTime: Long = System.nanoTime(),
    override var missedTypes: MissedSeed<TYPE, RESULT> = MissedSeed(),
    override val random: Random,
    override val configuration: Configuration,
) : Statistic<TYPE, RESULT> {

    constructor(source: Statistic<TYPE, RESULT>) : this(
        totalRuns = source.totalRuns,
        startTime = source.startTime,
        missedTypes = source.missedTypes,
        random = source.random,
        configuration = source.configuration.copy(),
    )

    override val elapsedTime: Long
        get() = System.nanoTime() - startTime
    private val seeds = linkedMapOf<FEEDBACK, Node<TYPE, RESULT>>()
    private val count = linkedMapOf<FEEDBACK, Long>()

    fun put(random: Random, configuration: Configuration, feedback: FEEDBACK, seed: Node<TYPE, RESULT>) {
        if (random.flipCoin(configuration.probUpdateSeedInsteadOfKeepOld)) {
            seeds[feedback] = seed
        } else {
            seeds.putIfAbsent(feedback, seed)
        }
        count[feedback] = count.getOrDefault(feedback, 0L) + 1L
    }

    fun getRandomSeed(random: Random, configuration: Configuration): Node<TYPE, RESULT> {
        if (seeds.isEmpty()) error("Call `isNotEmpty` before getting the seed")
        val entries = seeds.entries.toList()
        val frequencies = DoubleArray(seeds.size).also { f ->
            entries.forEachIndexed { index, (key, _) ->
                f[index] = configuration.energyFunction(count.getOrDefault(key, 0L))
            }
        }
        val index = random.chooseOne(frequencies)
        return entries[index].value
    }

    fun isNotEmpty() = seeds.isNotEmpty()
}
///endregion


///region Utilities
@Suppress("UNCHECKED_CAST")
private fun <TYPE, RESULT, T : KnownValue<T>> Seed.Known<TYPE, RESULT, *>.asResult(): Result.Known<TYPE, RESULT, T> {
    val value: T = value as T
    return Result.Known(value, build as KnownValue<T>.() -> RESULT)
}

@Suppress("UNCHECKED_CAST")
private fun <TYPE, RESULT, T : KnownValue<T>> Result.Known<TYPE, RESULT, *>.mutate(mutation: Mutation<T>, random: Random, configuration: Configuration): Result.Known<TYPE, RESULT, T> {
    val source: T = value as T
    val mutate = mutation.mutate(source, random, configuration)
    return Result.Known(
        mutate,
        build as (T) -> RESULT
    )
}
///endregion
