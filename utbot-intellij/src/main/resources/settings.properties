# Setting to disable coroutines debug explicitly.
# True by default, set it to false if debug info is required.
disableCoroutinesDebug=true

#
# Make `true` for interactive mode (like Intellij plugin). If `false` UTBot can apply certain optimizations.
classfilesCanChange=true

#
# Timeout for Z3 solver.check calls.
# Set it to 0 to disable timeout.
checkSolverTimeoutMillis=1000

#
# Timeout for symbolic execution
utBotGenerationTimeoutInMillis=60000L

#
# Type of path selector.
pathSelectorType=PathSelectorType.INHERITORS_SELECTOR

#
# Type of MLSelector recalculation.
mlSelectorRecalculationType=MLSelectorRecalculationType.WITHOUT_RECALCULATION

#
# Type of [MLPredictor].
mlPredictorType=MLPredictorType.MLP

#
# Steps limit for path selector.
pathSelectorStepsLimit=3500

#
# Determines whether path selector should save remaining states for concrete execution after stopping by strategy.
# False for all framework tests by default.
saveRemainingStatesForConcreteExecution=true

#
# Use debug visualization.
# False by default, set it to true if debug visualization is needed.
useDebugVisualization=false

#
# Method is paused after this timeout to give an opportunity other methods
# to work
timeslotForOneToplevelMethodTraversalMs=2000

#
# Use simplification of UtExpressions.
# True by default, set it to false to disable expression simplification.
# @see <a href="CONFLUENCE:UtBot+Expression+Optimizations">
#     UtBot Expression Optimizations</a>
useExpressionSimplification=true

#
# Use simplification of UtExpressions.
# True by default, set it to false to disable expression simplification.
# @see <a href="CONFLUENCE:UtBot+Expression+Optimizations">
#     UtBot Expression Optimizations</a>
# Activate or deactivate tests on comments && names/displayNames
# */
testDisplayName=true

#
# Generate summaries using plugin's custom JavaDoc tags.
useCustomJavaDocTags=true

#
# Enable the Summarization module to generate summaries for methods under test.
# True by default.
# Note: if it is false, all the execution for a particular method will be stored at the same nameless region.
enableSummariesGeneration=true

#
# Options below regulate which [NullPointerException] check should be performed.
# Set an option in true if you want to perform NPE check in the corresponding situations, otherwise set false.
checkNpeInNestedNotPrivateMethods=false

#
# This option determines whether we should generate [NullPointerException] checks for final or non-public fields
# in non-application classes. Set by true, this option highly decreases test's readability in some cases
# because of using reflection API for setting final/non-public fields in non-application classes.
# NOTE: default false value loses some executions with NPE in system classes, but often most of these executions
# are not expected by user.
maximizeCoverageUsingReflection=false

#
# Activate or deactivate substituting static fields values set in static initializer
# with symbolic variable to try to set them another value than in initializer.
substituteStaticsWithSymbolicVariable=true

#
# Use concrete execution.
# True by default.
useConcreteExecution=true

#
# Enable check of full coverage for methods with code generations tests.
# TODO doesn't work for now JIRA:1407
checkCoverageInCodeGenerationTests=true

#
# Enable code generation tests with every possible configuration
# for every method in samples.
# Important: disabled by default. This check requires enormous amount of time.
checkAllCombinationsForEveryTestInSamples=false

#
# Enable transformation UtCompositeModels into UtAssembleModels using AssembleModelGenerator.
# True by default.
# Note: false doesn't mean that there will be no assemble models, it means that the generator will be turned off.
# Assemble models will present for lists, sets, etc.
useAssembleModelGenerator=true

#
# Test related files from the temp directory that are older than [daysLimitForTempFiles]
# will be removed at the beginning of the test run.
daysLimitForTempFiles=3

#
# Enables soft constraints in the engine.
# True by default.
preferredCexOption=true

#
# Type of test minimization strategy.
testMinimizationStrategyType=TestSelectionStrategyType.COVERAGE_STRATEGY

#
# Set to true to start fuzzing if symbolic execution haven't return anything
useFuzzing=true

#
# Set the total attempts to improve coverage by fuzzer.
fuzzingMaxAttempts=Int.MAX_VALUE

#
# Fuzzer tries to generate and run tests during this time.
fuzzingTimeoutInMillis=3_000L

#
# Generate tests that treat possible overflows in arithmetic operations as errors
# that throw Arithmetic Exception.
# False by default.
treatOverflowAsError=false

#
# Generate tests that treat assertions as error suits.
# True by default.
treatAssertAsErrorSuit=true

#
# Instrument all classes before start
warmupConcreteExecution=false

#
# Ignore string literals during the code analysis to make possible to analyze antlr.
# It is a hack and must be removed after the competition.
ignoreStringLiterals=false

#
# Timeout for specific concrete execution (in milliseconds).
concreteExecutionTimeoutInChildProcess= DEFAULT_CONCRETE_EXECUTION_TIMEOUT_IN_CHILD_PROCESS_MS 

#
# Log level for engine process, which started in idea on generate tests action.
engineProcessLogLevel=LogLevel.Info

#
# Log level for concrete executor process.
childProcessLogLevel=LogLevel.Info

#
# Determines whether should errors from a child process be written to a log file or suppressed.
# Note: being enabled, this option can highly increase disk usage when using ContestEstimator.
# False by default (for saving disk space).
logConcreteExecutionErrors=false

#
# Property useful only for idea
# If true - runs engine process with the ability to attach a debugger
# @see runChildProcessWithDebug
# @see org.utbot.intellij.plugin.process.EngineProcess
runIdeaProcessWithDebug=false

#
# If true, runs the child process with the ability to attach a debugger.
# To debug the child process, set the breakpoint in the childProcessRunner.start() line
# and in the child process's main function and run the main process.
# Then run the remote JVM debug configuration in IDEA.
# If you see the message in console about successful connection, then
# the debugger is attached successfully.
# Now you can put the breakpoints in the child process and debug
# both processes simultaneously.
# @see [org.utbot.instrumentation.process.ChildProcessRunner.cmds]
runChildProcessWithDebug=false

#
# Number of branch instructions using for clustering executions in the test minimization phase.
numberOfBranchInstructionsForClustering=4

#
# Determines should we choose only one crash execution with "minimal" model or keep all.
minimizeCrashExecutions=true

#
# Enable it to calculate unsat cores for hard constraints as well.
# It may be usefull during debug.
# Note: it might highly impact performance, so do not enable it in release mode.
# False by default.
enableUnsatCoreCalculationForHardConstraints=false

#
# Enable it to process states with unknown solver status
# from the queue to concrete execution.
# True by default.
processUnknownStatesDuringConcreteExecution=true

#
# 2^{this} will be the length of observed subpath.
# See [SubpathGuidedSelector]
subpathGuidedSelectorIndex=1

#
# Flag that indicates whether feature processing for execution states enabled or not
enableFeatureProcess=false

#
# Path to deserialized ML models
modelPath="../models/0"

#
# Full class name of the class containing the configuration for the ML models to solve path selection task.
analyticsConfigurationClassPath="org.utbot.AnalyticsConfiguration"

#
# Full class name of the class containing the configuration for the ML models exported from the PyTorch to solve path selection task.
analyticsTorchConfigurationClassPath="org.utbot.AnalyticsTorchConfiguration"

#
# Number of model iterations that will be used during ContestEstimator
iterations=1

#
# Path for state features dir
featurePath="eval/secondFeatures/antlr/INHERITORS_SELECTOR"

#
# Counter for tests during testGeneration for one project in ContestEstimator
testCounter=0

#
# Flag for Subpath and NN selectors whether they are combined (Subpath use several indexes, NN use several models)
singleSelector=true

#
# Flag that indicates whether tests for synthetic (see [Executable.isSynthetic]) and implicitly declared methods (like values, valueOf in enums) should be generated, or not
skipTestGenerationForSyntheticAndImplicitlyDeclaredMethods=true

#
# Flag that indicates whether should we branch on and set static fields from trusted libraries or not.
# @see [org.utbot.common.WorkaroundReason.IGNORE_STATICS_FROM_TRUSTED_LIBRARIES]
ignoreStaticsFromTrustedLibraries=true

#
# Use the sandbox in the concrete executor.
# If true (default), the sandbox will prevent potentially dangerous calls, e.g., file access, reading
# or modifying the environment, calls to `Unsafe` methods etc.
# If false, all these operations will be enabled and may lead to data loss during code analysis
# and test generation.
useSandbox=true

#
# Limit for number of generated tests per method (in each region)
maxTestsPerMethodInRegion=50

#
# If this options set in true, all soot classes will be removed from a Soot Scene,
# therefore, you will be unable to test soot classes.
removeSootClassesFromHierarchy=true

#
# If this options set in true, all UtBot classes will be removed from a Soot Scene,
# therefore, you will be unable to test UtBot classes.
removeUtBotClassesFromHierarchy=true

#
# Use this option to enable calculation and logging of MD5 for dropped states by statistics.
# Example of such logging:
#     Dropping state (lastStatus=UNDEFINED) by the distance statistics. MD5: 5d0bccc242e87d53578ca0ef64aa5864
# Default value is false.
enableLoggingForDroppedStates=false

#
# If this option set in true, depending on the number of possible types for
# a particular object will be used either type system based on conjunction
# or on bit vectors.
# @see useBitVecBasedTypeSystem
useBitVecBasedTypeSystem=true

#
# The number of types on which the choice of the type system depends.
maxTypeNumberForEnumeration=64

#
# The threshold for numbers of types for which they will be encoded into solver.
# It is used to do not encode big type storages due to significand performance degradation.
maxNumberOfTypesToEncode=512
