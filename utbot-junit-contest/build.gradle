apply from: "${rootProject.projectDir}/gradle/include/jvm-project.gradle"

apply plugin: 'jacoco'

configurations {
    fetchInstrumentationJar
}

compileJava {
    options.compilerArgs << '-XDignore.symbol.file'
}

compileTestJava {
    options.fork = true
    options.forkOptions.executable = 'javac'
    options.compilerArgs << "-XDignore.symbol.file"
}

sourceSets {
    test {
        java {
            srcDir('build/output/test/antlr')
            srcDir('build/output/test/custom')
            srcDir('build/output/test/guava')
            srcDir('build/output/test/fescar')
            srcDir('build/output/test/pdfbox')
            srcDir('build/output/test/seata')
            srcDir('build/output/test/spoon')
            srcDir('build/output/test/samples')
            srcDir('build/output/test/utbottest')
        }
    }
}

test {
    useJUnit()
    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "3072m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxHeapSize=3072m'

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        html.enabled = true
    }
}

dependencies {
    api project(":utbot-framework")
    api project(":utbot-analytics")

    implementation "com.github.UnitTestBot:soot:${soot_commit_hash}"
    implementation group: 'org.apache.commons', name: 'commons-exec', version: '1.2'
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlin_logging_version
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.6.2'
    // need for tests
    implementation group: 'org.mockito', name: 'mockito-core', version: '4.2.0'
    implementation group: 'org.mockito', name: 'mockito-inline', version: '4.2.0'
    implementation 'junit:junit:4.13.2'
    testImplementation fileTree(dir: 'src/main/resources/projects/', include: '*/*.jar')
    testImplementation files('src/main/resources/evosuite/evosuite-1.2.0.jar')
    testImplementation files('src/main/resources/evosuite/evosuite-standalone-runtime-1.2.0.jar')

    fetchInstrumentationJar project(path: ':utbot-instrumentation', configuration:'instrumentationArchive')
}

processResources {
    from(configurations.fetchInstrumentationJar) {
        into "lib"
    }
}

jar { dependsOn classes

    manifest {
        attributes 'Main-Class': 'org.utbot.contest.ContestKt'
        attributes 'Bundle-SymbolicName': 'org.utbot.contest'
        attributes 'Bundle-Version': "${project.version}"
        attributes 'Implementation-Title': 'UtBot JUnit contest'
        attributes 'JAR-Type': 'Fat JAR'
    }

    version '1.0'

    dependsOn configurations.runtimeClasspath
    from {
        sourceSets.main.output + configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    zip64 = true

}

task monitoringJar(type: Jar) { dependsOn classes

    archiveBaseName.set('monitoring')
    archiveClassifier.set('')
    archiveVersion.set('')

    dependsOn configurations.runtimeClasspath
    from {
        sourceSets.main.output + configurations.runtimeClasspath
                .collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes 'Main-Class': 'org.utbot.monitoring.StatisticsMonitoringKt'
        attributes 'Bundle-SymbolicName': 'org.utbot.monitoring'
        attributes 'Bundle-Version': "${project.version}"
        attributes 'Implementation-Title': 'UtBot Monitoring'
        attributes 'JAR-Type': 'Fat JAR'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
