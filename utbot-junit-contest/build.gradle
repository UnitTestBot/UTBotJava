plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'
}
apply plugin: 'jacoco'

configurations {
    fetchInstrumentationJar
}

compileJava {
    options.compilerArgs << '-XDignore.symbol.file'
}

compileTestJava {
    options.fork = true
    options.compilerArgs << "-XDignore.symbol.file"
}

def testProjects = [
        'build/output/test/antlr',
        'build/output/test/codeforces',
        'build/output/test/fastjson-1.2.50',
        'build/output/test/fescar',
        'build/output/test/guava',
        'build/output/test/guava-26.0',
        'build/output/test/guava-30.0',
        'build/output/test/pdfbox',
        'build/output/test/seata',
        'build/output/test/seata-core-0.5.0',
        'build/output/test/spoon',
        'build/output/test/spoon-core-7.0.0',
]

sourceSets {
    test {
        java {
            testProjects.forEach {
                srcDir(it)
            }
        }
    }
}

test {
    useJUnit()
    jvmArgs =[
            "--add-opens", "java.base/java.util.concurrent.atomic=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.concurrent.locks=ALL-UNNAMED",
            "--add-opens", "java.base/java.text=ALL-UNNAMED",
            "--add-opens", "java.base/java.time=ALL-UNNAMED",
            "--add-opens", "java.base/java.io=ALL-UNNAMED",
            "--add-opens", "java.base/java.nio=ALL-UNNAMED",
            "--add-opens", "java.base/java.nio.file=ALL-UNNAMED",
            "--add-opens", "java.base/java.net=ALL-UNNAMED",
            "--add-opens", "java.base/sun.security.util=ALL-UNNAMED",
            "--add-opens", "java.base/sun.reflect.generics.repository=ALL-UNNAMED",
            "--add-opens", "java.base/sun.net.util=ALL-UNNAMED",
            "--add-opens", "java.base/sun.net.fs=ALL-UNNAMED",
            "--add-opens", "java.base/java.security=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.ref=ALL-UNNAMED",
            "--add-opens", "java.base/java.math=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
            "--add-opens", "java.base/java.util=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
            "--add-opens", "java.base/sun.security.provider=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.event=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jimage=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jimage.decompressor=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jmod=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jtrfs=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.logger=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.math=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.module=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.commons=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.signature=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.tree.analysis=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.util=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.xml.sax=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.xml.sax.helpers=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.perf=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.platform=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.ref=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.reflect=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util.jar=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util.xml=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util.xml.impl=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.vm=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
    ]
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        def r = testProjects.collect {
            fileTree(dir: it)
        }.findAll {
            it.dir.exists()
        }
        sourceDirectories.setFrom(r.collect {files(it) })
        classDirectories.setFrom(
                r.collect {
                    fileTree(dir: it.dir.toPath().parent.resolveSibling("unzipped").resolve(it.dir.name))
                }.findAll {
                    it.dir.exists()
                }.collect {
                    files(it)
                }
        )
    }

    reports {
        csv.enabled = true
        html.enabled = true
    }
}

dependencies {
    implementation project(":utbot-framework")
    implementation project(":utbot-analytics")


    implementation("org.unittestbot.soot:soot-utbot-fork:${sootVersion}") {
        exclude group:'com.google.guava', module:'guava'
    }
    implementation group: 'org.apache.commons', name: 'commons-exec', version: '1.2'
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlinLoggingVersion
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.6.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    // need for tests
    implementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    implementation group: 'org.mockito', name: 'mockito-inline', version: mockitoInlineVersion
    implementation 'junit:junit:4.13.2'

    implementation('org.usvm:usvm-core')
    implementation('org.usvm:usvm-jvm')
    implementation('org.usvm:usvm-jvm-instrumentation')

    implementation group: "org.jacodb", name: "jacodb-core", version: jacoDbVersion
    implementation group: "org.jacodb", name: "jacodb-analysis", version: jacoDbVersion
    implementation group: "org.jacodb", name: "jacodb-approximations", version: jacoDbVersion

    // TODO uvms-sbft-hack: UtBot has `fastutil:8.3.0` on the classpath that overrides classes from
    //  `fastutil-core:8.5.11` that USVM adds. Solution: bump `fastutil` version to `8.5.11`
    runtimeOnly("it.unimi.dsi:fastutil:8.5.11")

    testImplementation fileTree(dir: 'src/main/resources/projects/', include: '*/*.jar')
    testImplementation files('src/main/resources/evosuite/evosuite-1.2.0.jar')
    testImplementation files('src/main/resources/evosuite/evosuite-standalone-runtime-1.2.0.jar')

    fetchInstrumentationJar project(path: ':utbot-instrumentation', configuration: 'instrumentationArchive')
}

processResources {
    from(configurations.fetchInstrumentationJar) {
        into "lib"
    }
}

jar {
    dependsOn classes

    manifest {
        attributes 'Main-Class': 'org.utbot.contest.ContestKt'
        attributes 'Bundle-SymbolicName': 'org.utbot.contest'
        attributes 'Bundle-Version': "${project.version}"
        attributes 'Implementation-Title': 'UtBot JUnit contest'
        attributes 'JAR-Type': 'Fat JAR'
    }

    version '1.0'

    dependsOn configurations.runtimeClasspath
    from {
        sourceSets.main.output + configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    zip64 = true

}

task monitoringJar(type: Jar) {
    dependsOn classes

    archiveBaseName.set('monitoring')
    archiveClassifier.set('')
    archiveVersion.set('')

    dependsOn configurations.runtimeClasspath
    from {
        sourceSets.main.output + configurations.runtimeClasspath
                .collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes 'Main-Class': 'org.utbot.monitoring.StatisticsMonitoringKt'
        attributes 'Bundle-SymbolicName': 'org.utbot.monitoring'
        attributes 'Bundle-Version': "${project.version}"
        attributes 'Implementation-Title': 'UtBot Monitoring'
        attributes 'JAR-Type': 'Fat JAR'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
