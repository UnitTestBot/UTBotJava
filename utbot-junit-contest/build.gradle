plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'
}
apply plugin: 'jacoco'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        url = uri('https://maven.pkg.github.com/UnitTestBot/usvm')
        credentials {
            username = project.githubActor // System.getenv("GITHUB_ACTOR")
            password = project.githubToken // System.getenv("GITHUB_TOKEN")
        }
    }
}

configurations {
    fetchInstrumentationJar
    approximations
    usvmApproximationsApi
    usvmInstrumentationCollector
    usvmInstrumentationRunner
    generatedTestCompile
}

def approximationsRepo = "com.github.UnitTestBot.java-stdlib-approximations"
def approximationsVersion = "bfce4eedde"

compileJava {
    options.compilerArgs << '-XDignore.symbol.file'
}

compileTestJava {
    options.fork = true
    options.forkOptions.executable = "javac"
    options.forkOptions.javaHome = file(System.getProperty("java.home"))
    options.compilerArgs << "-XDignore.symbol.file=true"
}

def testProjects = [
        'build/output/test/antlr',
        'build/output/test/codeforces',
        'build/output/test/fastjson-1.2.50',
        'build/output/test/fescar',
        'build/output/test/guava',
        'build/output/test/guava-26.0',
        'build/output/test/guava-30.0',
        'build/output/test/pdfbox',
        'build/output/test/seata',
        'build/output/test/seata-core-0.5.0',
        'build/output/test/spoon',
        'build/output/test/spoon-core-7.0.0',
        'build/output/test/samples',
]

sourceSets {
    test {
        java {
            testProjects.forEach {
                srcDir(it)
            }
        }
    }
}

test {
    useJUnit()
    if (JavaVersion.current() < JavaVersion.VERSION_1_9) {
        jvmArgs = []
    } else {
        jvmArgs = [
            "--add-opens", "java.base/java.util.concurrent.atomic=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.concurrent=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.concurrent.locks=ALL-UNNAMED",
            "--add-opens", "java.base/java.text=ALL-UNNAMED",
            "--add-opens", "java.base/java.time=ALL-UNNAMED",
            "--add-opens", "java.base/java.io=ALL-UNNAMED",
            "--add-opens", "java.base/java.nio=ALL-UNNAMED",
            "--add-opens", "java.base/java.nio.file=ALL-UNNAMED",
            "--add-opens", "java.base/java.net=ALL-UNNAMED",
            "--add-opens", "java.base/sun.security.util=ALL-UNNAMED",
            "--add-opens", "java.base/sun.reflect.generics.repository=ALL-UNNAMED",
            "--add-opens", "java.base/sun.net.util=ALL-UNNAMED",
            "--add-opens", "java.base/sun.net.fs=ALL-UNNAMED",
            "--add-opens", "java.base/java.security=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.ref=ALL-UNNAMED",
            "--add-opens", "java.base/java.math=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
            "--add-opens", "java.base/java.util=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.reflect=ALL-UNNAMED",
            "--add-opens", "java.base/sun.security.provider=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.event=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jimage=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jimage.decompressor=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jmod=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.jtrfs=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.logger=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.math=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.module=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.commons=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.signature=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.tree.analysis=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.objectweb.asm.util=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.xml.sax=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.org.xml.sax.helpers=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.perf=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.platform=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.ref=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.reflect=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util.jar=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util.xml=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.util.xml.impl=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.vm=ALL-UNNAMED",
            "--add-opens", "java.base/jdk.internal.vm.annotation=ALL-UNNAMED"
        ]
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    afterEvaluate {
        def r = testProjects.collect {
            fileTree(dir: it)
        }.findAll {
            it.dir.exists()
        }
        sourceDirectories.setFrom(r.collect {files(it) })
        classDirectories.setFrom(
                r.collect {
                    fileTree(dir: it.dir.toPath().parent.resolveSibling("unzipped").resolve(it.dir.name))
                }.findAll {
                    it.dir.exists()
                }.collect {
                    files(it)
                }
        )
    }

    reports {
        csv.enabled = true
        html.enabled = true
    }
}

dependencies {
    implementation project(":utbot-framework")
    implementation project(":utbot-analytics")


    implementation("org.unittestbot.soot:soot-utbot-fork:${sootVersion}") {
        exclude group:'com.google.guava', module:'guava'
    }
    implementation group: 'org.apache.commons', name: 'commons-exec', version: '1.2'
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlinLoggingVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4j2Version
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4j2Version
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.6.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation group: 'com.google.guava', name: 'guava', version: guavaVersion
    // need for tests
    implementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    implementation group: 'org.mockito', name: 'mockito-inline', version: mockitoInlineVersion
    implementation 'junit:junit:4.13.2'

    generatedTestCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    generatedTestCompile group: 'org.mockito', name: 'mockito-inline', version: mockitoInlineVersion
    generatedTestCompile 'junit:junit:4.13.2'

    implementation "org.burningwave:core:12.62.7"

    implementation group: "org.usvm", name: "usvm-core", version: usvmVersion
    implementation group: "org.usvm", name: "usvm-jvm", version: usvmVersion
    implementation group: "org.usvm", name: "usvm-jvm-api", version: usvmVersion
    implementation group: "org.usvm", name: "usvm-jvm-instrumentation", version: usvmVersion
    implementation group: "org.usvm", name: "usvm-jvm-instrumentation-collectors", version: usvmVersion

    implementation group: "org.jacodb", name: "jacodb-core", version: jacoDbVersion
    implementation group: "org.jacodb", name: "jacodb-analysis", version: jacoDbVersion
    implementation group: "org.jacodb", name: "jacodb-approximations", version: jacoDbVersion

    // TODO uvms-sbft-hack: UtBot has `fastutil:8.3.0` on the classpath that overrides classes from
    //  `fastutil-core:8.5.11` that USVM adds. Solution: bump `fastutil` version to `8.5.11`
    runtimeOnly("it.unimi.dsi:fastutil:8.5.11")

    testImplementation fileTree(dir: 'src/main/resources/projects/', include: '*/*.jar')
    testImplementation files('src/main/resources/evosuite/evosuite-1.2.0.jar')
    testImplementation files('src/main/resources/evosuite/evosuite-standalone-runtime-1.2.0.jar')

    fetchInstrumentationJar project(path: ':utbot-instrumentation', configuration: 'instrumentationArchive')

    approximations "$approximationsRepo:approximations:$approximationsVersion"
    usvmApproximationsApi "org.usvm:usvm-jvm-api:$usvmVersion"
    usvmInstrumentationCollector "org.usvm:usvm-jvm-instrumentation-collectors:$usvmVersion"
    usvmInstrumentationRunner "org.usvm:usvm-jvm-instrumentation:$usvmVersion"
    usvmInstrumentationRunner "org.usvm:usvm-jvm-instrumentation-collectors:$usvmVersion"
}

processResources {
    from(configurations.fetchInstrumentationJar) {
        into "lib"
    }
}

jar {
    dependsOn classes

    manifest {
        attributes 'Main-Class': 'org.utbot.contest.ContestKt'
        attributes 'Bundle-SymbolicName': 'org.utbot.contest'
        attributes 'Bundle-Version': "${project.version}"
        attributes 'Implementation-Title': 'UtBot JUnit contest'
        attributes 'JAR-Type': 'Fat JAR'
    }

    processResources.exclude("classes/**")
    processResources.exclude("projects/**")
    processResources.exclude("evosuite/**")

    version '1.0'

    dependsOn configurations.runtimeClasspath
    from {
        sourceSets.main.output + configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    zip64 = true

}

task monitoringJar(type: Jar) {
    dependsOn classes

    archiveBaseName.set('monitoring')
    archiveClassifier.set('')
    archiveVersion.set('')

    dependsOn configurations.runtimeClasspath
    from {
        sourceSets.main.output + configurations.runtimeClasspath
                .collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes 'Main-Class': 'org.utbot.monitoring.StatisticsMonitoringKt'
        attributes 'Bundle-SymbolicName': 'org.utbot.monitoring'
        attributes 'Bundle-Version': "${project.version}"
        attributes 'Implementation-Title': 'UtBot Monitoring'
        attributes 'JAR-Type': 'Fat JAR'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// TODO usvm-sbft-saloed: replace with runner from usvm (unavailable due to huge jar size)
task usvmInstrumentationRunnerJar(type: Jar) {
    archiveBaseName = "usvm-instrumentation-runner"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                "Main-Class": "org.usvm.instrumentation.rd.InstrumentedProcessKt",
                "Premain-Class": "org.usvm.instrumentation.agent.Agent",
                "Can-Retransform-Classes": "true",
                "Can-Redefine-Classes": "true"
        )
    }

    from {
        configurations.usvmInstrumentationRunner.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task run(type: JavaExec) {
    mainClass.set("org.utbot.contest.ContestEstimatorKt")
    classpath = sourceSets.main.runtimeClasspath
    workingDir = project.rootProject.projectDir

    def usvmApproximationJarPath = configurations.approximations.resolvedConfiguration.files.find()
    def usvmApproximationApiJarPath = configurations.usvmApproximationsApi.resolvedConfiguration.files.find()
    environment "usvm.jvm.api.jar.path", usvmApproximationApiJarPath.absolutePath
    environment "usvm.jvm.approximations.jar.path", usvmApproximationJarPath.absolutePath
    systemProperty("org.jacodb.impl.storage.defaultBatchSize", 2000)

    def usvmInstrumentationCollectorJarPath = configurations.usvmInstrumentationCollector.resolvedConfiguration.files.find()
    environment "usvm-jvm-collectors-jar", usvmInstrumentationCollectorJarPath.absolutePath

    dependsOn(usvmInstrumentationRunnerJar)
    environment "usvm-jvm-instrumentation-jar", usvmInstrumentationRunnerJar.outputs.files.singleFile

    // "JAVA_HOME" specifies Java path for instrumented process and JacoDB,
    // while `System.getProperty('java.home')` is Java used by this process.
    // We want both of them to be the same and we also need JDK (not JRE), since we use `javac` to compile tests.
    def javaHome = System.getProperty('java.home')
    def jreSuffix = "${File.separatorChar}jre"
    if (javaHome.endsWith(jreSuffix)) javaHome = javaHome.dropRight(jreSuffix.length())
    environment "JAVA_HOME", javaHome
}

tasks.register("generateRuntool") {
    dependsOn(jar, usvmInstrumentationRunnerJar)

    doLast {
        def distDir = buildDir.toPath().resolve("utbot-usvm-runtool").toFile()
        copy {
            from jar.outputs
            into distDir
            rename { "utbot-usvm-tool.jar" }
        }

        copy {
            from configurations.usvmApproximationsApi.resolvedConfiguration.files.find()
            into distDir
            rename { "usvm-api.jar" }
        }

        copy {
            from configurations.approximations.resolvedConfiguration.files.find()
            into distDir
            rename { "usvm-approximations.jar" }
        }

        copy {
            from configurations.usvmInstrumentationCollector.resolvedConfiguration.files.find()
            into distDir
            rename { "usvm-jvm-collectors.jar" }
        }

        copy {
            from usvmInstrumentationRunnerJar.outputs
            into distDir
            rename { "usvm-jvm-instrumentation.jar" }
        }

        copy {
            from projectDir.toPath().resolve("usvm-runtool")
            into distDir
            rename { "runtool" }
        }

        def libsDir = distDir.toPath().resolve("lib").toFile()
        configurations.generatedTestCompile.resolvedConfiguration.files.forEach { f ->
            copy {
                from f
                into libsDir
            }
        }
    }
}
