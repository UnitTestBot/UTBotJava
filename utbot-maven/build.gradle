configurations {
    mavenEmbedder // maven embeddable component, with CLI and logging support
}

dependencies {
    implementation project(':utbot-framework')

    implementation group: 'org.apache.maven', name: 'maven-core', version: mavenPluginApiVersion
    implementation group: 'org.apache.maven', name: 'maven-plugin-api', version: mavenPluginApiVersion
    compileOnly group: 'org.apache.maven.plugin-tools', name: 'maven-plugin-annotations', version: mavenPluginToolsVersion
    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlinLoggingVersion

    implementation group: 'org.eclipse.sisu', name: 'org.eclipse.sisu.plexus', version: sisuPlexusVersion
    testImplementation group: 'org.apache.maven.plugin-testing', name: 'maven-plugin-testing-harness', version: mavenPluginTestingVersion
    testImplementation group: 'org.apache.maven', name: 'maven-compat', version: mavenPluginApiVersion
    testImplementation group: 'org.apache.maven.resolver', name: 'maven-resolver-api', version: mavenResolverApiVersion

    mavenEmbedder group: 'org.apache.maven', name: 'maven-embedder', version: mavenPluginApiVersion
    mavenEmbedder group: 'org.apache.maven', name: 'maven-compat', version: mavenPluginApiVersion
    mavenEmbedder group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    mavenEmbedder group: 'org.eclipse.aether', name: 'aether-connector-basic', version: eclipseAetherVersion
    mavenEmbedder group: 'org.eclipse.aether', name: 'aether-transport-wagon', version: eclipseAetherVersion
    mavenEmbedder group: 'org.apache.maven.wagon', name: 'wagon-http', version: mavenWagonVersion
    mavenEmbedder group: 'org.apache.maven.wagon', name: 'wagon-provider-api', version: mavenWagonVersion
}

/**
 * We should run the maven task `install` to build & publish this plugin.
 * But `utbot-maven` is the Gradle module (not Maven), so there is no `install` task
 * and we have to manually generate the pom.xml file and the plugin descriptor file.
 *
 * The pom.xml file is in the src/main/resources.
 * It should contain all the information needed at runtime.
 *
 * The plugin descriptor file is generated automatically by [generatePluginDescriptor].
 */

def generatedPomFile = file("./build/resources/generated/pom.xml")
def outputDirectory = project.buildDir.toPath().resolve("classes/kotlin/main")
def pluginDescriptorFile = new File("$outputDirectory/META-INF/maven/plugin.xml")

/**
 * Generates the pom.xml file and saves it to the [generatedPomFile].
 */
task generatePomFile() {
    def rootNode = new Node(null, "project", [
        'xmlns': 'http://maven.apache.org/POM/4.0.0',
        'xsi:schemaLocation': 'http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd',
        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'
    ])

    rootNode.with {
        appendNode('modelVersion', '4.0.0')
        appendNode('groupId', 'org.utbot')
        appendNode('artifactId', 'utbot-maven')
        appendNode('version', this.project.version)
        appendNode('packaging', 'maven-plugin')

        appendNode('build').with {
            // paths relative to src/main/resources
            appendNode('directory', '../../../build')
            appendNode('outputDirectory', '../../../build/classes/kotlin/main')
        }

        appendNode('dependencies').with {
            appendNode('dependency').with {
                appendNode('groupId', 'org.utbot')
                appendNode('artifactId', 'utbot-framework')
                appendNode('version', this.project.version)
                appendNode('scope', 'compile')
            }
        }
    }

    def repositoriesNode = rootNode.appendNode('repositories')
    project.repositories.indexed().forEach { index, repository ->
        repositoriesNode.appendNode('repository').with {
            appendNode('id', "${repository.name}_${index}") // unique id
            appendNode('url', repository.url)
        }
    }

    // creating `generatedPomFile` if it is not exist
    generatedPomFile.parentFile.mkdirs()
    generatedPomFile.createNewFile()

    // printing xml content to `generatedPomFile`
    def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(generatedPomFile)))
    printer.with {
        // pretty print
        preserveWhitespace = true
        expandEmptyElements = true
    }
    printer.print(rootNode)
}

/**
 * Generates the plugin descriptor file and saves it to the [pluginDescriptorFile].
 */
task generatePluginDescriptor(type: JavaExec, dependsOn: [compileKotlin, generatePomFile]) {
    inputs.files project.compileKotlin.outputs.files
    outputs.file pluginDescriptorFile

    workingDir projectDir
    classpath = configurations.mavenEmbedder
    mainClass.set('org.apache.maven.cli.MavenCli')
    systemProperties['maven.multiModuleProjectDirectory'] = projectDir
    args = [
        '--errors',
        '--batch-mode',
        '--file', "${generatedPomFile.path}",
        'org.apache.maven.plugins:maven-plugin-plugin:3.6.0:descriptor',
        '-Dproject.build.sourceEncoding=UTF-8'
    ]

    doLast {
        assert pluginDescriptorFile.file, "${pluginDescriptorFile.canonicalPath}: was not generated"
        logger.info("Plugin descriptor is generated in ${pluginDescriptorFile.canonicalPath}")
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            from components.java
        }
    }
}

/**
 * `publishToMavenLocal` task generates pom.xml file, but that's not what we need.
 * Therefore, we have to override the generated file with our own, stored in resources.
 */
generatePomFileForPluginMavenPublication.doLast {
    def pomFileFromMavenPublish = file("./build/publications/pluginMaven/pom-default.xml")
    pomFileFromMavenPublish.write(generatedPomFile.text)
}

// the plugin jar file should contain the plugin descriptor file
jar.dependsOn generatePluginDescriptor

generatePluginDescriptor.dependsOn([
    project(':utbot-api'),
    project(':utbot-core'),
    project(':utbot-instrumentation'),
    project(':utbot-framework'),
    project(':utbot-framework-api'),
    project(':utbot-fuzzers'),
    project(':utbot-rd'),
    project(':utbot-summary')
]*.tasks.publishToMavenLocal)

inspectClassesForKotlinIC.enabled = false
publishJarPublicationToMavenLocal.enabled = false
publishPluginMavenPublicationToMavenLocal.enabled = true
