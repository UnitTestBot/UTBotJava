configurations {
    mavenEmbedder // maven embeddable component, with CLI and logging support
}

dependencies {
    implementation project(':utbot-framework')

    implementation "org.apache.maven:maven-core:$mavenPluginApiVersion"
    implementation "org.apache.maven:maven-plugin-api:$mavenPluginApiVersion"
    compileOnly "org.apache.maven.plugin-tools:maven-plugin-annotations:$mavenPluginToolsVersion"
    implementation "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"

    implementation "org.eclipse.sisu:org.eclipse.sisu.plexus:$sisuPlexusVersion"
    testImplementation "org.apache.maven.plugin-testing:maven-plugin-testing-harness:$mavenPluginTestingVersion"
    testImplementation "org.apache.maven:maven-compat:$mavenPluginApiVersion"
    testImplementation "org.apache.maven.resolver:maven-resolver-api:$mavenResolverApiVersion"

    mavenEmbedder "org.apache.maven:maven-embedder:$mavenPluginApiVersion"
    mavenEmbedder "org.apache.maven:maven-compat:$mavenPluginApiVersion"
    mavenEmbedder "org.slf4j:slf4j-simple:$slf4jVersion"
    mavenEmbedder "org.eclipse.aether:aether-connector-basic:$eclipseAetherVersion"
    mavenEmbedder "org.eclipse.aether:aether-transport-wagon:$eclipseAetherVersion"
    mavenEmbedder "org.apache.maven.wagon:wagon-http:$mavenWagonVersion"
    mavenEmbedder "org.apache.maven.wagon:wagon-provider-api:$mavenWagonVersion"
}

/**
 * We should run the maven task `install` to build & publish this plugin.
 * But `utbot-maven` is the Gradle module (not Maven), so there is no `install` task
 * and we have to manually generate the pom.xml file and the plugin descriptor file.
 *
 * The pom.xml file is in the src/main/resources.
 * It should contain all the information needed at runtime.
 *
 * The plugin descriptor file is generated automatically by [generatePluginDescriptor].
 */

def pomFile = file("./src/main/resources/pom.xml")
def outputDirectory = project.buildDir.toPath().resolve("classes/kotlin/main")
def pluginDescriptorFile = new File("$outputDirectory/META-INF/maven/plugin.xml")

/**
 * Generates the plugin descriptor file and saves it to the [pluginDescriptorFile].
 */
task generatePluginDescriptor(type: JavaExec, dependsOn: compileKotlin) {
    inputs.files project.compileKotlin.outputs.files
    outputs.file pluginDescriptorFile

    workingDir projectDir
    classpath = configurations.mavenEmbedder
    mainClass.set('org.apache.maven.cli.MavenCli')
    systemProperties['maven.multiModuleProjectDirectory'] = projectDir
    args = [
        '--errors',
        '--batch-mode',
        '--file', "${pomFile.path}",
        'org.apache.maven.plugins:maven-plugin-plugin:3.6.0:descriptor',
        '-Dproject.build.sourceEncoding=UTF-8'
    ]

    doLast {
        assert pluginDescriptorFile.file, "${pluginDescriptorFile.canonicalPath}: was not generated"
        logger.info("Plugin descriptor is generated in ${pluginDescriptorFile.canonicalPath}")
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            from components.java
        }
    }
}

/**
 * `publishToMavenLocal` task generates pom.xml file, but that's not what we need.
 * Therefore, we have to override the generated file with our own, stored in resources.
 */
generatePomFileForPluginMavenPublication.doLast {
    def ourOwnPomXml = new XmlParser().parse(pomFile)
    def generatedPomFile = new File("./build/publications/pluginMaven/pom-default.xml")
    def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(generatedPomFile)))
    printer.with {
        // pretty print
        preserveWhitespace = true
        expandEmptyElements = true
    }
    printer.print(ourOwnPomXml)
}

// the plugin jar file should contain the plugin descriptor file
jar.dependsOn generatePluginDescriptor

generatePluginDescriptor.dependsOn([
    project(':utbot-api'),
    project(':utbot-core'),
    project(':utbot-instrumentation'),
    project(':utbot-framework'),
    project(':utbot-framework-api'),
    project(':utbot-fuzzers'),
    project(':utbot-rd'),
    project(':utbot-summary')
]*.tasks.publishToMavenLocal)

inspectClassesForKotlinIC.enabled = false
publishJarPublicationToMavenLocal.enabled = false
publishPluginMavenPublicationToMavenLocal.enabled = true
