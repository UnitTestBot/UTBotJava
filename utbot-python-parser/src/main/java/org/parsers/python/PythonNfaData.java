/* Generated by: JavaCC 21 Parser Generator. PythonNfaData.java */
package org.parsers.python;

import static org.parsers.python.PythonConstants.TokenType.*;
import java.util.Arrays;
import java.util.BitSet;
import java.util.EnumSet;
/**
 * Holder class for the data used by PythonLexer
 * to do the NFA thang
 */
class PythonNfaData implements PythonConstants {
    // The functional interface that represents 
    // the acceptance method of an NFA state
    static interface NfaFunction {
        TokenType apply(int ch, BitSet bs, EnumSet<TokenType> validTypes);
    }
    static private NfaFunction[] nfaFunctions;
    // This data holder class is never instantiated
    private PythonNfaData() {
    }

    /**
   * @param the lexical state
   * @return the table of function pointers that implement the lexical state
   */
    static final NfaFunction[] getFunctionTableMap(LexicalState lexicalState) {
        // We only have one lexical state in this case, so we return that!
        return nfaFunctions;
    }

    // Initialize the various NFA method tables
    static {
        PYTHON.NFA_FUNCTIONS_init();
    }
    // Just use the canned binary search to check whether the char
    // is in one of the intervals
    private static final boolean checkIntervals(int[] ranges, int ch) {
        int temp;
        return(temp= Arrays.binarySearch(ranges, ch))>=0||temp%2== 0;
    }

    /**
  * Holder class for NFA code related to PYTHON lexical state
  */
    private static class PYTHON {
        static TokenType NFA_COMPOSITE_PYTHON_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\f') {
                nextStates.set(56);
            }
            else if (ch== ' ') {
                nextStates.set(56);
            }
            else if (ch== '!') {
                nextStates.set(346);
            }
            else if (ch== '"') {
                nextStates.set(237);
                nextStates.set(33);
            }
            else if (ch== '%') {
                nextStates.set(241);
            }
            else if (ch== '&') {
                nextStates.set(282);
            }
            else if (ch== '\'') {
                nextStates.set(436);
                nextStates.set(79);
            }
            else if (ch== '*') {
                nextStates.set(210);
                nextStates.set(243);
                nextStates.set(307);
            }
            else if (ch== '+') {
                nextStates.set(231);
            }
            else if (ch== '-') {
                nextStates.set(374);
                nextStates.set(196);
            }
            else if (ch== '.') {
                nextStates.set(139);
                nextStates.set(438);
                nextStates.set(292);
            }
            else if (ch== '/') {
                nextStates.set(101);
                nextStates.set(337);
                nextStates.set(380);
            }
            else if (ch== '0') {
                nextStates.set(151);
                nextStates.set(252);
                nextStates.set(90);
                nextStates.set(80);
            }
            if (ch>='0'&&ch<='9') {
                nextStates.set(3);
                nextStates.set(93);
                nextStates.set(58);
                nextStates.set(92);
                nextStates.set(88);
            }
            if (ch>='1'&&ch<='9') {
                nextStates.set(37);
            }
            else if (ch== ':') {
                nextStates.set(219);
            }
            else if (ch== '<') {
                nextStates.set(100);
                nextStates.set(185);
                nextStates.set(279);
            }
            else if (ch== '=') {
                nextStates.set(153);
            }
            else if (ch== '>') {
                nextStates.set(385);
                nextStates.set(309);
                nextStates.set(361);
            }
            else if (ch== '?') {
                nextStates.set(238);
            }
            else if (ch== '@') {
                nextStates.set(150);
            }
            else if (ch== 'B') {
                nextStates.set(420);
                nextStates.set(132);
                nextStates.set(146);
                nextStates.set(122);
                nextStates.set(280);
                nextStates.set(247);
                nextStates.set(403);
                nextStates.set(408);
                nextStates.set(364);
                nextStates.set(301);
                nextStates.set(226);
                nextStates.set(395);
            }
            else if (ch== 'F') {
                nextStates.set(553);
                nextStates.set(459);
                nextStates.set(528);
                nextStates.set(464);
                nextStates.set(274);
                nextStates.set(320);
                nextStates.set(443);
                nextStates.set(415);
                nextStates.set(348);
                nextStates.set(410);
                nextStates.set(491);
                nextStates.set(378);
                nextStates.set(192);
            }
            else if (ch== 'N') {
                nextStates.set(376);
            }
            else if (ch== 'R') {
                nextStates.set(412);
                nextStates.set(270);
                nextStates.set(434);
                nextStates.set(194);
                nextStates.set(341);
                nextStates.set(464);
                nextStates.set(528);
                nextStates.set(261);
                nextStates.set(233);
                nextStates.set(232);
                nextStates.set(427);
                nextStates.set(553);
                nextStates.set(134);
                nextStates.set(377);
                nextStates.set(202);
                nextStates.set(296);
                nextStates.set(198);
                nextStates.set(225);
                nextStates.set(112);
                nextStates.set(491);
            }
            else if (ch== 'T') {
                nextStates.set(294);
            }
            else if (ch== 'U') {
                nextStates.set(553);
                nextStates.set(528);
                nextStates.set(464);
                nextStates.set(491);
            }
            else if (ch== '\\') {
                nextStates.set(326);
            }
            else if (ch== '^') {
                nextStates.set(343);
            }
            else if (ch== '_') {
                nextStates.set(142);
            }
            else if (ch== 'a') {
                nextStates.set(242);
                nextStates.set(230);
                nextStates.set(336);
                nextStates.set(389);
                nextStates.set(155);
            }
            else if (ch== 'b') {
                nextStates.set(388);
                nextStates.set(229);
                nextStates.set(133);
                nextStates.set(132);
                nextStates.set(116);
                nextStates.set(329);
                nextStates.set(411);
                nextStates.set(373);
                nextStates.set(221);
                nextStates.set(420);
                nextStates.set(364);
                nextStates.set(249);
                nextStates.set(408);
            }
            else if (ch== 'c') {
                nextStates.set(183);
                nextStates.set(200);
                nextStates.set(328);
            }
            else if (ch== 'd') {
                nextStates.set(234);
                nextStates.set(123);
            }
            else if (ch== 'e') {
                nextStates.set(357);
                nextStates.set(251);
                nextStates.set(248);
            }
            else if (ch== 'f') {
                nextStates.set(402);
                nextStates.set(214);
                nextStates.set(316);
                nextStates.set(428);
                nextStates.set(363);
                nextStates.set(135);
                nextStates.set(528);
                nextStates.set(491);
                nextStates.set(138);
                nextStates.set(171);
                nextStates.set(409);
                nextStates.set(553);
                nextStates.set(103);
                nextStates.set(250);
                nextStates.set(464);
            }
            else if (ch== 'g') {
                nextStates.set(457);
            }
            else if (ch== 'i') {
                nextStates.set(199);
                nextStates.set(404);
                nextStates.set(260);
                nextStates.set(367);
            }
            else if (ch== 'l') {
                nextStates.set(372);
            }
            else if (ch== 'm') {
                nextStates.set(168);
            }
            else if (ch== 'n') {
                nextStates.set(379);
                nextStates.set(435);
            }
            else if (ch== 'o') {
                nextStates.set(407);
            }
            else if (ch== 'p') {
                nextStates.set(370);
            }
            else if (ch== 'r') {
                nextStates.set(117);
                nextStates.set(528);
                nextStates.set(174);
                nextStates.set(312);
                nextStates.set(284);
                nextStates.set(190);
                nextStates.set(553);
                nextStates.set(167);
                nextStates.set(177);
                nextStates.set(262);
                nextStates.set(180);
                nextStates.set(452);
                nextStates.set(439);
                nextStates.set(440);
                nextStates.set(331);
                nextStates.set(405);
                nextStates.set(464);
                nextStates.set(109);
                nextStates.set(310);
                nextStates.set(491);
                nextStates.set(111);
                nextStates.set(265);
            }
            else if (ch== 't') {
                nextStates.set(179);
            }
            else if (ch== 'u') {
                nextStates.set(528);
                nextStates.set(553);
                nextStates.set(464);
                nextStates.set(491);
            }
            else if (ch== 'w') {
                nextStates.set(209);
                nextStates.set(236);
            }
            else if (ch== 'y') {
                nextStates.set(424);
            }
            else if (ch== '|') {
                nextStates.set(256);
            }
            if ((ch>='A'&&ch<='Z')||((ch== '_')||((ch>='a'&&ch<='z')||(ch>=0x80&&ch<=0xffff)))) {
                nextStates.set(342);
                if (validTypes.contains(BADNAME)) type= BADNAME;
            }
            if (((ch>='A'&&ch<='Z')||((ch== '_')||(ch>='a'&&ch<='z')))||(ch>=128&&checkIntervals(NFA_MOVES_PYTHON_276, ch))) {
                nextStates.set(371);
                if (validTypes.contains(NAME)) type= NAME;
            }
            else if (ch== '0') {
                nextStates.set(50);
                nextStates.set(489);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            else if (ch>='1'&&ch<='9') {
                nextStates.set(87);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            else if (ch== '%') {
                if (validTypes.contains(PERCENT)) type= PERCENT;
            }
            else if (ch== '/') {
                if (validTypes.contains(SLASH)) type= SLASH;
            }
            else if (ch== '+') {
                if (validTypes.contains(PLUS)) type= PLUS;
            }
            else if (ch== '-') {
                if (validTypes.contains(MINUS)) type= MINUS;
            }
            else if (ch== '<') {
                if (validTypes.contains(LT)) type= LT;
            }
            else if (ch== '>') {
                if (validTypes.contains(GT)) type= GT;
            }
            else if (ch== '.') {
                if (validTypes.contains(DOT)) type= DOT;
            }
            else if (ch== '~') {
                if (validTypes.contains(TILDE)) type= TILDE;
            }
            else if (ch== '^') {
                if (validTypes.contains(XOR)) type= XOR;
            }
            else if (ch== '|') {
                if (validTypes.contains(BIT_OR)) type= BIT_OR;
            }
            else if (ch== '&') {
                if (validTypes.contains(BIT_AND)) type= BIT_AND;
            }
            else if (ch== '*') {
                if (validTypes.contains(STAR)) type= STAR;
            }
            else if (ch== ';') {
                if (validTypes.contains(SEMICOLON)) type= SEMICOLON;
            }
            else if (ch== ')') {
                if (validTypes.contains(RPAREN)) type= RPAREN;
            }
            else if (ch== '(') {
                if (validTypes.contains(LPAREN)) type= LPAREN;
            }
            else if (ch== ']') {
                if (validTypes.contains(RBRACKET)) type= RBRACKET;
            }
            else if (ch== '[') {
                if (validTypes.contains(LBRACKET)) type= LBRACKET;
            }
            else if (ch== '}') {
                if (validTypes.contains(RBRACE)) type= RBRACE;
            }
            else if (ch== '{') {
                if (validTypes.contains(LBRACE)) type= LBRACE;
            }
            else if (ch== ',') {
                if (validTypes.contains(COMMA)) type= COMMA;
            }
            else if (ch== ':') {
                if (validTypes.contains(COLON)) type= COLON;
            }
            else if (ch== '@') {
                if (validTypes.contains(AT)) type= AT;
            }
            else if (ch== '=') {
                if (validTypes.contains(ASSIGN)) type= ASSIGN;
            }
            else if (ch== '\n') {
                if (validTypes.contains(NEWLINE)) type= NEWLINE;
            }
            else if (ch== '#') {
                nextStates.set(390);
                if (validTypes.contains(COMMENT)) type= COMMENT;
            }
            else if (ch== '\f') {
                nextStates.set(53);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            else if (ch== ' ') {
                nextStates.set(53);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(37);
            }
            else if (ch== '_') {
                nextStates.set(530);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_2(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(86);
            }
            else if (ch== '"') {
                nextStates.set(36);
            }
            if (ch== '\\') {
                nextStates.set(201);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_3(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '.') {
                nextStates.set(19);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(3);
            }
            else if (ch== '_') {
                nextStates.set(677);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_4(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(505);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(4);
                if (validTypes.contains(BADDECNUMBER)) type= BADDECNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BADDECNUMBER)) type= BADDECNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_5(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(51);
            }
            else if (ch== '"') {
                nextStates.set(42);
            }
            if (ch== '\\') {
                nextStates.set(113);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_6(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(72);
            }
            else if (ch== '\\') {
                nextStates.set(299);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_7(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(551);
            }
            else if (ch== '0'||ch== '1') {
                nextStates.set(34);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_8(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(576);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(44);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_9(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(33);
            }
            else if (ch== 'F') {
                nextStates.set(410);
                nextStates.set(378);
                nextStates.set(553);
            }
            else if (ch== 'R') {
                nextStates.set(553);
                nextStates.set(112);
                nextStates.set(233);
            }
            else if (ch== 'U') {
                nextStates.set(553);
            }
            else if (ch== 'f') {
                nextStates.set(363);
                nextStates.set(553);
                nextStates.set(250);
            }
            else if (ch== 'r') {
                nextStates.set(174);
                nextStates.set(553);
                nextStates.set(331);
            }
            else if (ch== 'u') {
                nextStates.set(553);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_10(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(49);
            }
            if (ch== '\\') {
                nextStates.set(340);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_11(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(19);
            }
            else if (ch== '_') {
                nextStates.set(534);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_12(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(79);
            }
            else if (ch== 'F') {
                nextStates.set(443);
                nextStates.set(192);
                nextStates.set(528);
            }
            else if (ch== 'R') {
                nextStates.set(202);
                nextStates.set(528);
                nextStates.set(427);
            }
            else if (ch== 'U') {
                nextStates.set(528);
            }
            else if (ch== 'f') {
                nextStates.set(528);
                nextStates.set(135);
                nextStates.set(316);
            }
            else if (ch== 'r') {
                nextStates.set(440);
                nextStates.set(528);
                nextStates.set(452);
            }
            else if (ch== 'u') {
                nextStates.set(528);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_13(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(79);
            }
            else if (ch== '\\') {
                nextStates.set(369);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_14(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(14);
            }
            else if (ch== '_') {
                nextStates.set(590);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_15(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(280);
                nextStates.set(364);
                nextStates.set(122);
            }
            else if (ch== 'R') {
                nextStates.set(225);
                nextStates.set(434);
            }
            else if (ch== 'b') {
                nextStates.set(329);
                nextStates.set(364);
                nextStates.set(373);
            }
            else if (ch== 'r') {
                nextStates.set(310);
                nextStates.set(117);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_16(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(63);
            }
            if (ch== '\\') {
                nextStates.set(426);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_17(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(92);
            }
            else if (ch== '_') {
                nextStates.set(664);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_18(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(552);
            }
            else if (ch>='0'&&ch<='7') {
                nextStates.set(18);
                if (validTypes.contains(OCTNUMBER)) type= OCTNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(OCTNUMBER)) type= OCTNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_19(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(19);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(84);
            }
            else if (ch== '_') {
                nextStates.set(534);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_20(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(481);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(95);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_21(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(420);
                nextStates.set(226);
                nextStates.set(247);
            }
            else if (ch== 'R') {
                nextStates.set(134);
                nextStates.set(232);
            }
            else if (ch== 'b') {
                nextStates.set(420);
                nextStates.set(229);
                nextStates.set(133);
            }
            else if (ch== 'r') {
                nextStates.set(284);
                nextStates.set(180);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_22(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(511);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(22);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_23(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(86);
            }
            if (ch== '\\') {
                nextStates.set(201);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_24(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(626);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_25(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(47);
            }
            else if (ch== '_') {
                nextStates.set(517);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_26(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(14);
            }
            else if (ch== '_') {
                nextStates.set(590);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_27(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(40);
            }
            else if (ch== '_') {
                nextStates.set(602);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_28(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(93);
            }
            else if (ch== '_') {
                nextStates.set(574);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_29(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(630);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(47);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_30(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(33);
            }
            else if (ch== '\\') {
                nextStates.set(358);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_31(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(410);
                nextStates.set(378);
                nextStates.set(553);
            }
            else if (ch== 'R') {
                nextStates.set(553);
                nextStates.set(112);
                nextStates.set(233);
            }
            else if (ch== 'U') {
                nextStates.set(553);
            }
            else if (ch== 'f') {
                nextStates.set(363);
                nextStates.set(553);
                nextStates.set(250);
            }
            else if (ch== 'r') {
                nextStates.set(174);
                nextStates.set(553);
                nextStates.set(331);
            }
            else if (ch== 'u') {
                nextStates.set(553);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_32(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(78);
            }
            else if (ch== '\\') {
                nextStates.set(330);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_33(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(33);
            }
            else if (ch== '\\') {
                nextStates.set(358);
            }
            else if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_34(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(551);
            }
            else if (ch== '0'||ch== '1') {
                nextStates.set(34);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_35(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(552);
            }
            else if (ch>='0'&&ch<='7') {
                nextStates.set(18);
                if (validTypes.contains(OCTNUMBER)) type= OCTNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_36(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(86);
            }
            else if (ch== '"') {
                nextStates.set(23);
            }
            if (ch== '\\') {
                nextStates.set(201);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_37(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(37);
            }
            else if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(626);
            }
            else if (ch== '_') {
                nextStates.set(530);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_38(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(38);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_39(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '.') {
                nextStates.set(438);
            }
            else if (ch== '0') {
                nextStates.set(80);
                nextStates.set(90);
            }
            if (ch>='0'&&ch<='9') {
                nextStates.set(58);
                nextStates.set(3);
            }
            if (ch>='1'&&ch<='9') {
                nextStates.set(37);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_40(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(40);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(29);
            }
            else if (ch== '_') {
                nextStates.set(602);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_41(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(626);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_42(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(51);
            }
            if (ch== '\\') {
                nextStates.set(113);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_43(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(63);
            }
            else if (ch== '\'') {
                nextStates.set(64);
            }
            if (ch== '\\') {
                nextStates.set(426);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_44(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(62);
            }
            else if (ch== '_') {
                nextStates.set(576);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(44);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_45(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(80);
            }
            else if (ch>='1'&&ch<='9') {
                nextStates.set(37);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_46(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(237);
            }
            else if (ch== 'F') {
                nextStates.set(348);
                nextStates.set(464);
                nextStates.set(459);
            }
            else if (ch== 'R') {
                nextStates.set(198);
                nextStates.set(270);
                nextStates.set(464);
            }
            else if (ch== 'U') {
                nextStates.set(464);
            }
            else if (ch== 'f') {
                nextStates.set(409);
                nextStates.set(464);
                nextStates.set(138);
            }
            else if (ch== 'r') {
                nextStates.set(312);
                nextStates.set(464);
                nextStates.set(167);
            }
            else if (ch== 'u') {
                nextStates.set(464);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_47(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(47);
            }
            else if (ch== '_') {
                nextStates.set(517);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_48(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(49);
            }
            else if (ch== '\'') {
                nextStates.set(83);
            }
            if (ch== '\\') {
                nextStates.set(340);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_49(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(49);
            }
            else if (ch== '\'') {
                nextStates.set(83);
                nextStates.set(399);
            }
            if (ch== '\\') {
                nextStates.set(340);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_50(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(551);
            }
            else if (ch== '0'||ch== '1') {
                nextStates.set(34);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            else if ((ch== 'B')||(ch== 'b')) {
                nextStates.set(34);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_51(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(51);
            }
            else if (ch== '"') {
                nextStates.set(5);
                nextStates.set(288);
            }
            if (ch== '\\') {
                nextStates.set(113);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_52(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '.') {
                nextStates.set(438);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(58);
                nextStates.set(3);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_53(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\f') {
                nextStates.set(53);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            else if (ch== ' ') {
                nextStates.set(53);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_54(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(638);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(54);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_55(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(348);
                nextStates.set(464);
                nextStates.set(459);
            }
            else if (ch== 'R') {
                nextStates.set(198);
                nextStates.set(270);
                nextStates.set(464);
            }
            else if (ch== 'U') {
                nextStates.set(464);
            }
            else if (ch== 'f') {
                nextStates.set(409);
                nextStates.set(464);
                nextStates.set(138);
            }
            else if (ch== 'r') {
                nextStates.set(312);
                nextStates.set(464);
                nextStates.set(167);
            }
            else if (ch== 'u') {
                nextStates.set(464);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_56(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\f') {
                nextStates.set(56);
            }
            else if (ch== ' ') {
                nextStates.set(56);
            }
            else if (ch== '\n') {
                if (validTypes.contains(NEWLINE)) type= NEWLINE;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_57(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(443);
                nextStates.set(192);
                nextStates.set(528);
            }
            else if (ch== 'R') {
                nextStates.set(202);
                nextStates.set(528);
                nextStates.set(427);
            }
            else if (ch== 'U') {
                nextStates.set(528);
            }
            else if (ch== 'f') {
                nextStates.set(528);
                nextStates.set(135);
                nextStates.set(316);
            }
            else if (ch== 'r') {
                nextStates.set(440);
                nextStates.set(528);
                nextStates.set(452);
            }
            else if (ch== 'u') {
                nextStates.set(528);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_58(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(58);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(66);
            }
            else if (ch== '_') {
                nextStates.set(678);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_59(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(415);
                nextStates.set(491);
                nextStates.set(320);
            }
            else if (ch== 'R') {
                nextStates.set(412);
                nextStates.set(341);
                nextStates.set(491);
            }
            else if (ch== 'U') {
                nextStates.set(491);
            }
            else if (ch== 'f') {
                nextStates.set(491);
                nextStates.set(402);
                nextStates.set(428);
            }
            else if (ch== 'r') {
                nextStates.set(439);
                nextStates.set(109);
                nextStates.set(491);
            }
            else if (ch== 'u') {
                nextStates.set(491);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_60(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(489);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            else if (ch>='1'&&ch<='9') {
                nextStates.set(87);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_61(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(132);
                nextStates.set(146);
                nextStates.set(395);
            }
            else if (ch== 'R') {
                nextStates.set(377);
                nextStates.set(194);
            }
            else if (ch== 'b') {
                nextStates.set(116);
                nextStates.set(388);
                nextStates.set(132);
            }
            else if (ch== 'r') {
                nextStates.set(265);
                nextStates.set(177);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_62(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(502);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(54);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_63(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(63);
            }
            else if (ch== '\'') {
                nextStates.set(64);
                nextStates.set(349);
            }
            if (ch== '\\') {
                nextStates.set(426);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_64(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(63);
            }
            else if (ch== '\'') {
                nextStates.set(16);
            }
            if (ch== '\\') {
                nextStates.set(426);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_65(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\f') {
                nextStates.set(56);
            }
            else if (ch== ' ') {
                nextStates.set(56);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_66(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(499);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(82);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_67(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(436);
            }
            else if (ch== 'F') {
                nextStates.set(415);
                nextStates.set(491);
                nextStates.set(320);
            }
            else if (ch== 'R') {
                nextStates.set(412);
                nextStates.set(341);
                nextStates.set(491);
            }
            else if (ch== 'U') {
                nextStates.set(491);
            }
            else if (ch== 'f') {
                nextStates.set(491);
                nextStates.set(402);
                nextStates.set(428);
            }
            else if (ch== 'r') {
                nextStates.set(439);
                nextStates.set(109);
                nextStates.set(491);
            }
            else if (ch== 'u') {
                nextStates.set(491);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_68(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(82);
            }
            else if (ch== '_') {
                nextStates.set(498);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_69(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(69);
            }
            else if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(626);
            }
            else if (ch== '_') {
                nextStates.set(524);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_70(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(666);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(70);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_71(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(3);
            }
            else if (ch== '_') {
                nextStates.set(677);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_72(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(72);
            }
            else if (ch== '\\') {
                nextStates.set(299);
            }
            else if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_73(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(597);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(22);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_74(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(84);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_75(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(69);
            }
            else if (ch== '_') {
                nextStates.set(524);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_76(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(237);
                nextStates.set(33);
            }
            else if (ch== '\'') {
                nextStates.set(436);
                nextStates.set(79);
            }
            else if (ch== 'B') {
                nextStates.set(420);
                nextStates.set(132);
                nextStates.set(280);
                nextStates.set(247);
                nextStates.set(403);
                nextStates.set(408);
                nextStates.set(364);
                nextStates.set(301);
                nextStates.set(226);
                nextStates.set(146);
                nextStates.set(395);
                nextStates.set(122);
            }
            else if (ch== 'F') {
                nextStates.set(553);
                nextStates.set(459);
                nextStates.set(348);
                nextStates.set(528);
                nextStates.set(464);
                nextStates.set(320);
                nextStates.set(410);
                nextStates.set(443);
                nextStates.set(491);
                nextStates.set(415);
                nextStates.set(378);
                nextStates.set(192);
            }
            else if (ch== 'R') {
                nextStates.set(412);
                nextStates.set(270);
                nextStates.set(232);
                nextStates.set(427);
                nextStates.set(553);
                nextStates.set(434);
                nextStates.set(194);
                nextStates.set(134);
                nextStates.set(341);
                nextStates.set(377);
                nextStates.set(464);
                nextStates.set(528);
                nextStates.set(261);
                nextStates.set(233);
                nextStates.set(202);
                nextStates.set(296);
                nextStates.set(198);
                nextStates.set(225);
                nextStates.set(112);
                nextStates.set(491);
            }
            else if (ch== 'U') {
                nextStates.set(464);
                nextStates.set(553);
                nextStates.set(528);
                nextStates.set(491);
            }
            else if (ch== 'b') {
                nextStates.set(388);
                nextStates.set(229);
                nextStates.set(133);
                nextStates.set(411);
                nextStates.set(373);
                nextStates.set(221);
                nextStates.set(420);
                nextStates.set(132);
                nextStates.set(116);
                nextStates.set(364);
                nextStates.set(408);
                nextStates.set(329);
            }
            else if (ch== 'f') {
                nextStates.set(528);
                nextStates.set(491);
                nextStates.set(402);
                nextStates.set(138);
                nextStates.set(316);
                nextStates.set(409);
                nextStates.set(553);
                nextStates.set(428);
                nextStates.set(363);
                nextStates.set(135);
                nextStates.set(250);
                nextStates.set(464);
            }
            else if (ch== 'r') {
                nextStates.set(117);
                nextStates.set(439);
                nextStates.set(528);
                nextStates.set(174);
                nextStates.set(312);
                nextStates.set(284);
                nextStates.set(440);
                nextStates.set(331);
                nextStates.set(405);
                nextStates.set(464);
                nextStates.set(109);
                nextStates.set(553);
                nextStates.set(310);
                nextStates.set(491);
                nextStates.set(167);
                nextStates.set(265);
                nextStates.set(177);
                nextStates.set(262);
                nextStates.set(180);
                nextStates.set(452);
            }
            else if (ch== 'u') {
                nextStates.set(528);
                nextStates.set(553);
                nextStates.set(464);
                nextStates.set(491);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_77(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(514);
            }
            else if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
                nextStates.set(98);
                if (validTypes.contains(HEXNUMBER)) type= HEXNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_78(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(78);
            }
            else if (ch== '\\') {
                nextStates.set(330);
            }
            else if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_79(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(79);
            }
            else if (ch== '\\') {
                nextStates.set(369);
            }
            else if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_80(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(80);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_81(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(403);
                nextStates.set(408);
                nextStates.set(301);
            }
            else if (ch== 'R') {
                nextStates.set(296);
                nextStates.set(261);
            }
            else if (ch== 'b') {
                nextStates.set(408);
                nextStates.set(411);
                nextStates.set(221);
            }
            else if (ch== 'r') {
                nextStates.set(405);
                nextStates.set(262);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_82(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(82);
            }
            else if (ch== '_') {
                nextStates.set(498);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_83(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(49);
            }
            else if (ch== '\'') {
                nextStates.set(10);
            }
            if (ch== '\\') {
                nextStates.set(340);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_84(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(496);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(14);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_85(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(51);
            }
            else if (ch== '"') {
                nextStates.set(5);
            }
            if (ch== '\\') {
                nextStates.set(113);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_86(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(86);
            }
            else if (ch== '"') {
                nextStates.set(108);
                nextStates.set(36);
            }
            if (ch== '\\') {
                nextStates.set(201);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_87(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(490);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(87);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_88(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(505);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(4);
                if (validTypes.contains(BADDECNUMBER)) type= BADDECNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_89(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(29);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_90(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(38);
            }
            else if (ch>='1'&&ch<='9') {
                nextStates.set(69);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_91(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(490);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(87);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_92(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(92);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(73);
            }
            else if (ch== '_') {
                nextStates.set(664);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_93(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(93);
            }
            else if (ch== '_') {
                nextStates.set(574);
            }
            else if (ch== '.') {
                nextStates.set(44);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_94(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '.') {
                nextStates.set(292);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(93);
                nextStates.set(92);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_95(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(96);
            }
            else if (ch== '_') {
                nextStates.set(481);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(95);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_96(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(669);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(70);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_97(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(58);
            }
            else if (ch== '_') {
                nextStates.set(678);
            }
            return type;
        }

        static TokenType NFA_COMPOSITE_PYTHON_98(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(514);
            }
            else if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
                nextStates.set(98);
                if (validTypes.contains(HEXNUMBER)) type= HEXNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(HEXNUMBER)) type= HEXNUMBER;
            }
            return type;
        }

        static TokenType NFA_PYTHON_99(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '<') {
                if (validTypes.contains(LT)) return LT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_100(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(LE)) return LE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_101(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '/') {
                nextStates.set(264);
            }
            return null;
        }

        static TokenType NFA_PYTHON_102(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'T') {
                nextStates.set(294);
            }
            return null;
        }

        static TokenType NFA_PYTHON_103(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(216);
            }
            return null;
        }

        static TokenType NFA_PYTHON_104(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(206);
            }
            return null;
        }

        static TokenType NFA_PYTHON_105(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                nextStates.set(139);
            }
            return null;
        }

        static TokenType NFA_PYTHON_106(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'u') {
                nextStates.set(302);
            }
            return null;
        }

        static TokenType NFA_PYTHON_107(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                if (validTypes.contains(NONLOCAL)) return NONLOCAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_108(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(158);
            }
            return null;
        }

        static TokenType NFA_PYTHON_109(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_110(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(314);
            }
            return null;
        }

        static TokenType NFA_PYTHON_111(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(148);
            }
            return null;
        }

        static TokenType NFA_PYTHON_112(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_113(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0) {
                nextStates.set(51);
            }
            return null;
        }

        static TokenType NFA_PYTHON_114(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(CONTINUE)) return CONTINUE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_115(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '(') {
                if (validTypes.contains(LPAREN)) return LPAREN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_116(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_117(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_118(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                if (validTypes.contains(CLASS)) return CLASS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_119(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                if (validTypes.contains(GLOBAL)) return GLOBAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_120(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'p') {
                nextStates.set(285);
            }
            return null;
        }

        static TokenType NFA_PYTHON_121(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(384);
            }
            return null;
        }

        static TokenType NFA_PYTHON_122(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_123(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(460);
            }
            return null;
        }

        static TokenType NFA_PYTHON_124(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(ASSIGN)) return ASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_125(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(131);
            }
            return null;
        }

        static TokenType NFA_PYTHON_126(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(258);
            }
            return null;
        }

        static TokenType NFA_PYTHON_127(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(164);
            }
            return null;
        }

        static TokenType NFA_PYTHON_128(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(157);
            }
            return null;
        }

        static TokenType NFA_PYTHON_129(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'p') {
                nextStates.set(304);
            }
            return null;
        }

        static TokenType NFA_PYTHON_130(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(338);
            }
            return null;
        }

        static TokenType NFA_PYTHON_131(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'm') {
                if (validTypes.contains(FROM)) return FROM;
            }
            return null;
        }

        static TokenType NFA_PYTHON_132(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(78);
            }
            return null;
        }

        static TokenType NFA_PYTHON_133(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_134(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_135(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_136(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '}') {
                if (validTypes.contains(RBRACE)) return RBRACE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_137(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '&') {
                nextStates.set(282);
            }
            return null;
        }

        static TokenType NFA_PYTHON_138(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_139(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                nextStates.set(458);
            }
            return null;
        }

        static TokenType NFA_PYTHON_140(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'd') {
                if (validTypes.contains(AND)) return AND;
            }
            return null;
        }

        static TokenType NFA_PYTHON_141(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'h') {
                if (validTypes.contains(WITH)) return WITH;
            }
            return null;
        }

        static TokenType NFA_PYTHON_142(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(353);
            }
            return null;
        }

        static TokenType NFA_PYTHON_143(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(203);
            }
            return null;
        }

        static TokenType NFA_PYTHON_144(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0') {
                nextStates.set(50);
                if (validTypes.contains(BINNUMBER)) return BINNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_145(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'p') {
                nextStates.set(370);
            }
            return null;
        }

        static TokenType NFA_PYTHON_146(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_147(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(396);
            }
            return null;
        }

        static TokenType NFA_PYTHON_148(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                nextStates.set(149);
            }
            return null;
        }

        static TokenType NFA_PYTHON_149(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'u') {
                nextStates.set(447);
            }
            return null;
        }

        static TokenType NFA_PYTHON_150(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(ATASSIGN)) return ATASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_151(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'O')||(ch== 'o')) {
                nextStates.set(18);
                if (validTypes.contains(OCTNUMBER)) return OCTNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_152(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'c') {
                nextStates.set(462);
            }
            return null;
        }

        static TokenType NFA_PYTHON_153(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(EQ)) return EQ;
            }
            return null;
        }

        static TokenType NFA_PYTHON_154(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '%') {
                if (validTypes.contains(PERCENT)) return PERCENT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_155(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(272);
            }
            return null;
        }

        static TokenType NFA_PYTHON_156(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                if (validTypes.contains(AWAIT)) return AWAIT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_157(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(394);
            }
            return null;
        }

        static TokenType NFA_PYTHON_158(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_159(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '<') {
                nextStates.set(100);
            }
            return null;
        }

        static TokenType NFA_PYTHON_160(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '#') {
                nextStates.set(390);
                if (validTypes.contains(COMMENT)) return COMMENT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_161(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(407);
            }
            return null;
        }

        static TokenType NFA_PYTHON_162(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                if (validTypes.contains(DOT)) return DOT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_163(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                if (validTypes.contains(NOT)) return NOT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_164(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                if (validTypes.contains(PEG_PARSER)) return PEG_PARSER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_165(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '^') {
                nextStates.set(343);
            }
            return null;
        }

        static TokenType NFA_PYTHON_166(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(248);
            }
            return null;
        }

        static TokenType NFA_PYTHON_167(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_168(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(291);
            }
            return null;
        }

        static TokenType NFA_PYTHON_169(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(435);
            }
            return null;
        }

        static TokenType NFA_PYTHON_170(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(207);
            }
            return null;
        }

        static TokenType NFA_PYTHON_171(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(222);
            }
            return null;
        }

        static TokenType NFA_PYTHON_172(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'c') {
                nextStates.set(328);
            }
            return null;
        }

        static TokenType NFA_PYTHON_173(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(249);
            }
            return null;
        }

        static TokenType NFA_PYTHON_174(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_175(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                if (validTypes.contains(PASS)) return PASS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_176(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(88);
            }
            return null;
        }

        static TokenType NFA_PYTHON_177(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_178(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '/') {
                if (validTypes.contains(SLASH)) return SLASH;
            }
            return null;
        }

        static TokenType NFA_PYTHON_179(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(278);
            }
            return null;
        }

        static TokenType NFA_PYTHON_180(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_181(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(111);
            }
            return null;
        }

        static TokenType NFA_PYTHON_182(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(STARSTARASSIGN)) return STARSTARASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_183(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(147);
            }
            return null;
        }

        static TokenType NFA_PYTHON_184(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(217);
            }
            return null;
        }

        static TokenType NFA_PYTHON_185(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '<') {
                if (validTypes.contains(LSHIFT)) return LSHIFT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_186(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(LSHIFTASSIGN)) return LSHIFTASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_187(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                if (validTypes.contains(ELIF)) return ELIF;
            }
            return null;
        }

        static TokenType NFA_PYTHON_188(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'c') {
                nextStates.set(183);
            }
            return null;
        }

        static TokenType NFA_PYTHON_189(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(344);
            }
            return null;
        }

        static TokenType NFA_PYTHON_190(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(352);
            }
            return null;
        }

        static TokenType NFA_PYTHON_191(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(269);
            }
            return null;
        }

        static TokenType NFA_PYTHON_192(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_193(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(293);
            }
            return null;
        }

        static TokenType NFA_PYTHON_194(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_195(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0') {
                nextStates.set(151);
            }
            return null;
        }

        static TokenType NFA_PYTHON_196(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(MINUSASSIGN)) return MINUSASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_197(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(242);
            }
            return null;
        }

        static TokenType NFA_PYTHON_198(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_199(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                if (validTypes.contains(IN)) return IN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_200(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(143);
            }
            return null;
        }

        static TokenType NFA_PYTHON_201(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(86);
            }
            return null;
        }

        static TokenType NFA_PYTHON_202(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_203(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(CASE)) return CASE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_204(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(274);
            }
            return null;
        }

        static TokenType NFA_PYTHON_205(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(268);
            }
            return null;
        }

        static TokenType NFA_PYTHON_206(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'd') {
                if (validTypes.contains(YIELD)) return YIELD;
            }
            return null;
        }

        static TokenType NFA_PYTHON_207(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(49);
            }
            return null;
        }

        static TokenType NFA_PYTHON_208(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '-') {
                if (validTypes.contains(MINUS)) return MINUS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_209(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'h') {
                nextStates.set(448);
            }
            return null;
        }

        static TokenType NFA_PYTHON_210(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '*') {
                nextStates.set(182);
            }
            return null;
        }

        static TokenType NFA_PYTHON_211(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(333);
            }
            return null;
        }

        static TokenType NFA_PYTHON_212(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'g') {
                nextStates.set(457);
            }
            return null;
        }

        static TokenType NFA_PYTHON_213(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '!') {
                nextStates.set(346);
            }
            return null;
        }

        static TokenType NFA_PYTHON_214(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(125);
            }
            return null;
        }

        static TokenType NFA_PYTHON_215(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(326);
            }
            return null;
        }

        static TokenType NFA_PYTHON_216(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                if (validTypes.contains(FOR)) return FOR;
            }
            return null;
        }

        static TokenType NFA_PYTHON_217(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'c') {
                if (validTypes.contains(ASYNC)) return ASYNC;
            }
            return null;
        }

        static TokenType NFA_PYTHON_218(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(104);
            }
            return null;
        }

        static TokenType NFA_PYTHON_219(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(COLONEQUALS)) return COLONEQUALS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_220(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '*') {
                nextStates.set(243);
            }
            return null;
        }

        static TokenType NFA_PYTHON_221(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_222(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(418);
            }
            return null;
        }

        static TokenType NFA_PYTHON_223(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(437);
            }
            return null;
        }

        static TokenType NFA_PYTHON_224(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'w') {
                nextStates.set(209);
            }
            return null;
        }

        static TokenType NFA_PYTHON_225(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_226(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_227(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(425);
            }
            return null;
        }

        static TokenType NFA_PYTHON_228(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ')') {
                if (validTypes.contains(RPAREN)) return RPAREN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_229(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_230(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'w') {
                nextStates.set(193);
            }
            return null;
        }

        static TokenType NFA_PYTHON_231(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(PLUSASSIGN)) return PLUSASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_232(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_233(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_234(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(453);
            }
            return null;
        }

        static TokenType NFA_PYTHON_235(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(318);
            }
            return null;
        }

        static TokenType NFA_PYTHON_236(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(335);
            }
            return null;
        }

        static TokenType NFA_PYTHON_237(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(295);
            }
            return null;
        }

        static TokenType NFA_PYTHON_238(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ' ') {
                if (validTypes.contains(HOOK)) return HOOK;
            }
            return null;
        }

        static TokenType NFA_PYTHON_239(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(RAISE)) return RAISE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_240(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(126);
            }
            return null;
        }

        static TokenType NFA_PYTHON_241(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(REMASSIGN)) return REMASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_242(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                if (validTypes.contains(AS)) return AS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_243(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(STARASSIGN)) return STARASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_244(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(322);
            }
            return null;
        }

        static TokenType NFA_PYTHON_245(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'y') {
                nextStates.set(424);
            }
            return null;
        }

        static TokenType NFA_PYTHON_246(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(239);
            }
            return null;
        }

        static TokenType NFA_PYTHON_247(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_248(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(308);
            }
            return null;
        }

        static TokenType NFA_PYTHON_249(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(128);
            }
            return null;
        }

        static TokenType NFA_PYTHON_250(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_251(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(300);
            }
            return null;
        }

        static TokenType NFA_PYTHON_252(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'X')||(ch== 'x')) {
                nextStates.set(77);
            }
            return null;
        }

        static TokenType NFA_PYTHON_253(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '@') {
                if (validTypes.contains(AT)) return AT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_254(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'y') {
                if (validTypes.contains(FINALLY)) return FINALLY;
            }
            return null;
        }

        static TokenType NFA_PYTHON_255(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '<') {
                nextStates.set(185);
            }
            return null;
        }

        static TokenType NFA_PYTHON_256(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(ORASSIGN)) return ORASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_257(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(RSHIFTASSIGN)) return RSHIFTASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_258(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(119);
            }
            return null;
        }

        static TokenType NFA_PYTHON_259(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(ELSE)) return ELSE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_260(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                if (validTypes.contains(IS)) return IS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_261(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_262(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_263(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(430);
            }
            return null;
        }

        static TokenType NFA_PYTHON_264(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(SLASHSLASHASSIGN)) return SLASHSLASHASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_265(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_266(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(398);
            }
            return null;
        }

        static TokenType NFA_PYTHON_267(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(367);
            }
            return null;
        }

        static TokenType NFA_PYTHON_268(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(191);
            }
            return null;
        }

        static TokenType NFA_PYTHON_269(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(127);
            }
            return null;
        }

        static TokenType NFA_PYTHON_270(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_271(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '*') {
                nextStates.set(307);
            }
            return null;
        }

        static TokenType NFA_PYTHON_272(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(455);
            }
            return null;
        }

        static TokenType NFA_PYTHON_273(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(450);
            }
            return null;
        }

        static TokenType NFA_PYTHON_274(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(266);
            }
            return null;
        }

        static TokenType NFA_PYTHON_275(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(103);
            }
            return null;
        }

        static private int[] NFA_MOVES_PYTHON_276= NFA_MOVES_PYTHON_276_init();
        static private int[] NFA_MOVES_PYTHON_276_init() {
            int[] result= new int[1268];
            result[0]= 'A';
            result[1]= 'Z';
            result[2]= '_';
            result[3]= '_';
            result[4]= 'a';
            result[5]= 'z';
            result[6]= 0xaa;
            result[7]= 0xaa;
            result[8]= 0xb5;
            result[9]= 0xb5;
            result[10]= 0xba;
            result[11]= 0xba;
            result[12]= 0xc0;
            result[13]= 0xd6;
            result[14]= 0xd8;
            result[15]= 0xf6;
            result[16]= 0xf8;
            result[17]= 0x13e;
            result[18]= 0x141;
            result[19]= 0x2c1;
            result[20]= 0x2c6;
            result[21]= 0x2d1;
            result[22]= 0x2e0;
            result[23]= 0x2e4;
            result[24]= 0x2ec;
            result[25]= 0x2ec;
            result[26]= 0x2ee;
            result[27]= 0x2ee;
            result[28]= 0x370;
            result[29]= 0x374;
            result[30]= 0x376;
            result[31]= 0x377;
            result[32]= 0x37b;
            result[33]= 0x37d;
            result[34]= 0x37f;
            result[35]= 0x37f;
            result[36]= 0x386;
            result[37]= 0x386;
            result[38]= 0x388;
            result[39]= 0x38a;
            result[40]= 0x38c;
            result[41]= 0x38c;
            result[42]= 0x38e;
            result[43]= 0x3a1;
            result[44]= 0x3a3;
            result[45]= 0x3f5;
            result[46]= 0x3f7;
            result[47]= 0x481;
            result[48]= 0x48a;
            result[49]= 0x52f;
            result[50]= 0x531;
            result[51]= 0x556;
            result[52]= 0x559;
            result[53]= 0x559;
            result[54]= 0x560;
            result[55]= 0x588;
            result[56]= 0x5d0;
            result[57]= 0x5ea;
            result[58]= 0x5ef;
            result[59]= 0x5f2;
            result[60]= 0x620;
            result[61]= 0x64a;
            result[62]= 0x66e;
            result[63]= 0x66f;
            result[64]= 0x671;
            result[65]= 0x6d3;
            result[66]= 0x6d5;
            result[67]= 0x6d5;
            result[68]= 0x6e5;
            result[69]= 0x6e6;
            result[70]= 0x6ee;
            result[71]= 0x6ef;
            result[72]= 0x6fa;
            result[73]= 0x6fc;
            result[74]= 0x6ff;
            result[75]= 0x6ff;
            result[76]= 0x710;
            result[77]= 0x710;
            result[78]= 0x712;
            result[79]= 0x72f;
            result[80]= 0x74d;
            result[81]= 0x7a5;
            result[82]= 0x7b1;
            result[83]= 0x7b1;
            result[84]= 0x7ca;
            result[85]= 0x7ea;
            result[86]= 0x7f4;
            result[87]= 0x7f5;
            result[88]= 0x7fa;
            result[89]= 0x7fa;
            result[90]= 0x800;
            result[91]= 0x815;
            result[92]= 0x81a;
            result[93]= 0x81a;
            result[94]= 0x824;
            result[95]= 0x824;
            result[96]= 0x828;
            result[97]= 0x828;
            result[98]= 0x840;
            result[99]= 0x858;
            result[100]= 0x860;
            result[101]= 0x86a;
            result[102]= 0x8a0;
            result[103]= 0x8b4;
            result[104]= 0x8b6;
            result[105]= 0x8c7;
            result[106]= 0x904;
            result[107]= 0x939;
            result[108]= 0x93d;
            result[109]= 0x93d;
            result[110]= 0x950;
            result[111]= 0x950;
            result[112]= 0x958;
            result[113]= 0x961;
            result[114]= 0x971;
            result[115]= 0x980;
            result[116]= 0x985;
            result[117]= 0x98c;
            result[118]= 0x98f;
            result[119]= 0x990;
            result[120]= 0x993;
            result[121]= 0x9a8;
            result[122]= 0x9aa;
            result[123]= 0x9b0;
            result[124]= 0x9b2;
            result[125]= 0x9b2;
            result[126]= 0x9b6;
            result[127]= 0x9b9;
            result[128]= 0x9bd;
            result[129]= 0x9bd;
            result[130]= 0x9ce;
            result[131]= 0x9ce;
            result[132]= 0x9dc;
            result[133]= 0x9dd;
            result[134]= 0x9df;
            result[135]= 0x9e1;
            result[136]= 0x9f0;
            result[137]= 0x9f1;
            result[138]= 0x9fc;
            result[139]= 0x9fc;
            result[140]= 0xa05;
            result[141]= 0xa0a;
            result[142]= 0xa0f;
            result[143]= 0xa10;
            result[144]= 0xa13;
            result[145]= 0xa28;
            result[146]= 0xa2a;
            result[147]= 0xa30;
            result[148]= 0xa32;
            result[149]= 0xa33;
            result[150]= 0xa35;
            result[151]= 0xa36;
            result[152]= 0xa38;
            result[153]= 0xa39;
            result[154]= 0xa59;
            result[155]= 0xa5c;
            result[156]= 0xa5e;
            result[157]= 0xa5e;
            result[158]= 0xa72;
            result[159]= 0xa74;
            result[160]= 0xa85;
            result[161]= 0xa8d;
            result[162]= 0xa8f;
            result[163]= 0xa91;
            result[164]= 0xa93;
            result[165]= 0xaa8;
            result[166]= 0xaaa;
            result[167]= 0xab0;
            result[168]= 0xab2;
            result[169]= 0xab3;
            result[170]= 0xab5;
            result[171]= 0xab9;
            result[172]= 0xabd;
            result[173]= 0xabd;
            result[174]= 0xad0;
            result[175]= 0xad0;
            result[176]= 0xae0;
            result[177]= 0xae1;
            result[178]= 0xaf9;
            result[179]= 0xaf9;
            result[180]= 0xb05;
            result[181]= 0xb0c;
            result[182]= 0xb0f;
            result[183]= 0xb10;
            result[184]= 0xb13;
            result[185]= 0xb28;
            result[186]= 0xb2a;
            result[187]= 0xb30;
            result[188]= 0xb32;
            result[189]= 0xb33;
            result[190]= 0xb35;
            result[191]= 0xb39;
            result[192]= 0xb3d;
            result[193]= 0xb3d;
            result[194]= 0xb5c;
            result[195]= 0xb5d;
            result[196]= 0xb5f;
            result[197]= 0xb61;
            result[198]= 0xb71;
            result[199]= 0xb71;
            result[200]= 0xb83;
            result[201]= 0xb83;
            result[202]= 0xb85;
            result[203]= 0xb8a;
            result[204]= 0xb8e;
            result[205]= 0xb90;
            result[206]= 0xb92;
            result[207]= 0xb95;
            result[208]= 0xb99;
            result[209]= 0xb9a;
            result[210]= 0xb9c;
            result[211]= 0xb9c;
            result[212]= 0xb9e;
            result[213]= 0xb9f;
            result[214]= 0xba3;
            result[215]= 0xba4;
            result[216]= 0xba8;
            result[217]= 0xbaa;
            result[218]= 0xbae;
            result[219]= 0xbb9;
            result[220]= 0xbd0;
            result[221]= 0xbd0;
            result[222]= 0xc05;
            result[223]= 0xc0c;
            result[224]= 0xc0e;
            result[225]= 0xc10;
            result[226]= 0xc12;
            result[227]= 0xc28;
            result[228]= 0xc2a;
            result[229]= 0xc39;
            result[230]= 0xc3d;
            result[231]= 0xc3d;
            result[232]= 0xc58;
            result[233]= 0xc5a;
            result[234]= 0xc60;
            result[235]= 0xc61;
            result[236]= 0xc80;
            result[237]= 0xc80;
            result[238]= 0xc85;
            result[239]= 0xc8c;
            result[240]= 0xc8e;
            result[241]= 0xc90;
            result[242]= 0xc92;
            result[243]= 0xca8;
            result[244]= 0xcaa;
            result[245]= 0xcb3;
            result[246]= 0xcb5;
            result[247]= 0xcb9;
            result[248]= 0xcbd;
            result[249]= 0xcbd;
            result[250]= 0xcde;
            result[251]= 0xcde;
            result[252]= 0xce0;
            result[253]= 0xce1;
            result[254]= 0xcf1;
            result[255]= 0xcf2;
            result[256]= 0xd04;
            result[257]= 0xd0c;
            result[258]= 0xd0e;
            result[259]= 0xd10;
            result[260]= 0xd12;
            result[261]= 0xd3a;
            result[262]= 0xd3d;
            result[263]= 0xd3d;
            result[264]= 0xd4e;
            result[265]= 0xd4e;
            result[266]= 0xd54;
            result[267]= 0xd56;
            result[268]= 0xd5f;
            result[269]= 0xd61;
            result[270]= 0xd7a;
            result[271]= 0xd7f;
            result[272]= 0xd85;
            result[273]= 0xd96;
            result[274]= 0xd9a;
            result[275]= 0xdb1;
            result[276]= 0xdb3;
            result[277]= 0xdbb;
            result[278]= 0xdbd;
            result[279]= 0xdbd;
            result[280]= 0xdc0;
            result[281]= 0xdc6;
            result[282]= 0xe01;
            result[283]= 0xe30;
            result[284]= 0xe32;
            result[285]= 0xe32;
            result[286]= 0xe40;
            result[287]= 0xe46;
            result[288]= 0xe81;
            result[289]= 0xe82;
            result[290]= 0xe84;
            result[291]= 0xe84;
            result[292]= 0xe86;
            result[293]= 0xe8a;
            result[294]= 0xe8c;
            result[295]= 0xea3;
            result[296]= 0xea5;
            result[297]= 0xea5;
            result[298]= 0xea7;
            result[299]= 0xeb0;
            result[300]= 0xeb2;
            result[301]= 0xeb2;
            result[302]= 0xebd;
            result[303]= 0xebd;
            result[304]= 0xec0;
            result[305]= 0xec4;
            result[306]= 0xec6;
            result[307]= 0xec6;
            result[308]= 0xedc;
            result[309]= 0xedf;
            result[310]= 0xf00;
            result[311]= 0xf00;
            result[312]= 0xf40;
            result[313]= 0xf47;
            result[314]= 0xf49;
            result[315]= 0xf6c;
            result[316]= 0xf88;
            result[317]= 0xf8c;
            result[318]= 0x1000;
            result[319]= 0x102a;
            result[320]= 0x103f;
            result[321]= 0x103f;
            result[322]= 0x1050;
            result[323]= 0x1055;
            result[324]= 0x105a;
            result[325]= 0x105d;
            result[326]= 0x1061;
            result[327]= 0x1061;
            result[328]= 0x1065;
            result[329]= 0x1066;
            result[330]= 0x106e;
            result[331]= 0x1070;
            result[332]= 0x1075;
            result[333]= 0x1081;
            result[334]= 0x108e;
            result[335]= 0x108e;
            result[336]= 0x10a0;
            result[337]= 0x10c5;
            result[338]= 0x10c7;
            result[339]= 0x10c7;
            result[340]= 0x10cd;
            result[341]= 0x10cd;
            result[342]= 0x10d0;
            result[343]= 0x10fa;
            result[344]= 0x10fc;
            result[345]= 0x1248;
            result[346]= 0x124a;
            result[347]= 0x124d;
            result[348]= 0x1250;
            result[349]= 0x1256;
            result[350]= 0x1258;
            result[351]= 0x1258;
            result[352]= 0x125a;
            result[353]= 0x125d;
            result[354]= 0x1260;
            result[355]= 0x1288;
            result[356]= 0x128a;
            result[357]= 0x128d;
            result[358]= 0x1290;
            result[359]= 0x12b0;
            result[360]= 0x12b2;
            result[361]= 0x12b5;
            result[362]= 0x12b8;
            result[363]= 0x12be;
            result[364]= 0x12c0;
            result[365]= 0x12c0;
            result[366]= 0x12c2;
            result[367]= 0x12c5;
            result[368]= 0x12c8;
            result[369]= 0x12d6;
            result[370]= 0x12d8;
            result[371]= 0x1310;
            result[372]= 0x1312;
            result[373]= 0x1315;
            result[374]= 0x1318;
            result[375]= 0x135a;
            result[376]= 0x1380;
            result[377]= 0x138f;
            result[378]= 0x13a0;
            result[379]= 0x13f5;
            result[380]= 0x13f8;
            result[381]= 0x13fd;
            result[382]= 0x1401;
            result[383]= 0x166c;
            result[384]= 0x166f;
            result[385]= 0x167f;
            result[386]= 0x1681;
            result[387]= 0x169a;
            result[388]= 0x16a0;
            result[389]= 0x16ea;
            result[390]= 0x16ee;
            result[391]= 0x16f8;
            result[392]= 0x1700;
            result[393]= 0x170c;
            result[394]= 0x170e;
            result[395]= 0x1711;
            result[396]= 0x1720;
            result[397]= 0x1731;
            result[398]= 0x1740;
            result[399]= 0x1751;
            result[400]= 0x1760;
            result[401]= 0x176c;
            result[402]= 0x176e;
            result[403]= 0x1770;
            result[404]= 0x1780;
            result[405]= 0x17b3;
            result[406]= 0x17d7;
            result[407]= 0x17d7;
            result[408]= 0x17dc;
            result[409]= 0x17dc;
            result[410]= 0x1820;
            result[411]= 0x1878;
            result[412]= 0x1880;
            result[413]= 0x1884;
            result[414]= 0x1887;
            result[415]= 0x18a8;
            result[416]= 0x18aa;
            result[417]= 0x18aa;
            result[418]= 0x18b0;
            result[419]= 0x18f5;
            result[420]= 0x1900;
            result[421]= 0x191e;
            result[422]= 0x1950;
            result[423]= 0x196d;
            result[424]= 0x1970;
            result[425]= 0x1974;
            result[426]= 0x1980;
            result[427]= 0x19ab;
            result[428]= 0x19b0;
            result[429]= 0x19c9;
            result[430]= 0x1a00;
            result[431]= 0x1a16;
            result[432]= 0x1a20;
            result[433]= 0x1a54;
            result[434]= 0x1aa7;
            result[435]= 0x1aa7;
            result[436]= 0x1b05;
            result[437]= 0x1b33;
            result[438]= 0x1b45;
            result[439]= 0x1b4b;
            result[440]= 0x1b83;
            result[441]= 0x1ba0;
            result[442]= 0x1bae;
            result[443]= 0x1baf;
            result[444]= 0x1bba;
            result[445]= 0x1be5;
            result[446]= 0x1c00;
            result[447]= 0x1c23;
            result[448]= 0x1c4d;
            result[449]= 0x1c4f;
            result[450]= 0x1c5a;
            result[451]= 0x1c7d;
            result[452]= 0x1c80;
            result[453]= 0x1c88;
            result[454]= 0x1c90;
            result[455]= 0x1cba;
            result[456]= 0x1cbd;
            result[457]= 0x1cbf;
            result[458]= 0x1ce9;
            result[459]= 0x1cec;
            result[460]= 0x1cee;
            result[461]= 0x1cf3;
            result[462]= 0x1cf5;
            result[463]= 0x1cf6;
            result[464]= 0x1cfa;
            result[465]= 0x1cfa;
            result[466]= 0x1d00;
            result[467]= 0x1dbf;
            result[468]= 0x1e00;
            result[469]= 0x1f15;
            result[470]= 0x1f18;
            result[471]= 0x1f1d;
            result[472]= 0x1f20;
            result[473]= 0x1f45;
            result[474]= 0x1f48;
            result[475]= 0x1f4d;
            result[476]= 0x1f50;
            result[477]= 0x1f57;
            result[478]= 0x1f59;
            result[479]= 0x1f59;
            result[480]= 0x1f5b;
            result[481]= 0x1f5b;
            result[482]= 0x1f5d;
            result[483]= 0x1f5d;
            result[484]= 0x1f5f;
            result[485]= 0x1f7d;
            result[486]= 0x1f80;
            result[487]= 0x1fb4;
            result[488]= 0x1fb6;
            result[489]= 0x1fbc;
            result[490]= 0x1fbe;
            result[491]= 0x1fbe;
            result[492]= 0x1fc2;
            result[493]= 0x1fc4;
            result[494]= 0x1fc6;
            result[495]= 0x1fcc;
            result[496]= 0x1fd0;
            result[497]= 0x1fd3;
            result[498]= 0x1fd6;
            result[499]= 0x1fdb;
            result[500]= 0x1fe0;
            result[501]= 0x1fec;
            result[502]= 0x1ff2;
            result[503]= 0x1ff4;
            result[504]= 0x1ff6;
            result[505]= 0x1ffc;
            result[506]= 0x2071;
            result[507]= 0x2071;
            result[508]= 0x207f;
            result[509]= 0x207f;
            result[510]= 0x2090;
            result[511]= 0x209c;
            result[512]= 0x2102;
            result[513]= 0x2102;
            result[514]= 0x2107;
            result[515]= 0x2107;
            result[516]= 0x210a;
            result[517]= 0x2113;
            result[518]= 0x2115;
            result[519]= 0x2115;
            result[520]= 0x2119;
            result[521]= 0x211d;
            result[522]= 0x2124;
            result[523]= 0x2124;
            result[524]= 0x2126;
            result[525]= 0x2126;
            result[526]= 0x2128;
            result[527]= 0x2128;
            result[528]= 0x212a;
            result[529]= 0x212d;
            result[530]= 0x212f;
            result[531]= 0x2139;
            result[532]= 0x213c;
            result[533]= 0x213f;
            result[534]= 0x2145;
            result[535]= 0x2149;
            result[536]= 0x214e;
            result[537]= 0x214e;
            result[538]= 0x2160;
            result[539]= 0x2188;
            result[540]= 0x2c00;
            result[541]= 0x2c2e;
            result[542]= 0x2c30;
            result[543]= 0x2c5e;
            result[544]= 0x2c60;
            result[545]= 0x2ce4;
            result[546]= 0x2ceb;
            result[547]= 0x2cee;
            result[548]= 0x2cf2;
            result[549]= 0x2cf3;
            result[550]= 0x2d00;
            result[551]= 0x2d25;
            result[552]= 0x2d27;
            result[553]= 0x2d27;
            result[554]= 0x2d2d;
            result[555]= 0x2d2d;
            result[556]= 0x2d30;
            result[557]= 0x2d67;
            result[558]= 0x2d6f;
            result[559]= 0x2d6f;
            result[560]= 0x2d80;
            result[561]= 0x2d96;
            result[562]= 0x2da0;
            result[563]= 0x2da6;
            result[564]= 0x2da8;
            result[565]= 0x2dae;
            result[566]= 0x2db0;
            result[567]= 0x2db6;
            result[568]= 0x2db8;
            result[569]= 0x2dbe;
            result[570]= 0x2dc0;
            result[571]= 0x2dc6;
            result[572]= 0x2dc8;
            result[573]= 0x2dce;
            result[574]= 0x2dd0;
            result[575]= 0x2dd6;
            result[576]= 0x2dd8;
            result[577]= 0x2dde;
            result[578]= 0x2e2f;
            result[579]= 0x2e2f;
            result[580]= 0x3005;
            result[581]= 0x3007;
            result[582]= 0x3021;
            result[583]= 0x3029;
            result[584]= 0x3031;
            result[585]= 0x3035;
            result[586]= 0x3038;
            result[587]= 0x303c;
            result[588]= 0x3041;
            result[589]= 0x3096;
            result[590]= 0x309d;
            result[591]= 0x309f;
            result[592]= 0x30a1;
            result[593]= 0x30fa;
            result[594]= 0x30fc;
            result[595]= 0x30ff;
            result[596]= 0x3105;
            result[597]= 0x312f;
            result[598]= 0x3131;
            result[599]= 0x318e;
            result[600]= 0x31a0;
            result[601]= 0x31bf;
            result[602]= 0x31f0;
            result[603]= 0x31ff;
            result[604]= 0x3400;
            result[605]= 0x4dbf;
            result[606]= 0x4e00;
            result[607]= 0x9ffc;
            result[608]= 0xa000;
            result[609]= 0xa48c;
            result[610]= 0xa4d0;
            result[611]= 0xa4fd;
            result[612]= 0xa500;
            result[613]= 0xa60c;
            result[614]= 0xa610;
            result[615]= 0xa61f;
            result[616]= 0xa62a;
            result[617]= 0xa62b;
            result[618]= 0xa640;
            result[619]= 0xa66e;
            result[620]= 0xa67f;
            result[621]= 0xa69d;
            result[622]= 0xa6a0;
            result[623]= 0xa6ef;
            result[624]= 0xa717;
            result[625]= 0xa71f;
            result[626]= 0xa722;
            result[627]= 0xa788;
            result[628]= 0xa78b;
            result[629]= 0xa7bf;
            result[630]= 0xa7c2;
            result[631]= 0xa7ca;
            result[632]= 0xa7f5;
            result[633]= 0xa801;
            result[634]= 0xa803;
            result[635]= 0xa805;
            result[636]= 0xa807;
            result[637]= 0xa80a;
            result[638]= 0xa80c;
            result[639]= 0xa822;
            result[640]= 0xa840;
            result[641]= 0xa873;
            result[642]= 0xa882;
            result[643]= 0xa8b3;
            result[644]= 0xa8f2;
            result[645]= 0xa8f7;
            result[646]= 0xa8fb;
            result[647]= 0xa8fb;
            result[648]= 0xa8fd;
            result[649]= 0xa8fe;
            result[650]= 0xa90a;
            result[651]= 0xa925;
            result[652]= 0xa930;
            result[653]= 0xa946;
            result[654]= 0xa960;
            result[655]= 0xa97c;
            result[656]= 0xa984;
            result[657]= 0xa9b2;
            result[658]= 0xa9cf;
            result[659]= 0xa9cf;
            result[660]= 0xa9e0;
            result[661]= 0xa9e4;
            result[662]= 0xa9e6;
            result[663]= 0xa9ef;
            result[664]= 0xa9fa;
            result[665]= 0xa9fe;
            result[666]= 0xaa00;
            result[667]= 0xaa28;
            result[668]= 0xaa40;
            result[669]= 0xaa42;
            result[670]= 0xaa44;
            result[671]= 0xaa4b;
            result[672]= 0xaa60;
            result[673]= 0xaa76;
            result[674]= 0xaa7a;
            result[675]= 0xaa7a;
            result[676]= 0xaa7e;
            result[677]= 0xaaaf;
            result[678]= 0xaab1;
            result[679]= 0xaab1;
            result[680]= 0xaab5;
            result[681]= 0xaab6;
            result[682]= 0xaab9;
            result[683]= 0xaabd;
            result[684]= 0xaac0;
            result[685]= 0xaac0;
            result[686]= 0xaac2;
            result[687]= 0xaac2;
            result[688]= 0xaadb;
            result[689]= 0xaadd;
            result[690]= 0xaae0;
            result[691]= 0xaaea;
            result[692]= 0xaaf2;
            result[693]= 0xaaf4;
            result[694]= 0xab01;
            result[695]= 0xab06;
            result[696]= 0xab09;
            result[697]= 0xab0e;
            result[698]= 0xab11;
            result[699]= 0xab16;
            result[700]= 0xab20;
            result[701]= 0xab26;
            result[702]= 0xab28;
            result[703]= 0xab2e;
            result[704]= 0xab30;
            result[705]= 0xab5a;
            result[706]= 0xab5c;
            result[707]= 0xab69;
            result[708]= 0xab70;
            result[709]= 0xabe2;
            result[710]= 0xac00;
            result[711]= 0xd7a3;
            result[712]= 0xd7b0;
            result[713]= 0xd7c6;
            result[714]= 0xd7cb;
            result[715]= 0xd7fb;
            result[716]= 0xf900;
            result[717]= 0xfa6d;
            result[718]= 0xfa70;
            result[719]= 0xfad9;
            result[720]= 0xfb00;
            result[721]= 0xfb06;
            result[722]= 0xfb13;
            result[723]= 0xfb17;
            result[724]= 0xfb1d;
            result[725]= 0xfb1d;
            result[726]= 0xfb1f;
            result[727]= 0xfb28;
            result[728]= 0xfb2a;
            result[729]= 0xfb36;
            result[730]= 0xfb38;
            result[731]= 0xfb3c;
            result[732]= 0xfb3e;
            result[733]= 0xfb3e;
            result[734]= 0xfb40;
            result[735]= 0xfb41;
            result[736]= 0xfb43;
            result[737]= 0xfb44;
            result[738]= 0xfb46;
            result[739]= 0xfbb1;
            result[740]= 0xfbd3;
            result[741]= 0xfc5d;
            result[742]= 0xfc64;
            result[743]= 0xfd3d;
            result[744]= 0xfd50;
            result[745]= 0xfd8f;
            result[746]= 0xfd92;
            result[747]= 0xfdc7;
            result[748]= 0xfdf0;
            result[749]= 0xfdf9;
            result[750]= 0xfe71;
            result[751]= 0xfe71;
            result[752]= 0xfe73;
            result[753]= 0xfe73;
            result[754]= 0xfe77;
            result[755]= 0xfe77;
            result[756]= 0xfe79;
            result[757]= 0xfe79;
            result[758]= 0xfe7b;
            result[759]= 0xfe7b;
            result[760]= 0xfe7d;
            result[761]= 0xfe7d;
            result[762]= 0xfe7f;
            result[763]= 0xfefc;
            result[764]= 0xff21;
            result[765]= 0xff3a;
            result[766]= 0xff41;
            result[767]= 0xff5a;
            result[768]= 0xff66;
            result[769]= 0xff9d;
            result[770]= 0xffa0;
            result[771]= 0xffbe;
            result[772]= 0xffc2;
            result[773]= 0xffc7;
            result[774]= 0xffca;
            result[775]= 0xffcf;
            result[776]= 0xffd2;
            result[777]= 0xffd7;
            result[778]= 0xffda;
            result[779]= 0xffdc;
            result[780]= 0x10000;
            result[781]= 0x1000b;
            result[782]= 0x1000d;
            result[783]= 0x10026;
            result[784]= 0x10028;
            result[785]= 0x1003a;
            result[786]= 0x1003c;
            result[787]= 0x1003d;
            result[788]= 0x1003f;
            result[789]= 0x1004d;
            result[790]= 0x10050;
            result[791]= 0x1005d;
            result[792]= 0x10080;
            result[793]= 0x100fa;
            result[794]= 0x10140;
            result[795]= 0x10174;
            result[796]= 0x10280;
            result[797]= 0x1029c;
            result[798]= 0x102a0;
            result[799]= 0x102d0;
            result[800]= 0x10300;
            result[801]= 0x1031f;
            result[802]= 0x1032d;
            result[803]= 0x1034a;
            result[804]= 0x10350;
            result[805]= 0x10375;
            result[806]= 0x10380;
            result[807]= 0x1039d;
            result[808]= 0x103a0;
            result[809]= 0x103c3;
            result[810]= 0x103c8;
            result[811]= 0x103cf;
            result[812]= 0x103d1;
            result[813]= 0x103d5;
            result[814]= 0x10400;
            result[815]= 0x1049d;
            result[816]= 0x104b0;
            result[817]= 0x104d3;
            result[818]= 0x104d8;
            result[819]= 0x104fb;
            result[820]= 0x10500;
            result[821]= 0x10527;
            result[822]= 0x10530;
            result[823]= 0x10563;
            result[824]= 0x10600;
            result[825]= 0x10736;
            result[826]= 0x10740;
            result[827]= 0x10755;
            result[828]= 0x10760;
            result[829]= 0x10767;
            result[830]= 0x10800;
            result[831]= 0x10805;
            result[832]= 0x10808;
            result[833]= 0x10808;
            result[834]= 0x1080a;
            result[835]= 0x10835;
            result[836]= 0x10837;
            result[837]= 0x10838;
            result[838]= 0x1083c;
            result[839]= 0x1083c;
            result[840]= 0x1083f;
            result[841]= 0x10855;
            result[842]= 0x10860;
            result[843]= 0x10876;
            result[844]= 0x10880;
            result[845]= 0x1089e;
            result[846]= 0x108e0;
            result[847]= 0x108f2;
            result[848]= 0x108f4;
            result[849]= 0x108f5;
            result[850]= 0x10900;
            result[851]= 0x10915;
            result[852]= 0x10920;
            result[853]= 0x10939;
            result[854]= 0x10980;
            result[855]= 0x109b7;
            result[856]= 0x109be;
            result[857]= 0x109bf;
            result[858]= 0x10a00;
            result[859]= 0x10a00;
            result[860]= 0x10a10;
            result[861]= 0x10a13;
            result[862]= 0x10a15;
            result[863]= 0x10a17;
            result[864]= 0x10a19;
            result[865]= 0x10a35;
            result[866]= 0x10a60;
            result[867]= 0x10a7c;
            result[868]= 0x10a80;
            result[869]= 0x10a9c;
            result[870]= 0x10ac0;
            result[871]= 0x10ac7;
            result[872]= 0x10ac9;
            result[873]= 0x10ae4;
            result[874]= 0x10b00;
            result[875]= 0x10b35;
            result[876]= 0x10b40;
            result[877]= 0x10b55;
            result[878]= 0x10b60;
            result[879]= 0x10b72;
            result[880]= 0x10b80;
            result[881]= 0x10b91;
            result[882]= 0x10c00;
            result[883]= 0x10c48;
            result[884]= 0x10c80;
            result[885]= 0x10cb2;
            result[886]= 0x10cc0;
            result[887]= 0x10cf2;
            result[888]= 0x10d00;
            result[889]= 0x10d23;
            result[890]= 0x10e80;
            result[891]= 0x10ea9;
            result[892]= 0x10eb0;
            result[893]= 0x10eb1;
            result[894]= 0x10f00;
            result[895]= 0x10f1c;
            result[896]= 0x10f27;
            result[897]= 0x10f27;
            result[898]= 0x10f30;
            result[899]= 0x10f45;
            result[900]= 0x10fb0;
            result[901]= 0x10fc4;
            result[902]= 0x10fe0;
            result[903]= 0x10ff6;
            result[904]= 0x11003;
            result[905]= 0x11037;
            result[906]= 0x11083;
            result[907]= 0x110af;
            result[908]= 0x110d0;
            result[909]= 0x110e8;
            result[910]= 0x11103;
            result[911]= 0x11126;
            result[912]= 0x11144;
            result[913]= 0x11144;
            result[914]= 0x11147;
            result[915]= 0x11147;
            result[916]= 0x11150;
            result[917]= 0x11172;
            result[918]= 0x11176;
            result[919]= 0x11176;
            result[920]= 0x11183;
            result[921]= 0x111b2;
            result[922]= 0x111c1;
            result[923]= 0x111c4;
            result[924]= 0x111da;
            result[925]= 0x111da;
            result[926]= 0x111dc;
            result[927]= 0x111dc;
            result[928]= 0x11200;
            result[929]= 0x11211;
            result[930]= 0x11213;
            result[931]= 0x1122b;
            result[932]= 0x11280;
            result[933]= 0x11286;
            result[934]= 0x11288;
            result[935]= 0x11288;
            result[936]= 0x1128a;
            result[937]= 0x1128d;
            result[938]= 0x1128f;
            result[939]= 0x1129d;
            result[940]= 0x1129f;
            result[941]= 0x112a8;
            result[942]= 0x112b0;
            result[943]= 0x112de;
            result[944]= 0x11305;
            result[945]= 0x1130c;
            result[946]= 0x1130f;
            result[947]= 0x11310;
            result[948]= 0x11313;
            result[949]= 0x11328;
            result[950]= 0x1132a;
            result[951]= 0x11330;
            result[952]= 0x11332;
            result[953]= 0x11333;
            result[954]= 0x11335;
            result[955]= 0x11339;
            result[956]= 0x1133d;
            result[957]= 0x1133d;
            result[958]= 0x11350;
            result[959]= 0x11350;
            result[960]= 0x1135d;
            result[961]= 0x11361;
            result[962]= 0x11400;
            result[963]= 0x11434;
            result[964]= 0x11447;
            result[965]= 0x1144a;
            result[966]= 0x1145f;
            result[967]= 0x11461;
            result[968]= 0x11480;
            result[969]= 0x114af;
            result[970]= 0x114c4;
            result[971]= 0x114c5;
            result[972]= 0x114c7;
            result[973]= 0x114c7;
            result[974]= 0x11580;
            result[975]= 0x115ae;
            result[976]= 0x115d8;
            result[977]= 0x115db;
            result[978]= 0x11600;
            result[979]= 0x1162f;
            result[980]= 0x11644;
            result[981]= 0x11644;
            result[982]= 0x11680;
            result[983]= 0x116aa;
            result[984]= 0x116b8;
            result[985]= 0x116b8;
            result[986]= 0x11700;
            result[987]= 0x1171a;
            result[988]= 0x11800;
            result[989]= 0x1182b;
            result[990]= 0x118a0;
            result[991]= 0x118df;
            result[992]= 0x118ff;
            result[993]= 0x11906;
            result[994]= 0x11909;
            result[995]= 0x11909;
            result[996]= 0x1190c;
            result[997]= 0x11913;
            result[998]= 0x11915;
            result[999]= 0x11916;
            result[1000]= 0x11918;
            result[1001]= 0x1192f;
            result[1002]= 0x1193f;
            result[1003]= 0x1193f;
            result[1004]= 0x11941;
            result[1005]= 0x11941;
            result[1006]= 0x119a0;
            result[1007]= 0x119a7;
            result[1008]= 0x119aa;
            result[1009]= 0x119d0;
            result[1010]= 0x119e1;
            result[1011]= 0x119e1;
            result[1012]= 0x119e3;
            result[1013]= 0x119e3;
            result[1014]= 0x11a00;
            result[1015]= 0x11a00;
            result[1016]= 0x11a0b;
            result[1017]= 0x11a32;
            result[1018]= 0x11a3a;
            result[1019]= 0x11a3a;
            result[1020]= 0x11a50;
            result[1021]= 0x11a50;
            result[1022]= 0x11a5c;
            result[1023]= 0x11a89;
            result[1024]= 0x11a9d;
            result[1025]= 0x11a9d;
            result[1026]= 0x11ac0;
            result[1027]= 0x11af8;
            result[1028]= 0x11c00;
            result[1029]= 0x11c08;
            result[1030]= 0x11c0a;
            result[1031]= 0x11c2e;
            result[1032]= 0x11c40;
            result[1033]= 0x11c40;
            result[1034]= 0x11c72;
            result[1035]= 0x11c8f;
            result[1036]= 0x11d00;
            result[1037]= 0x11d06;
            result[1038]= 0x11d08;
            result[1039]= 0x11d09;
            result[1040]= 0x11d0b;
            result[1041]= 0x11d30;
            result[1042]= 0x11d46;
            result[1043]= 0x11d46;
            result[1044]= 0x11d60;
            result[1045]= 0x11d65;
            result[1046]= 0x11d67;
            result[1047]= 0x11d68;
            result[1048]= 0x11d6a;
            result[1049]= 0x11d89;
            result[1050]= 0x11d98;
            result[1051]= 0x11d98;
            result[1052]= 0x11ee0;
            result[1053]= 0x11ef2;
            result[1054]= 0x11fb0;
            result[1055]= 0x11fb0;
            result[1056]= 0x12000;
            result[1057]= 0x12399;
            result[1058]= 0x12400;
            result[1059]= 0x1246e;
            result[1060]= 0x12480;
            result[1061]= 0x12543;
            result[1062]= 0x13000;
            result[1063]= 0x1342e;
            result[1064]= 0x14400;
            result[1065]= 0x14646;
            result[1066]= 0x16800;
            result[1067]= 0x16a38;
            result[1068]= 0x16a40;
            result[1069]= 0x16a5e;
            result[1070]= 0x16ad0;
            result[1071]= 0x16aed;
            result[1072]= 0x16b00;
            result[1073]= 0x16b2f;
            result[1074]= 0x16b40;
            result[1075]= 0x16b43;
            result[1076]= 0x16b63;
            result[1077]= 0x16b77;
            result[1078]= 0x16b7d;
            result[1079]= 0x16b8f;
            result[1080]= 0x16e40;
            result[1081]= 0x16e7f;
            result[1082]= 0x16f00;
            result[1083]= 0x16f4a;
            result[1084]= 0x16f50;
            result[1085]= 0x16f50;
            result[1086]= 0x16f93;
            result[1087]= 0x16f9f;
            result[1088]= 0x16fe0;
            result[1089]= 0x16fe1;
            result[1090]= 0x16fe3;
            result[1091]= 0x16fe3;
            result[1092]= 0x17000;
            result[1093]= 0x187f7;
            result[1094]= 0x18800;
            result[1095]= 0x18cd5;
            result[1096]= 0x18d00;
            result[1097]= 0x18d08;
            result[1098]= 0x1b000;
            result[1099]= 0x1b11e;
            result[1100]= 0x1b150;
            result[1101]= 0x1b152;
            result[1102]= 0x1b164;
            result[1103]= 0x1b167;
            result[1104]= 0x1b170;
            result[1105]= 0x1b2fb;
            result[1106]= 0x1bc00;
            result[1107]= 0x1bc6a;
            result[1108]= 0x1bc70;
            result[1109]= 0x1bc7c;
            result[1110]= 0x1bc80;
            result[1111]= 0x1bc88;
            result[1112]= 0x1bc90;
            result[1113]= 0x1bc99;
            result[1114]= 0x1d400;
            result[1115]= 0x1d454;
            result[1116]= 0x1d456;
            result[1117]= 0x1d49c;
            result[1118]= 0x1d49e;
            result[1119]= 0x1d49f;
            result[1120]= 0x1d4a2;
            result[1121]= 0x1d4a2;
            result[1122]= 0x1d4a5;
            result[1123]= 0x1d4a6;
            result[1124]= 0x1d4a9;
            result[1125]= 0x1d4ac;
            result[1126]= 0x1d4ae;
            result[1127]= 0x1d4b9;
            result[1128]= 0x1d4bb;
            result[1129]= 0x1d4bb;
            result[1130]= 0x1d4bd;
            result[1131]= 0x1d4c3;
            result[1132]= 0x1d4c5;
            result[1133]= 0x1d505;
            result[1134]= 0x1d507;
            result[1135]= 0x1d50a;
            result[1136]= 0x1d50d;
            result[1137]= 0x1d514;
            result[1138]= 0x1d516;
            result[1139]= 0x1d51c;
            result[1140]= 0x1d51e;
            result[1141]= 0x1d539;
            result[1142]= 0x1d53b;
            result[1143]= 0x1d53e;
            result[1144]= 0x1d540;
            result[1145]= 0x1d544;
            result[1146]= 0x1d546;
            result[1147]= 0x1d546;
            result[1148]= 0x1d54a;
            result[1149]= 0x1d550;
            result[1150]= 0x1d552;
            result[1151]= 0x1d6a5;
            result[1152]= 0x1d6a8;
            result[1153]= 0x1d6c0;
            result[1154]= 0x1d6c2;
            result[1155]= 0x1d6da;
            result[1156]= 0x1d6dc;
            result[1157]= 0x1d6fa;
            result[1158]= 0x1d6fc;
            result[1159]= 0x1d714;
            result[1160]= 0x1d716;
            result[1161]= 0x1d734;
            result[1162]= 0x1d736;
            result[1163]= 0x1d74e;
            result[1164]= 0x1d750;
            result[1165]= 0x1d76e;
            result[1166]= 0x1d770;
            result[1167]= 0x1d788;
            result[1168]= 0x1d78a;
            result[1169]= 0x1d7a8;
            result[1170]= 0x1d7aa;
            result[1171]= 0x1d7c2;
            result[1172]= 0x1d7c4;
            result[1173]= 0x1d7cb;
            result[1174]= 0x1e100;
            result[1175]= 0x1e12c;
            result[1176]= 0x1e137;
            result[1177]= 0x1e13d;
            result[1178]= 0x1e14e;
            result[1179]= 0x1e14e;
            result[1180]= 0x1e2c0;
            result[1181]= 0x1e2eb;
            result[1182]= 0x1e800;
            result[1183]= 0x1e8c4;
            result[1184]= 0x1e900;
            result[1185]= 0x1e943;
            result[1186]= 0x1e94b;
            result[1187]= 0x1e94b;
            result[1188]= 0x1ee00;
            result[1189]= 0x1ee03;
            result[1190]= 0x1ee05;
            result[1191]= 0x1ee1f;
            result[1192]= 0x1ee21;
            result[1193]= 0x1ee22;
            result[1194]= 0x1ee24;
            result[1195]= 0x1ee24;
            result[1196]= 0x1ee27;
            result[1197]= 0x1ee27;
            result[1198]= 0x1ee29;
            result[1199]= 0x1ee32;
            result[1200]= 0x1ee34;
            result[1201]= 0x1ee37;
            result[1202]= 0x1ee39;
            result[1203]= 0x1ee39;
            result[1204]= 0x1ee3b;
            result[1205]= 0x1ee3b;
            result[1206]= 0x1ee42;
            result[1207]= 0x1ee42;
            result[1208]= 0x1ee47;
            result[1209]= 0x1ee47;
            result[1210]= 0x1ee49;
            result[1211]= 0x1ee49;
            result[1212]= 0x1ee4b;
            result[1213]= 0x1ee4b;
            result[1214]= 0x1ee4d;
            result[1215]= 0x1ee4f;
            result[1216]= 0x1ee51;
            result[1217]= 0x1ee52;
            result[1218]= 0x1ee54;
            result[1219]= 0x1ee54;
            result[1220]= 0x1ee57;
            result[1221]= 0x1ee57;
            result[1222]= 0x1ee59;
            result[1223]= 0x1ee59;
            result[1224]= 0x1ee5b;
            result[1225]= 0x1ee5b;
            result[1226]= 0x1ee5d;
            result[1227]= 0x1ee5d;
            result[1228]= 0x1ee5f;
            result[1229]= 0x1ee5f;
            result[1230]= 0x1ee61;
            result[1231]= 0x1ee62;
            result[1232]= 0x1ee64;
            result[1233]= 0x1ee64;
            result[1234]= 0x1ee67;
            result[1235]= 0x1ee6a;
            result[1236]= 0x1ee6c;
            result[1237]= 0x1ee72;
            result[1238]= 0x1ee74;
            result[1239]= 0x1ee77;
            result[1240]= 0x1ee79;
            result[1241]= 0x1ee7c;
            result[1242]= 0x1ee7e;
            result[1243]= 0x1ee7e;
            result[1244]= 0x1ee80;
            result[1245]= 0x1ee89;
            result[1246]= 0x1ee8b;
            result[1247]= 0x1ee9b;
            result[1248]= 0x1eea1;
            result[1249]= 0x1eea3;
            result[1250]= 0x1eea5;
            result[1251]= 0x1eea9;
            result[1252]= 0x1eeab;
            result[1253]= 0x1eebb;
            result[1254]= 0x20000;
            result[1255]= 0x2a6dd;
            result[1256]= 0x2a700;
            result[1257]= 0x2b734;
            result[1258]= 0x2b740;
            result[1259]= 0x2b81d;
            result[1260]= 0x2b820;
            result[1261]= 0x2cea1;
            result[1262]= 0x2ceb0;
            result[1263]= 0x2ebe0;
            result[1264]= 0x2f800;
            result[1265]= 0x2fa1d;
            result[1266]= 0x30000;
            result[1267]= 0x3134a;
            return result;
        }

        static TokenType NFA_PYTHON_276(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (((ch>='A'&&ch<='Z')||((ch== '_')||(ch>='a'&&ch<='z')))||(ch>=128&&checkIntervals(NFA_MOVES_PYTHON_276, ch))) {
                nextStates.set(371);
                if (validTypes.contains(NAME)) return NAME;
            }
            return null;
        }

        static TokenType NFA_PYTHON_277(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '|') {
                if (validTypes.contains(BIT_OR)) return BIT_OR;
            }
            return null;
        }

        static TokenType NFA_PYTHON_278(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'y') {
                if (validTypes.contains(TRY)) return TRY;
            }
            return null;
        }

        static TokenType NFA_PYTHON_279(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '<') {
                nextStates.set(186);
            }
            return null;
        }

        static TokenType NFA_PYTHON_280(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_281(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(107);
            }
            return null;
        }

        static TokenType NFA_PYTHON_282(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(ANDASSIGN)) return ANDASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_283(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_284(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_285(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                if (validTypes.contains(EXCEPT)) return EXCEPT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_286(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0') {
                nextStates.set(252);
            }
            return null;
        }

        static TokenType NFA_PYTHON_287(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(404);
            }
            return null;
        }

        static TokenType NFA_PYTHON_288(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(283);
            }
            return null;
        }

        static TokenType NFA_PYTHON_289(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'h') {
                if (validTypes.contains(MATCH)) return MATCH;
            }
            return null;
        }

        static TokenType NFA_PYTHON_290(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '+') {
                nextStates.set(231);
            }
            return null;
        }

        static TokenType NFA_PYTHON_291(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                nextStates.set(298);
            }
            return null;
        }

        static TokenType NFA_PYTHON_292(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(95);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_293(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(156);
            }
            return null;
        }

        static TokenType NFA_PYTHON_294(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(106);
            }
            return null;
        }

        static TokenType NFA_PYTHON_295(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(51);
            }
            return null;
        }

        static TokenType NFA_PYTHON_296(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_297(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(175);
            }
            return null;
        }

        static TokenType NFA_PYTHON_298(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'c') {
                nextStates.set(289);
            }
            return null;
        }

        static TokenType NFA_PYTHON_299(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(72);
            }
            return null;
        }

        static TokenType NFA_PYTHON_300(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(259);
            }
            return null;
        }

        static TokenType NFA_PYTHON_301(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_302(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(TRUE)) return TRUE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_303(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(357);
            }
            return null;
        }

        static TokenType NFA_PYTHON_304(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(227);
            }
            return null;
        }

        static TokenType NFA_PYTHON_305(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '{') {
                if (validTypes.contains(LBRACE)) return LBRACE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_306(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                nextStates.set(179);
            }
            return null;
        }

        static TokenType NFA_PYTHON_307(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '*') {
                if (validTypes.contains(STAR_STAR)) return STAR_STAR;
            }
            return null;
        }

        static TokenType NFA_PYTHON_308(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(187);
            }
            return null;
        }

        static TokenType NFA_PYTHON_309(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '>') {
                if (validTypes.contains(RSHIFT)) return RSHIFT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_310(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_311(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(336);
            }
            return null;
        }

        static TokenType NFA_PYTHON_312(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_313(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(379);
            }
            return null;
        }

        static TokenType NFA_PYTHON_314(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'p') {
                nextStates.set(351);
            }
            return null;
        }

        static TokenType NFA_PYTHON_315(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'd') {
                nextStates.set(234);
            }
            return null;
        }

        static TokenType NFA_PYTHON_316(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_317(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '>') {
                nextStates.set(385);
            }
            return null;
        }

        static TokenType NFA_PYTHON_318(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'd') {
                nextStates.set(365);
            }
            return null;
        }

        static TokenType NFA_PYTHON_319(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '@') {
                nextStates.set(150);
            }
            return null;
        }

        static TokenType NFA_PYTHON_320(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_321(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(63);
            }
            return null;
        }

        static TokenType NFA_PYTHON_322(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(NONE)) return NONE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_323(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'y') {
                nextStates.set(184);
            }
            return null;
        }

        static TokenType NFA_PYTHON_324(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(254);
            }
            return null;
        }

        static TokenType NFA_PYTHON_325(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_326(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\n') {
                if (validTypes.contains(CONTINUE_LINE)) return CONTINUE_LINE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_327(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '/') {
                nextStates.set(101);
            }
            return null;
        }

        static TokenType NFA_PYTHON_328(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(454);
            }
            return null;
        }

        static TokenType NFA_PYTHON_329(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_330(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(78);
            }
            return null;
        }

        static TokenType NFA_PYTHON_331(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_332(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'c') {
                nextStates.set(200);
            }
            return null;
        }

        static TokenType NFA_PYTHON_333(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(429);
            }
            return null;
        }

        static TokenType NFA_PYTHON_334(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(324);
            }
            return null;
        }

        static TokenType NFA_PYTHON_335(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                nextStates.set(141);
            }
            return null;
        }

        static TokenType NFA_PYTHON_336(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(323);
            }
            return null;
        }

        static TokenType NFA_PYTHON_337(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '/') {
                if (validTypes.contains(_TOKEN_100)) return _TOKEN_100;
            }
            return null;
        }

        static TokenType NFA_PYTHON_338(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'c') {
                nextStates.set(281);
            }
            return null;
        }

        static TokenType NFA_PYTHON_339(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '^') {
                if (validTypes.contains(XOR)) return XOR;
            }
            return null;
        }

        static TokenType NFA_PYTHON_340(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(49);
            }
            return null;
        }

        static TokenType NFA_PYTHON_341(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_342(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='Z')||((ch== '_')||((ch>='a'&&ch<='z')||(ch>=0x80&&ch<=0xffff))))) {
                nextStates.set(342);
                if (validTypes.contains(BADNAME)) return BADNAME;
            }
            return null;
        }

        static TokenType NFA_PYTHON_343(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(XORASSIGN)) return XORASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_344(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(WHILE)) return WHILE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_345(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '/') {
                nextStates.set(337);
            }
            return null;
        }

        static TokenType NFA_PYTHON_346(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(NE)) return NE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_347(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '>') {
                nextStates.set(309);
            }
            return null;
        }

        static TokenType NFA_PYTHON_348(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_349(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(406);
            }
            return null;
        }

        static TokenType NFA_PYTHON_350(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '>') {
                nextStates.set(361);
            }
            return null;
        }

        static TokenType NFA_PYTHON_351(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(205);
            }
            return null;
        }

        static TokenType NFA_PYTHON_352(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(246);
            }
            return null;
        }

        static TokenType NFA_PYTHON_353(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'p') {
                nextStates.set(273);
            }
            return null;
        }

        static TokenType NFA_PYTHON_354(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '-') {
                nextStates.set(196);
            }
            return null;
        }

        static TokenType NFA_PYTHON_355(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(260);
            }
            return null;
        }

        static TokenType NFA_PYTHON_356(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '<') {
                nextStates.set(279);
            }
            return null;
        }

        static TokenType NFA_PYTHON_357(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'x') {
                nextStates.set(152);
            }
            return null;
        }

        static TokenType NFA_PYTHON_358(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0) {
                nextStates.set(33);
            }
            return null;
        }

        static TokenType NFA_PYTHON_359(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                if (validTypes.contains(RETURN)) return RETURN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_360(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '*') {
                if (validTypes.contains(STAR)) return STAR;
            }
            return null;
        }

        static TokenType NFA_PYTHON_361(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '>') {
                nextStates.set(257);
            }
            return null;
        }

        static TokenType NFA_PYTHON_362(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ']') {
                if (validTypes.contains(RBRACKET)) return RBRACKET;
            }
            return null;
        }

        static TokenType NFA_PYTHON_363(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_364(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(263);
            }
            return null;
        }

        static TokenType NFA_PYTHON_365(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                if (validTypes.contains(LAMBDA)) return LAMBDA;
            }
            return null;
        }

        static TokenType NFA_PYTHON_366(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(142);
            }
            return null;
        }

        static TokenType NFA_PYTHON_367(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                if (validTypes.contains(IF)) return IF;
            }
            return null;
        }

        static TokenType NFA_PYTHON_368(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(389);
            }
            return null;
        }

        static TokenType NFA_PYTHON_369(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0) {
                nextStates.set(79);
            }
            return null;
        }

        static TokenType NFA_PYTHON_370(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(297);
            }
            return null;
        }

        static private int[] NFA_MOVES_PYTHON_371= NFA_MOVES_PYTHON_371_init();
        static private int[] NFA_MOVES_PYTHON_371_init() {
            int[] result= new int[1478];
            result[0]= '0';
            result[1]= '9';
            result[2]= 'A';
            result[3]= 'Z';
            result[4]= '_';
            result[5]= '_';
            result[6]= 'a';
            result[7]= 'z';
            result[8]= 0xaa;
            result[9]= 0xaa;
            result[10]= 0xb5;
            result[11]= 0xb5;
            result[12]= 0xba;
            result[13]= 0xba;
            result[14]= 0xc0;
            result[15]= 0xd6;
            result[16]= 0xd8;
            result[17]= 0xf6;
            result[18]= 0xf8;
            result[19]= 0x13e;
            result[20]= 0x141;
            result[21]= 0x2c1;
            result[22]= 0x2c6;
            result[23]= 0x2d1;
            result[24]= 0x2e0;
            result[25]= 0x2e4;
            result[26]= 0x2ec;
            result[27]= 0x2ec;
            result[28]= 0x2ee;
            result[29]= 0x2ee;
            result[30]= 0x300;
            result[31]= 0x374;
            result[32]= 0x376;
            result[33]= 0x377;
            result[34]= 0x37b;
            result[35]= 0x37d;
            result[36]= 0x37f;
            result[37]= 0x37f;
            result[38]= 0x386;
            result[39]= 0x386;
            result[40]= 0x388;
            result[41]= 0x38a;
            result[42]= 0x38c;
            result[43]= 0x38c;
            result[44]= 0x38e;
            result[45]= 0x3a1;
            result[46]= 0x3a3;
            result[47]= 0x3f5;
            result[48]= 0x3f7;
            result[49]= 0x481;
            result[50]= 0x483;
            result[51]= 0x487;
            result[52]= 0x48a;
            result[53]= 0x52f;
            result[54]= 0x531;
            result[55]= 0x556;
            result[56]= 0x559;
            result[57]= 0x559;
            result[58]= 0x560;
            result[59]= 0x588;
            result[60]= 0x591;
            result[61]= 0x5bd;
            result[62]= 0x5bf;
            result[63]= 0x5bf;
            result[64]= 0x5c1;
            result[65]= 0x5c2;
            result[66]= 0x5c4;
            result[67]= 0x5c5;
            result[68]= 0x5c7;
            result[69]= 0x5c7;
            result[70]= 0x5d0;
            result[71]= 0x5ea;
            result[72]= 0x5ef;
            result[73]= 0x5f2;
            result[74]= 0x610;
            result[75]= 0x61a;
            result[76]= 0x620;
            result[77]= 0x669;
            result[78]= 0x66e;
            result[79]= 0x6d3;
            result[80]= 0x6d5;
            result[81]= 0x6dc;
            result[82]= 0x6df;
            result[83]= 0x6e8;
            result[84]= 0x6ea;
            result[85]= 0x6fc;
            result[86]= 0x6ff;
            result[87]= 0x6ff;
            result[88]= 0x710;
            result[89]= 0x74a;
            result[90]= 0x74d;
            result[91]= 0x7b1;
            result[92]= 0x7c0;
            result[93]= 0x7f5;
            result[94]= 0x7fa;
            result[95]= 0x7fa;
            result[96]= 0x7fd;
            result[97]= 0x7fd;
            result[98]= 0x800;
            result[99]= 0x82d;
            result[100]= 0x840;
            result[101]= 0x85b;
            result[102]= 0x860;
            result[103]= 0x86a;
            result[104]= 0x8a0;
            result[105]= 0x8b4;
            result[106]= 0x8b6;
            result[107]= 0x8c7;
            result[108]= 0x8d3;
            result[109]= 0x8e1;
            result[110]= 0x8e3;
            result[111]= 0x963;
            result[112]= 0x966;
            result[113]= 0x96f;
            result[114]= 0x971;
            result[115]= 0x983;
            result[116]= 0x985;
            result[117]= 0x98c;
            result[118]= 0x98f;
            result[119]= 0x990;
            result[120]= 0x993;
            result[121]= 0x9a8;
            result[122]= 0x9aa;
            result[123]= 0x9b0;
            result[124]= 0x9b2;
            result[125]= 0x9b2;
            result[126]= 0x9b6;
            result[127]= 0x9b9;
            result[128]= 0x9bc;
            result[129]= 0x9c4;
            result[130]= 0x9c7;
            result[131]= 0x9c8;
            result[132]= 0x9cb;
            result[133]= 0x9ce;
            result[134]= 0x9d7;
            result[135]= 0x9d7;
            result[136]= 0x9dc;
            result[137]= 0x9dd;
            result[138]= 0x9df;
            result[139]= 0x9e3;
            result[140]= 0x9e6;
            result[141]= 0x9f1;
            result[142]= 0x9fc;
            result[143]= 0x9fc;
            result[144]= 0x9fe;
            result[145]= 0x9fe;
            result[146]= 0xa01;
            result[147]= 0xa03;
            result[148]= 0xa05;
            result[149]= 0xa0a;
            result[150]= 0xa0f;
            result[151]= 0xa10;
            result[152]= 0xa13;
            result[153]= 0xa28;
            result[154]= 0xa2a;
            result[155]= 0xa30;
            result[156]= 0xa32;
            result[157]= 0xa33;
            result[158]= 0xa35;
            result[159]= 0xa36;
            result[160]= 0xa38;
            result[161]= 0xa39;
            result[162]= 0xa3c;
            result[163]= 0xa3c;
            result[164]= 0xa3e;
            result[165]= 0xa42;
            result[166]= 0xa47;
            result[167]= 0xa48;
            result[168]= 0xa4b;
            result[169]= 0xa4d;
            result[170]= 0xa51;
            result[171]= 0xa51;
            result[172]= 0xa59;
            result[173]= 0xa5c;
            result[174]= 0xa5e;
            result[175]= 0xa5e;
            result[176]= 0xa66;
            result[177]= 0xa75;
            result[178]= 0xa81;
            result[179]= 0xa83;
            result[180]= 0xa85;
            result[181]= 0xa8d;
            result[182]= 0xa8f;
            result[183]= 0xa91;
            result[184]= 0xa93;
            result[185]= 0xaa8;
            result[186]= 0xaaa;
            result[187]= 0xab0;
            result[188]= 0xab2;
            result[189]= 0xab3;
            result[190]= 0xab5;
            result[191]= 0xab9;
            result[192]= 0xabc;
            result[193]= 0xac5;
            result[194]= 0xac7;
            result[195]= 0xac9;
            result[196]= 0xacb;
            result[197]= 0xacd;
            result[198]= 0xad0;
            result[199]= 0xad0;
            result[200]= 0xae0;
            result[201]= 0xae3;
            result[202]= 0xae6;
            result[203]= 0xaef;
            result[204]= 0xaf9;
            result[205]= 0xaff;
            result[206]= 0xb01;
            result[207]= 0xb03;
            result[208]= 0xb05;
            result[209]= 0xb0c;
            result[210]= 0xb0f;
            result[211]= 0xb10;
            result[212]= 0xb13;
            result[213]= 0xb28;
            result[214]= 0xb2a;
            result[215]= 0xb30;
            result[216]= 0xb32;
            result[217]= 0xb33;
            result[218]= 0xb35;
            result[219]= 0xb39;
            result[220]= 0xb3c;
            result[221]= 0xb44;
            result[222]= 0xb47;
            result[223]= 0xb48;
            result[224]= 0xb4b;
            result[225]= 0xb4d;
            result[226]= 0xb55;
            result[227]= 0xb57;
            result[228]= 0xb5c;
            result[229]= 0xb5d;
            result[230]= 0xb5f;
            result[231]= 0xb63;
            result[232]= 0xb66;
            result[233]= 0xb6f;
            result[234]= 0xb71;
            result[235]= 0xb71;
            result[236]= 0xb82;
            result[237]= 0xb83;
            result[238]= 0xb85;
            result[239]= 0xb8a;
            result[240]= 0xb8e;
            result[241]= 0xb90;
            result[242]= 0xb92;
            result[243]= 0xb95;
            result[244]= 0xb99;
            result[245]= 0xb9a;
            result[246]= 0xb9c;
            result[247]= 0xb9c;
            result[248]= 0xb9e;
            result[249]= 0xb9f;
            result[250]= 0xba3;
            result[251]= 0xba4;
            result[252]= 0xba8;
            result[253]= 0xbaa;
            result[254]= 0xbae;
            result[255]= 0xbb9;
            result[256]= 0xbbe;
            result[257]= 0xbc2;
            result[258]= 0xbc6;
            result[259]= 0xbc8;
            result[260]= 0xbca;
            result[261]= 0xbcd;
            result[262]= 0xbd0;
            result[263]= 0xbd0;
            result[264]= 0xbd7;
            result[265]= 0xbd7;
            result[266]= 0xbe6;
            result[267]= 0xbef;
            result[268]= 0xc00;
            result[269]= 0xc0c;
            result[270]= 0xc0e;
            result[271]= 0xc10;
            result[272]= 0xc12;
            result[273]= 0xc28;
            result[274]= 0xc2a;
            result[275]= 0xc39;
            result[276]= 0xc3d;
            result[277]= 0xc44;
            result[278]= 0xc46;
            result[279]= 0xc48;
            result[280]= 0xc4a;
            result[281]= 0xc4d;
            result[282]= 0xc55;
            result[283]= 0xc56;
            result[284]= 0xc58;
            result[285]= 0xc5a;
            result[286]= 0xc60;
            result[287]= 0xc63;
            result[288]= 0xc66;
            result[289]= 0xc6f;
            result[290]= 0xc80;
            result[291]= 0xc83;
            result[292]= 0xc85;
            result[293]= 0xc8c;
            result[294]= 0xc8e;
            result[295]= 0xc90;
            result[296]= 0xc92;
            result[297]= 0xca8;
            result[298]= 0xcaa;
            result[299]= 0xcb3;
            result[300]= 0xcb5;
            result[301]= 0xcb9;
            result[302]= 0xcbc;
            result[303]= 0xcc4;
            result[304]= 0xcc6;
            result[305]= 0xcc8;
            result[306]= 0xcca;
            result[307]= 0xccd;
            result[308]= 0xcd5;
            result[309]= 0xcd6;
            result[310]= 0xcde;
            result[311]= 0xcde;
            result[312]= 0xce0;
            result[313]= 0xce3;
            result[314]= 0xce6;
            result[315]= 0xcef;
            result[316]= 0xcf1;
            result[317]= 0xcf2;
            result[318]= 0xd00;
            result[319]= 0xd0c;
            result[320]= 0xd0e;
            result[321]= 0xd10;
            result[322]= 0xd12;
            result[323]= 0xd44;
            result[324]= 0xd46;
            result[325]= 0xd48;
            result[326]= 0xd4a;
            result[327]= 0xd4e;
            result[328]= 0xd54;
            result[329]= 0xd57;
            result[330]= 0xd5f;
            result[331]= 0xd63;
            result[332]= 0xd66;
            result[333]= 0xd6f;
            result[334]= 0xd7a;
            result[335]= 0xd7f;
            result[336]= 0xd81;
            result[337]= 0xd83;
            result[338]= 0xd85;
            result[339]= 0xd96;
            result[340]= 0xd9a;
            result[341]= 0xdb1;
            result[342]= 0xdb3;
            result[343]= 0xdbb;
            result[344]= 0xdbd;
            result[345]= 0xdbd;
            result[346]= 0xdc0;
            result[347]= 0xdc6;
            result[348]= 0xdca;
            result[349]= 0xdca;
            result[350]= 0xdcf;
            result[351]= 0xdd4;
            result[352]= 0xdd6;
            result[353]= 0xdd6;
            result[354]= 0xdd8;
            result[355]= 0xddf;
            result[356]= 0xde6;
            result[357]= 0xdef;
            result[358]= 0xdf2;
            result[359]= 0xdf3;
            result[360]= 0xe01;
            result[361]= 0xe3a;
            result[362]= 0xe40;
            result[363]= 0xe4e;
            result[364]= 0xe50;
            result[365]= 0xe59;
            result[366]= 0xe81;
            result[367]= 0xe82;
            result[368]= 0xe84;
            result[369]= 0xe84;
            result[370]= 0xe86;
            result[371]= 0xe8a;
            result[372]= 0xe8c;
            result[373]= 0xea3;
            result[374]= 0xea5;
            result[375]= 0xea5;
            result[376]= 0xea7;
            result[377]= 0xebd;
            result[378]= 0xec0;
            result[379]= 0xec4;
            result[380]= 0xec6;
            result[381]= 0xec6;
            result[382]= 0xec8;
            result[383]= 0xecd;
            result[384]= 0xed0;
            result[385]= 0xed9;
            result[386]= 0xedc;
            result[387]= 0xedf;
            result[388]= 0xf00;
            result[389]= 0xf00;
            result[390]= 0xf18;
            result[391]= 0xf19;
            result[392]= 0xf20;
            result[393]= 0xf29;
            result[394]= 0xf35;
            result[395]= 0xf35;
            result[396]= 0xf37;
            result[397]= 0xf37;
            result[398]= 0xf39;
            result[399]= 0xf39;
            result[400]= 0xf3e;
            result[401]= 0xf47;
            result[402]= 0xf49;
            result[403]= 0xf6c;
            result[404]= 0xf71;
            result[405]= 0xf84;
            result[406]= 0xf86;
            result[407]= 0xf97;
            result[408]= 0xf99;
            result[409]= 0xfbc;
            result[410]= 0xfc6;
            result[411]= 0xfc6;
            result[412]= 0x1000;
            result[413]= 0x1049;
            result[414]= 0x1050;
            result[415]= 0x109d;
            result[416]= 0x10a0;
            result[417]= 0x10c5;
            result[418]= 0x10c7;
            result[419]= 0x10c7;
            result[420]= 0x10cd;
            result[421]= 0x10cd;
            result[422]= 0x10d0;
            result[423]= 0x10fa;
            result[424]= 0x10fc;
            result[425]= 0x1248;
            result[426]= 0x124a;
            result[427]= 0x124d;
            result[428]= 0x1250;
            result[429]= 0x1256;
            result[430]= 0x1258;
            result[431]= 0x1258;
            result[432]= 0x125a;
            result[433]= 0x125d;
            result[434]= 0x1260;
            result[435]= 0x1288;
            result[436]= 0x128a;
            result[437]= 0x128d;
            result[438]= 0x1290;
            result[439]= 0x12b0;
            result[440]= 0x12b2;
            result[441]= 0x12b5;
            result[442]= 0x12b8;
            result[443]= 0x12be;
            result[444]= 0x12c0;
            result[445]= 0x12c0;
            result[446]= 0x12c2;
            result[447]= 0x12c5;
            result[448]= 0x12c8;
            result[449]= 0x12d6;
            result[450]= 0x12d8;
            result[451]= 0x1310;
            result[452]= 0x1312;
            result[453]= 0x1315;
            result[454]= 0x1318;
            result[455]= 0x135a;
            result[456]= 0x135d;
            result[457]= 0x135f;
            result[458]= 0x1380;
            result[459]= 0x138f;
            result[460]= 0x13a0;
            result[461]= 0x13f5;
            result[462]= 0x13f8;
            result[463]= 0x13fd;
            result[464]= 0x1401;
            result[465]= 0x166c;
            result[466]= 0x166f;
            result[467]= 0x167f;
            result[468]= 0x1681;
            result[469]= 0x169a;
            result[470]= 0x16a0;
            result[471]= 0x16ea;
            result[472]= 0x16ee;
            result[473]= 0x16f8;
            result[474]= 0x1700;
            result[475]= 0x170c;
            result[476]= 0x170e;
            result[477]= 0x1714;
            result[478]= 0x1720;
            result[479]= 0x1734;
            result[480]= 0x1740;
            result[481]= 0x1753;
            result[482]= 0x1760;
            result[483]= 0x176c;
            result[484]= 0x176e;
            result[485]= 0x1770;
            result[486]= 0x1772;
            result[487]= 0x1773;
            result[488]= 0x1780;
            result[489]= 0x17d3;
            result[490]= 0x17d7;
            result[491]= 0x17d7;
            result[492]= 0x17dc;
            result[493]= 0x17dd;
            result[494]= 0x17e0;
            result[495]= 0x17e9;
            result[496]= 0x180b;
            result[497]= 0x180d;
            result[498]= 0x1810;
            result[499]= 0x1819;
            result[500]= 0x1820;
            result[501]= 0x1878;
            result[502]= 0x1880;
            result[503]= 0x18aa;
            result[504]= 0x18b0;
            result[505]= 0x18f5;
            result[506]= 0x1900;
            result[507]= 0x191e;
            result[508]= 0x1920;
            result[509]= 0x192b;
            result[510]= 0x1930;
            result[511]= 0x193b;
            result[512]= 0x1946;
            result[513]= 0x196d;
            result[514]= 0x1970;
            result[515]= 0x1974;
            result[516]= 0x1980;
            result[517]= 0x19ab;
            result[518]= 0x19b0;
            result[519]= 0x19c9;
            result[520]= 0x19d0;
            result[521]= 0x19d9;
            result[522]= 0x1a00;
            result[523]= 0x1a1b;
            result[524]= 0x1a20;
            result[525]= 0x1a5e;
            result[526]= 0x1a60;
            result[527]= 0x1a7c;
            result[528]= 0x1a7f;
            result[529]= 0x1a89;
            result[530]= 0x1a90;
            result[531]= 0x1a99;
            result[532]= 0x1aa7;
            result[533]= 0x1aa7;
            result[534]= 0x1ab0;
            result[535]= 0x1abd;
            result[536]= 0x1abf;
            result[537]= 0x1ac0;
            result[538]= 0x1b00;
            result[539]= 0x1b4b;
            result[540]= 0x1b50;
            result[541]= 0x1b59;
            result[542]= 0x1b6b;
            result[543]= 0x1b73;
            result[544]= 0x1b80;
            result[545]= 0x1bf3;
            result[546]= 0x1c00;
            result[547]= 0x1c37;
            result[548]= 0x1c40;
            result[549]= 0x1c49;
            result[550]= 0x1c4d;
            result[551]= 0x1c7d;
            result[552]= 0x1c80;
            result[553]= 0x1c88;
            result[554]= 0x1c90;
            result[555]= 0x1cba;
            result[556]= 0x1cbd;
            result[557]= 0x1cbf;
            result[558]= 0x1cd0;
            result[559]= 0x1cd2;
            result[560]= 0x1cd4;
            result[561]= 0x1cfa;
            result[562]= 0x1d00;
            result[563]= 0x1df9;
            result[564]= 0x1dfb;
            result[565]= 0x1f15;
            result[566]= 0x1f18;
            result[567]= 0x1f1d;
            result[568]= 0x1f20;
            result[569]= 0x1f45;
            result[570]= 0x1f48;
            result[571]= 0x1f4d;
            result[572]= 0x1f50;
            result[573]= 0x1f57;
            result[574]= 0x1f59;
            result[575]= 0x1f59;
            result[576]= 0x1f5b;
            result[577]= 0x1f5b;
            result[578]= 0x1f5d;
            result[579]= 0x1f5d;
            result[580]= 0x1f5f;
            result[581]= 0x1f7d;
            result[582]= 0x1f80;
            result[583]= 0x1fb4;
            result[584]= 0x1fb6;
            result[585]= 0x1fbc;
            result[586]= 0x1fbe;
            result[587]= 0x1fbe;
            result[588]= 0x1fc2;
            result[589]= 0x1fc4;
            result[590]= 0x1fc6;
            result[591]= 0x1fcc;
            result[592]= 0x1fd0;
            result[593]= 0x1fd3;
            result[594]= 0x1fd6;
            result[595]= 0x1fdb;
            result[596]= 0x1fe0;
            result[597]= 0x1fec;
            result[598]= 0x1ff2;
            result[599]= 0x1ff4;
            result[600]= 0x1ff6;
            result[601]= 0x1ffc;
            result[602]= 0x203f;
            result[603]= 0x2040;
            result[604]= 0x2054;
            result[605]= 0x2054;
            result[606]= 0x2071;
            result[607]= 0x2071;
            result[608]= 0x207f;
            result[609]= 0x207f;
            result[610]= 0x2090;
            result[611]= 0x209c;
            result[612]= 0x20d0;
            result[613]= 0x20dc;
            result[614]= 0x20e1;
            result[615]= 0x20e1;
            result[616]= 0x20e5;
            result[617]= 0x20f0;
            result[618]= 0x2102;
            result[619]= 0x2102;
            result[620]= 0x2107;
            result[621]= 0x2107;
            result[622]= 0x210a;
            result[623]= 0x2113;
            result[624]= 0x2115;
            result[625]= 0x2115;
            result[626]= 0x2119;
            result[627]= 0x211d;
            result[628]= 0x2124;
            result[629]= 0x2124;
            result[630]= 0x2126;
            result[631]= 0x2126;
            result[632]= 0x2128;
            result[633]= 0x2128;
            result[634]= 0x212a;
            result[635]= 0x212d;
            result[636]= 0x212f;
            result[637]= 0x2139;
            result[638]= 0x213c;
            result[639]= 0x213f;
            result[640]= 0x2145;
            result[641]= 0x2149;
            result[642]= 0x214e;
            result[643]= 0x214e;
            result[644]= 0x2160;
            result[645]= 0x2188;
            result[646]= 0x2c00;
            result[647]= 0x2c2e;
            result[648]= 0x2c30;
            result[649]= 0x2c5e;
            result[650]= 0x2c60;
            result[651]= 0x2ce4;
            result[652]= 0x2ceb;
            result[653]= 0x2cf3;
            result[654]= 0x2d00;
            result[655]= 0x2d25;
            result[656]= 0x2d27;
            result[657]= 0x2d27;
            result[658]= 0x2d2d;
            result[659]= 0x2d2d;
            result[660]= 0x2d30;
            result[661]= 0x2d67;
            result[662]= 0x2d6f;
            result[663]= 0x2d6f;
            result[664]= 0x2d7f;
            result[665]= 0x2d96;
            result[666]= 0x2da0;
            result[667]= 0x2da6;
            result[668]= 0x2da8;
            result[669]= 0x2dae;
            result[670]= 0x2db0;
            result[671]= 0x2db6;
            result[672]= 0x2db8;
            result[673]= 0x2dbe;
            result[674]= 0x2dc0;
            result[675]= 0x2dc6;
            result[676]= 0x2dc8;
            result[677]= 0x2dce;
            result[678]= 0x2dd0;
            result[679]= 0x2dd6;
            result[680]= 0x2dd8;
            result[681]= 0x2dde;
            result[682]= 0x2de0;
            result[683]= 0x2dff;
            result[684]= 0x2e2f;
            result[685]= 0x2e2f;
            result[686]= 0x3005;
            result[687]= 0x3007;
            result[688]= 0x3021;
            result[689]= 0x302f;
            result[690]= 0x3031;
            result[691]= 0x3035;
            result[692]= 0x3038;
            result[693]= 0x303c;
            result[694]= 0x3041;
            result[695]= 0x3096;
            result[696]= 0x3099;
            result[697]= 0x309a;
            result[698]= 0x309d;
            result[699]= 0x309f;
            result[700]= 0x30a1;
            result[701]= 0x30fa;
            result[702]= 0x30fc;
            result[703]= 0x30ff;
            result[704]= 0x3105;
            result[705]= 0x312f;
            result[706]= 0x3131;
            result[707]= 0x318e;
            result[708]= 0x31a0;
            result[709]= 0x31bf;
            result[710]= 0x31f0;
            result[711]= 0x31ff;
            result[712]= 0x3400;
            result[713]= 0x4dbf;
            result[714]= 0x4e00;
            result[715]= 0x9ffc;
            result[716]= 0xa000;
            result[717]= 0xa48c;
            result[718]= 0xa4d0;
            result[719]= 0xa4fd;
            result[720]= 0xa500;
            result[721]= 0xa60c;
            result[722]= 0xa610;
            result[723]= 0xa62b;
            result[724]= 0xa640;
            result[725]= 0xa66f;
            result[726]= 0xa674;
            result[727]= 0xa67d;
            result[728]= 0xa67f;
            result[729]= 0xa6f1;
            result[730]= 0xa717;
            result[731]= 0xa71f;
            result[732]= 0xa722;
            result[733]= 0xa788;
            result[734]= 0xa78b;
            result[735]= 0xa7bf;
            result[736]= 0xa7c2;
            result[737]= 0xa7ca;
            result[738]= 0xa7f5;
            result[739]= 0xa827;
            result[740]= 0xa82c;
            result[741]= 0xa82c;
            result[742]= 0xa840;
            result[743]= 0xa873;
            result[744]= 0xa880;
            result[745]= 0xa8c5;
            result[746]= 0xa8d0;
            result[747]= 0xa8d9;
            result[748]= 0xa8e0;
            result[749]= 0xa8f7;
            result[750]= 0xa8fb;
            result[751]= 0xa8fb;
            result[752]= 0xa8fd;
            result[753]= 0xa92d;
            result[754]= 0xa930;
            result[755]= 0xa953;
            result[756]= 0xa960;
            result[757]= 0xa97c;
            result[758]= 0xa980;
            result[759]= 0xa9c0;
            result[760]= 0xa9cf;
            result[761]= 0xa9d9;
            result[762]= 0xa9e0;
            result[763]= 0xa9fe;
            result[764]= 0xaa00;
            result[765]= 0xaa36;
            result[766]= 0xaa40;
            result[767]= 0xaa4d;
            result[768]= 0xaa50;
            result[769]= 0xaa59;
            result[770]= 0xaa60;
            result[771]= 0xaa76;
            result[772]= 0xaa7a;
            result[773]= 0xaac2;
            result[774]= 0xaadb;
            result[775]= 0xaadd;
            result[776]= 0xaae0;
            result[777]= 0xaaef;
            result[778]= 0xaaf2;
            result[779]= 0xaaf6;
            result[780]= 0xab01;
            result[781]= 0xab06;
            result[782]= 0xab09;
            result[783]= 0xab0e;
            result[784]= 0xab11;
            result[785]= 0xab16;
            result[786]= 0xab20;
            result[787]= 0xab26;
            result[788]= 0xab28;
            result[789]= 0xab2e;
            result[790]= 0xab30;
            result[791]= 0xab5a;
            result[792]= 0xab5c;
            result[793]= 0xab69;
            result[794]= 0xab70;
            result[795]= 0xabea;
            result[796]= 0xabec;
            result[797]= 0xabed;
            result[798]= 0xabf0;
            result[799]= 0xabf9;
            result[800]= 0xac00;
            result[801]= 0xd7a3;
            result[802]= 0xd7b0;
            result[803]= 0xd7c6;
            result[804]= 0xd7cb;
            result[805]= 0xd7fb;
            result[806]= 0xf900;
            result[807]= 0xfa6d;
            result[808]= 0xfa70;
            result[809]= 0xfad9;
            result[810]= 0xfb00;
            result[811]= 0xfb06;
            result[812]= 0xfb13;
            result[813]= 0xfb17;
            result[814]= 0xfb1d;
            result[815]= 0xfb28;
            result[816]= 0xfb2a;
            result[817]= 0xfb36;
            result[818]= 0xfb38;
            result[819]= 0xfb3c;
            result[820]= 0xfb3e;
            result[821]= 0xfb3e;
            result[822]= 0xfb40;
            result[823]= 0xfb41;
            result[824]= 0xfb43;
            result[825]= 0xfb44;
            result[826]= 0xfb46;
            result[827]= 0xfbb1;
            result[828]= 0xfbd3;
            result[829]= 0xfc5d;
            result[830]= 0xfc64;
            result[831]= 0xfd3d;
            result[832]= 0xfd50;
            result[833]= 0xfd8f;
            result[834]= 0xfd92;
            result[835]= 0xfdc7;
            result[836]= 0xfdf0;
            result[837]= 0xfdf9;
            result[838]= 0xfe00;
            result[839]= 0xfe0f;
            result[840]= 0xfe20;
            result[841]= 0xfe2f;
            result[842]= 0xfe33;
            result[843]= 0xfe34;
            result[844]= 0xfe4d;
            result[845]= 0xfe4f;
            result[846]= 0xfe71;
            result[847]= 0xfe71;
            result[848]= 0xfe73;
            result[849]= 0xfe73;
            result[850]= 0xfe77;
            result[851]= 0xfe77;
            result[852]= 0xfe79;
            result[853]= 0xfe79;
            result[854]= 0xfe7b;
            result[855]= 0xfe7b;
            result[856]= 0xfe7d;
            result[857]= 0xfe7d;
            result[858]= 0xfe7f;
            result[859]= 0xfefc;
            result[860]= 0xff10;
            result[861]= 0xff19;
            result[862]= 0xff21;
            result[863]= 0xff3a;
            result[864]= 0xff3f;
            result[865]= 0xff3f;
            result[866]= 0xff41;
            result[867]= 0xff5a;
            result[868]= 0xff66;
            result[869]= 0xffbe;
            result[870]= 0xffc2;
            result[871]= 0xffc7;
            result[872]= 0xffca;
            result[873]= 0xffcf;
            result[874]= 0xffd2;
            result[875]= 0xffd7;
            result[876]= 0xffda;
            result[877]= 0xffdc;
            result[878]= 0x10000;
            result[879]= 0x1000b;
            result[880]= 0x1000d;
            result[881]= 0x10026;
            result[882]= 0x10028;
            result[883]= 0x1003a;
            result[884]= 0x1003c;
            result[885]= 0x1003d;
            result[886]= 0x1003f;
            result[887]= 0x1004d;
            result[888]= 0x10050;
            result[889]= 0x1005d;
            result[890]= 0x10080;
            result[891]= 0x100fa;
            result[892]= 0x10140;
            result[893]= 0x10174;
            result[894]= 0x101fd;
            result[895]= 0x101fd;
            result[896]= 0x10280;
            result[897]= 0x1029c;
            result[898]= 0x102a0;
            result[899]= 0x102d0;
            result[900]= 0x102e0;
            result[901]= 0x102e0;
            result[902]= 0x10300;
            result[903]= 0x1031f;
            result[904]= 0x1032d;
            result[905]= 0x1034a;
            result[906]= 0x10350;
            result[907]= 0x1037a;
            result[908]= 0x10380;
            result[909]= 0x1039d;
            result[910]= 0x103a0;
            result[911]= 0x103c3;
            result[912]= 0x103c8;
            result[913]= 0x103cf;
            result[914]= 0x103d1;
            result[915]= 0x103d5;
            result[916]= 0x10400;
            result[917]= 0x1049d;
            result[918]= 0x104a0;
            result[919]= 0x104a9;
            result[920]= 0x104b0;
            result[921]= 0x104d3;
            result[922]= 0x104d8;
            result[923]= 0x104fb;
            result[924]= 0x10500;
            result[925]= 0x10527;
            result[926]= 0x10530;
            result[927]= 0x10563;
            result[928]= 0x10600;
            result[929]= 0x10736;
            result[930]= 0x10740;
            result[931]= 0x10755;
            result[932]= 0x10760;
            result[933]= 0x10767;
            result[934]= 0x10800;
            result[935]= 0x10805;
            result[936]= 0x10808;
            result[937]= 0x10808;
            result[938]= 0x1080a;
            result[939]= 0x10835;
            result[940]= 0x10837;
            result[941]= 0x10838;
            result[942]= 0x1083c;
            result[943]= 0x1083c;
            result[944]= 0x1083f;
            result[945]= 0x10855;
            result[946]= 0x10860;
            result[947]= 0x10876;
            result[948]= 0x10880;
            result[949]= 0x1089e;
            result[950]= 0x108e0;
            result[951]= 0x108f2;
            result[952]= 0x108f4;
            result[953]= 0x108f5;
            result[954]= 0x10900;
            result[955]= 0x10915;
            result[956]= 0x10920;
            result[957]= 0x10939;
            result[958]= 0x10980;
            result[959]= 0x109b7;
            result[960]= 0x109be;
            result[961]= 0x109bf;
            result[962]= 0x10a00;
            result[963]= 0x10a03;
            result[964]= 0x10a05;
            result[965]= 0x10a06;
            result[966]= 0x10a0c;
            result[967]= 0x10a13;
            result[968]= 0x10a15;
            result[969]= 0x10a17;
            result[970]= 0x10a19;
            result[971]= 0x10a35;
            result[972]= 0x10a38;
            result[973]= 0x10a3a;
            result[974]= 0x10a3f;
            result[975]= 0x10a3f;
            result[976]= 0x10a60;
            result[977]= 0x10a7c;
            result[978]= 0x10a80;
            result[979]= 0x10a9c;
            result[980]= 0x10ac0;
            result[981]= 0x10ac7;
            result[982]= 0x10ac9;
            result[983]= 0x10ae6;
            result[984]= 0x10b00;
            result[985]= 0x10b35;
            result[986]= 0x10b40;
            result[987]= 0x10b55;
            result[988]= 0x10b60;
            result[989]= 0x10b72;
            result[990]= 0x10b80;
            result[991]= 0x10b91;
            result[992]= 0x10c00;
            result[993]= 0x10c48;
            result[994]= 0x10c80;
            result[995]= 0x10cb2;
            result[996]= 0x10cc0;
            result[997]= 0x10cf2;
            result[998]= 0x10d00;
            result[999]= 0x10d27;
            result[1000]= 0x10d30;
            result[1001]= 0x10d39;
            result[1002]= 0x10e80;
            result[1003]= 0x10ea9;
            result[1004]= 0x10eab;
            result[1005]= 0x10eac;
            result[1006]= 0x10eb0;
            result[1007]= 0x10eb1;
            result[1008]= 0x10f00;
            result[1009]= 0x10f1c;
            result[1010]= 0x10f27;
            result[1011]= 0x10f27;
            result[1012]= 0x10f30;
            result[1013]= 0x10f50;
            result[1014]= 0x10fb0;
            result[1015]= 0x10fc4;
            result[1016]= 0x10fe0;
            result[1017]= 0x10ff6;
            result[1018]= 0x11000;
            result[1019]= 0x11046;
            result[1020]= 0x11066;
            result[1021]= 0x1106f;
            result[1022]= 0x1107f;
            result[1023]= 0x110ba;
            result[1024]= 0x110d0;
            result[1025]= 0x110e8;
            result[1026]= 0x110f0;
            result[1027]= 0x110f9;
            result[1028]= 0x11100;
            result[1029]= 0x11134;
            result[1030]= 0x11136;
            result[1031]= 0x1113f;
            result[1032]= 0x11144;
            result[1033]= 0x11147;
            result[1034]= 0x11150;
            result[1035]= 0x11173;
            result[1036]= 0x11176;
            result[1037]= 0x11176;
            result[1038]= 0x11180;
            result[1039]= 0x111c4;
            result[1040]= 0x111c9;
            result[1041]= 0x111cc;
            result[1042]= 0x111ce;
            result[1043]= 0x111da;
            result[1044]= 0x111dc;
            result[1045]= 0x111dc;
            result[1046]= 0x11200;
            result[1047]= 0x11211;
            result[1048]= 0x11213;
            result[1049]= 0x11237;
            result[1050]= 0x1123e;
            result[1051]= 0x1123e;
            result[1052]= 0x11280;
            result[1053]= 0x11286;
            result[1054]= 0x11288;
            result[1055]= 0x11288;
            result[1056]= 0x1128a;
            result[1057]= 0x1128d;
            result[1058]= 0x1128f;
            result[1059]= 0x1129d;
            result[1060]= 0x1129f;
            result[1061]= 0x112a8;
            result[1062]= 0x112b0;
            result[1063]= 0x112ea;
            result[1064]= 0x112f0;
            result[1065]= 0x112f9;
            result[1066]= 0x11300;
            result[1067]= 0x11303;
            result[1068]= 0x11305;
            result[1069]= 0x1130c;
            result[1070]= 0x1130f;
            result[1071]= 0x11310;
            result[1072]= 0x11313;
            result[1073]= 0x11328;
            result[1074]= 0x1132a;
            result[1075]= 0x11330;
            result[1076]= 0x11332;
            result[1077]= 0x11333;
            result[1078]= 0x11335;
            result[1079]= 0x11339;
            result[1080]= 0x1133b;
            result[1081]= 0x11344;
            result[1082]= 0x11347;
            result[1083]= 0x11348;
            result[1084]= 0x1134b;
            result[1085]= 0x1134d;
            result[1086]= 0x11350;
            result[1087]= 0x11350;
            result[1088]= 0x11357;
            result[1089]= 0x11357;
            result[1090]= 0x1135d;
            result[1091]= 0x11363;
            result[1092]= 0x11366;
            result[1093]= 0x1136c;
            result[1094]= 0x11370;
            result[1095]= 0x11374;
            result[1096]= 0x11400;
            result[1097]= 0x1144a;
            result[1098]= 0x11450;
            result[1099]= 0x11459;
            result[1100]= 0x1145e;
            result[1101]= 0x11461;
            result[1102]= 0x11480;
            result[1103]= 0x114c5;
            result[1104]= 0x114c7;
            result[1105]= 0x114c7;
            result[1106]= 0x114d0;
            result[1107]= 0x114d9;
            result[1108]= 0x11580;
            result[1109]= 0x115b5;
            result[1110]= 0x115b8;
            result[1111]= 0x115c0;
            result[1112]= 0x115d8;
            result[1113]= 0x115dd;
            result[1114]= 0x11600;
            result[1115]= 0x11640;
            result[1116]= 0x11644;
            result[1117]= 0x11644;
            result[1118]= 0x11650;
            result[1119]= 0x11659;
            result[1120]= 0x11680;
            result[1121]= 0x116b8;
            result[1122]= 0x116c0;
            result[1123]= 0x116c9;
            result[1124]= 0x11700;
            result[1125]= 0x1171a;
            result[1126]= 0x1171d;
            result[1127]= 0x1172b;
            result[1128]= 0x11730;
            result[1129]= 0x11739;
            result[1130]= 0x11800;
            result[1131]= 0x1183a;
            result[1132]= 0x118a0;
            result[1133]= 0x118e9;
            result[1134]= 0x118ff;
            result[1135]= 0x11906;
            result[1136]= 0x11909;
            result[1137]= 0x11909;
            result[1138]= 0x1190c;
            result[1139]= 0x11913;
            result[1140]= 0x11915;
            result[1141]= 0x11916;
            result[1142]= 0x11918;
            result[1143]= 0x11935;
            result[1144]= 0x11937;
            result[1145]= 0x11938;
            result[1146]= 0x1193b;
            result[1147]= 0x11943;
            result[1148]= 0x11950;
            result[1149]= 0x11959;
            result[1150]= 0x119a0;
            result[1151]= 0x119a7;
            result[1152]= 0x119aa;
            result[1153]= 0x119d7;
            result[1154]= 0x119da;
            result[1155]= 0x119e1;
            result[1156]= 0x119e3;
            result[1157]= 0x119e4;
            result[1158]= 0x11a00;
            result[1159]= 0x11a3e;
            result[1160]= 0x11a47;
            result[1161]= 0x11a47;
            result[1162]= 0x11a50;
            result[1163]= 0x11a99;
            result[1164]= 0x11a9d;
            result[1165]= 0x11a9d;
            result[1166]= 0x11ac0;
            result[1167]= 0x11af8;
            result[1168]= 0x11c00;
            result[1169]= 0x11c08;
            result[1170]= 0x11c0a;
            result[1171]= 0x11c36;
            result[1172]= 0x11c38;
            result[1173]= 0x11c40;
            result[1174]= 0x11c50;
            result[1175]= 0x11c59;
            result[1176]= 0x11c72;
            result[1177]= 0x11c8f;
            result[1178]= 0x11c92;
            result[1179]= 0x11ca7;
            result[1180]= 0x11ca9;
            result[1181]= 0x11cb6;
            result[1182]= 0x11d00;
            result[1183]= 0x11d06;
            result[1184]= 0x11d08;
            result[1185]= 0x11d09;
            result[1186]= 0x11d0b;
            result[1187]= 0x11d36;
            result[1188]= 0x11d3a;
            result[1189]= 0x11d3a;
            result[1190]= 0x11d3c;
            result[1191]= 0x11d3d;
            result[1192]= 0x11d3f;
            result[1193]= 0x11d47;
            result[1194]= 0x11d50;
            result[1195]= 0x11d59;
            result[1196]= 0x11d60;
            result[1197]= 0x11d65;
            result[1198]= 0x11d67;
            result[1199]= 0x11d68;
            result[1200]= 0x11d6a;
            result[1201]= 0x11d8e;
            result[1202]= 0x11d90;
            result[1203]= 0x11d91;
            result[1204]= 0x11d93;
            result[1205]= 0x11d98;
            result[1206]= 0x11da0;
            result[1207]= 0x11da9;
            result[1208]= 0x11ee0;
            result[1209]= 0x11ef6;
            result[1210]= 0x11fb0;
            result[1211]= 0x11fb0;
            result[1212]= 0x12000;
            result[1213]= 0x12399;
            result[1214]= 0x12400;
            result[1215]= 0x1246e;
            result[1216]= 0x12480;
            result[1217]= 0x12543;
            result[1218]= 0x13000;
            result[1219]= 0x1342e;
            result[1220]= 0x14400;
            result[1221]= 0x14646;
            result[1222]= 0x16800;
            result[1223]= 0x16a38;
            result[1224]= 0x16a40;
            result[1225]= 0x16a5e;
            result[1226]= 0x16a60;
            result[1227]= 0x16a69;
            result[1228]= 0x16ad0;
            result[1229]= 0x16aed;
            result[1230]= 0x16af0;
            result[1231]= 0x16af4;
            result[1232]= 0x16b00;
            result[1233]= 0x16b36;
            result[1234]= 0x16b40;
            result[1235]= 0x16b43;
            result[1236]= 0x16b50;
            result[1237]= 0x16b59;
            result[1238]= 0x16b63;
            result[1239]= 0x16b77;
            result[1240]= 0x16b7d;
            result[1241]= 0x16b8f;
            result[1242]= 0x16e40;
            result[1243]= 0x16e7f;
            result[1244]= 0x16f00;
            result[1245]= 0x16f4a;
            result[1246]= 0x16f4f;
            result[1247]= 0x16f87;
            result[1248]= 0x16f8f;
            result[1249]= 0x16f9f;
            result[1250]= 0x16fe0;
            result[1251]= 0x16fe1;
            result[1252]= 0x16fe3;
            result[1253]= 0x16fe4;
            result[1254]= 0x16ff0;
            result[1255]= 0x16ff1;
            result[1256]= 0x17000;
            result[1257]= 0x187f7;
            result[1258]= 0x18800;
            result[1259]= 0x18cd5;
            result[1260]= 0x18d00;
            result[1261]= 0x18d08;
            result[1262]= 0x1b000;
            result[1263]= 0x1b11e;
            result[1264]= 0x1b150;
            result[1265]= 0x1b152;
            result[1266]= 0x1b164;
            result[1267]= 0x1b167;
            result[1268]= 0x1b170;
            result[1269]= 0x1b2fb;
            result[1270]= 0x1bc00;
            result[1271]= 0x1bc6a;
            result[1272]= 0x1bc70;
            result[1273]= 0x1bc7c;
            result[1274]= 0x1bc80;
            result[1275]= 0x1bc88;
            result[1276]= 0x1bc90;
            result[1277]= 0x1bc99;
            result[1278]= 0x1bc9d;
            result[1279]= 0x1bc9e;
            result[1280]= 0x1d165;
            result[1281]= 0x1d169;
            result[1282]= 0x1d16d;
            result[1283]= 0x1d172;
            result[1284]= 0x1d17b;
            result[1285]= 0x1d182;
            result[1286]= 0x1d185;
            result[1287]= 0x1d18b;
            result[1288]= 0x1d1aa;
            result[1289]= 0x1d1ad;
            result[1290]= 0x1d242;
            result[1291]= 0x1d244;
            result[1292]= 0x1d400;
            result[1293]= 0x1d454;
            result[1294]= 0x1d456;
            result[1295]= 0x1d49c;
            result[1296]= 0x1d49e;
            result[1297]= 0x1d49f;
            result[1298]= 0x1d4a2;
            result[1299]= 0x1d4a2;
            result[1300]= 0x1d4a5;
            result[1301]= 0x1d4a6;
            result[1302]= 0x1d4a9;
            result[1303]= 0x1d4ac;
            result[1304]= 0x1d4ae;
            result[1305]= 0x1d4b9;
            result[1306]= 0x1d4bb;
            result[1307]= 0x1d4bb;
            result[1308]= 0x1d4bd;
            result[1309]= 0x1d4c3;
            result[1310]= 0x1d4c5;
            result[1311]= 0x1d505;
            result[1312]= 0x1d507;
            result[1313]= 0x1d50a;
            result[1314]= 0x1d50d;
            result[1315]= 0x1d514;
            result[1316]= 0x1d516;
            result[1317]= 0x1d51c;
            result[1318]= 0x1d51e;
            result[1319]= 0x1d539;
            result[1320]= 0x1d53b;
            result[1321]= 0x1d53e;
            result[1322]= 0x1d540;
            result[1323]= 0x1d544;
            result[1324]= 0x1d546;
            result[1325]= 0x1d546;
            result[1326]= 0x1d54a;
            result[1327]= 0x1d550;
            result[1328]= 0x1d552;
            result[1329]= 0x1d6a5;
            result[1330]= 0x1d6a8;
            result[1331]= 0x1d6c0;
            result[1332]= 0x1d6c2;
            result[1333]= 0x1d6da;
            result[1334]= 0x1d6dc;
            result[1335]= 0x1d6fa;
            result[1336]= 0x1d6fc;
            result[1337]= 0x1d714;
            result[1338]= 0x1d716;
            result[1339]= 0x1d734;
            result[1340]= 0x1d736;
            result[1341]= 0x1d74e;
            result[1342]= 0x1d750;
            result[1343]= 0x1d76e;
            result[1344]= 0x1d770;
            result[1345]= 0x1d788;
            result[1346]= 0x1d78a;
            result[1347]= 0x1d7a8;
            result[1348]= 0x1d7aa;
            result[1349]= 0x1d7c2;
            result[1350]= 0x1d7c4;
            result[1351]= 0x1d7cb;
            result[1352]= 0x1d7ce;
            result[1353]= 0x1d7ff;
            result[1354]= 0x1da00;
            result[1355]= 0x1da36;
            result[1356]= 0x1da3b;
            result[1357]= 0x1da6c;
            result[1358]= 0x1da75;
            result[1359]= 0x1da75;
            result[1360]= 0x1da84;
            result[1361]= 0x1da84;
            result[1362]= 0x1da9b;
            result[1363]= 0x1da9f;
            result[1364]= 0x1daa1;
            result[1365]= 0x1daaf;
            result[1366]= 0x1e000;
            result[1367]= 0x1e006;
            result[1368]= 0x1e008;
            result[1369]= 0x1e018;
            result[1370]= 0x1e01b;
            result[1371]= 0x1e021;
            result[1372]= 0x1e023;
            result[1373]= 0x1e024;
            result[1374]= 0x1e026;
            result[1375]= 0x1e02a;
            result[1376]= 0x1e100;
            result[1377]= 0x1e12c;
            result[1378]= 0x1e130;
            result[1379]= 0x1e13d;
            result[1380]= 0x1e140;
            result[1381]= 0x1e149;
            result[1382]= 0x1e14e;
            result[1383]= 0x1e14e;
            result[1384]= 0x1e2c0;
            result[1385]= 0x1e2f9;
            result[1386]= 0x1e800;
            result[1387]= 0x1e8c4;
            result[1388]= 0x1e8d0;
            result[1389]= 0x1e8d6;
            result[1390]= 0x1e900;
            result[1391]= 0x1e94b;
            result[1392]= 0x1e950;
            result[1393]= 0x1e959;
            result[1394]= 0x1ee00;
            result[1395]= 0x1ee03;
            result[1396]= 0x1ee05;
            result[1397]= 0x1ee1f;
            result[1398]= 0x1ee21;
            result[1399]= 0x1ee22;
            result[1400]= 0x1ee24;
            result[1401]= 0x1ee24;
            result[1402]= 0x1ee27;
            result[1403]= 0x1ee27;
            result[1404]= 0x1ee29;
            result[1405]= 0x1ee32;
            result[1406]= 0x1ee34;
            result[1407]= 0x1ee37;
            result[1408]= 0x1ee39;
            result[1409]= 0x1ee39;
            result[1410]= 0x1ee3b;
            result[1411]= 0x1ee3b;
            result[1412]= 0x1ee42;
            result[1413]= 0x1ee42;
            result[1414]= 0x1ee47;
            result[1415]= 0x1ee47;
            result[1416]= 0x1ee49;
            result[1417]= 0x1ee49;
            result[1418]= 0x1ee4b;
            result[1419]= 0x1ee4b;
            result[1420]= 0x1ee4d;
            result[1421]= 0x1ee4f;
            result[1422]= 0x1ee51;
            result[1423]= 0x1ee52;
            result[1424]= 0x1ee54;
            result[1425]= 0x1ee54;
            result[1426]= 0x1ee57;
            result[1427]= 0x1ee57;
            result[1428]= 0x1ee59;
            result[1429]= 0x1ee59;
            result[1430]= 0x1ee5b;
            result[1431]= 0x1ee5b;
            result[1432]= 0x1ee5d;
            result[1433]= 0x1ee5d;
            result[1434]= 0x1ee5f;
            result[1435]= 0x1ee5f;
            result[1436]= 0x1ee61;
            result[1437]= 0x1ee62;
            result[1438]= 0x1ee64;
            result[1439]= 0x1ee64;
            result[1440]= 0x1ee67;
            result[1441]= 0x1ee6a;
            result[1442]= 0x1ee6c;
            result[1443]= 0x1ee72;
            result[1444]= 0x1ee74;
            result[1445]= 0x1ee77;
            result[1446]= 0x1ee79;
            result[1447]= 0x1ee7c;
            result[1448]= 0x1ee7e;
            result[1449]= 0x1ee7e;
            result[1450]= 0x1ee80;
            result[1451]= 0x1ee89;
            result[1452]= 0x1ee8b;
            result[1453]= 0x1ee9b;
            result[1454]= 0x1eea1;
            result[1455]= 0x1eea3;
            result[1456]= 0x1eea5;
            result[1457]= 0x1eea9;
            result[1458]= 0x1eeab;
            result[1459]= 0x1eebb;
            result[1460]= 0x1fbf0;
            result[1461]= 0x1fbf9;
            result[1462]= 0x20000;
            result[1463]= 0x2a6dd;
            result[1464]= 0x2a700;
            result[1465]= 0x2b734;
            result[1466]= 0x2b740;
            result[1467]= 0x2b81d;
            result[1468]= 0x2b820;
            result[1469]= 0x2cea1;
            result[1470]= 0x2ceb0;
            result[1471]= 0x2ebe0;
            result[1472]= 0x2f800;
            result[1473]= 0x2fa1d;
            result[1474]= 0x30000;
            result[1475]= 0x3134a;
            result[1476]= 0xe0100;
            result[1477]= 0xe01ef;
            return result;
        }

        static TokenType NFA_PYTHON_371(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (((ch>='0'&&ch<='9')||((ch>='A'&&ch<='Z')||((ch== '_')||(ch>='a'&&ch<='z'))))||(ch>=128&&checkIntervals(NFA_MOVES_PYTHON_371, ch))) {
                nextStates.set(371);
                if (validTypes.contains(NAME)) return NAME;
            }
            return null;
        }

        static TokenType NFA_PYTHON_372(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(413);
            }
            return null;
        }

        static TokenType NFA_PYTHON_373(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_374(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '>') {
                if (validTypes.contains(RARROW)) return RARROW;
            }
            return null;
        }

        static TokenType NFA_PYTHON_375(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'm') {
                nextStates.set(168);
            }
            return null;
        }

        static TokenType NFA_PYTHON_376(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(244);
            }
            return null;
        }

        static TokenType NFA_PYTHON_377(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_378(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_379(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(163);
            }
            return null;
        }

        static TokenType NFA_PYTHON_380(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(SLASHASSIGN)) return SLASHASSIGN;
            }
            return null;
        }

        static TokenType NFA_PYTHON_381(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(199);
            }
            return null;
        }

        static TokenType NFA_PYTHON_382(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '*') {
                nextStates.set(210);
            }
            return null;
        }

        static TokenType NFA_PYTHON_383(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'N') {
                nextStates.set(376);
            }
            return null;
        }

        static TokenType NFA_PYTHON_384(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                if (validTypes.contains(_ASSERT)) return _ASSERT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_385(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                if (validTypes.contains(GE)) return GE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_386(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                if (validTypes.contains(FALSE)) return FALSE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_387(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(230);
            }
            return null;
        }

        static TokenType NFA_PYTHON_388(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_389(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'n') {
                nextStates.set(140);
            }
            return null;
        }

        static TokenType NFA_PYTHON_390(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='\t')||(ch>=0xb)) {
                nextStates.set(390);
                if (validTypes.contains(COMMENT)) return COMMENT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_391(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ',') {
                if (validTypes.contains(COMMA)) return COMMA;
            }
            return null;
        }

        static TokenType NFA_PYTHON_392(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(214);
            }
            return null;
        }

        static TokenType NFA_PYTHON_393(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '+') {
                if (validTypes.contains(PLUS)) return PLUS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_394(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'k') {
                if (validTypes.contains(BREAK)) return BREAK;
            }
            return null;
        }

        static TokenType NFA_PYTHON_395(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_396(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                nextStates.set(211);
            }
            return null;
        }

        static TokenType NFA_PYTHON_397(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(190);
            }
            return null;
        }

        static TokenType NFA_PYTHON_398(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(386);
            }
            return null;
        }

        static TokenType NFA_PYTHON_399(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(325);
            }
            return null;
        }

        static TokenType NFA_PYTHON_400(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ';') {
                if (validTypes.contains(SEMICOLON)) return SEMICOLON;
            }
            return null;
        }

        static TokenType NFA_PYTHON_401(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '>') {
                if (validTypes.contains(GT)) return GT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_402(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_403(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_404(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'm') {
                nextStates.set(129);
            }
            return null;
        }

        static TokenType NFA_PYTHON_405(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_406(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_407(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                if (validTypes.contains(OR)) return OR;
            }
            return null;
        }

        static TokenType NFA_PYTHON_408(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(72);
            }
            return null;
        }

        static TokenType NFA_PYTHON_409(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_410(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_411(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_412(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_413(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'm') {
                nextStates.set(235);
            }
            return null;
        }

        static TokenType NFA_PYTHON_414(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ':') {
                if (validTypes.contains(COLON)) return COLON;
            }
            return null;
        }

        static TokenType NFA_PYTHON_415(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_416(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(251);
            }
            return null;
        }

        static TokenType NFA_PYTHON_417(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(372);
            }
            return null;
        }

        static TokenType NFA_PYTHON_418(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(334);
            }
            return null;
        }

        static TokenType NFA_PYTHON_419(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '~') {
                if (validTypes.contains(TILDE)) return TILDE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_420(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(170);
            }
            return null;
        }

        static TokenType NFA_PYTHON_421(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '|') {
                nextStates.set(256);
            }
            return null;
        }

        static TokenType NFA_PYTHON_422(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '?') {
                nextStates.set(238);
            }
            return null;
        }

        static TokenType NFA_PYTHON_423(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '-') {
                nextStates.set(374);
            }
            return null;
        }

        static TokenType NFA_PYTHON_424(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(218);
            }
            return null;
        }

        static TokenType NFA_PYTHON_425(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 't') {
                if (validTypes.contains(IMPORT)) return IMPORT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_426(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>=0x0) {
                nextStates.set(63);
            }
            return null;
        }

        static TokenType NFA_PYTHON_427(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_428(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_429(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'u') {
                nextStates.set(114);
            }
            return null;
        }

        static TokenType NFA_PYTHON_430(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(86);
            }
            return null;
        }

        static TokenType NFA_PYTHON_431(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '%') {
                nextStates.set(241);
            }
            return null;
        }

        static TokenType NFA_PYTHON_432(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 's') {
                nextStates.set(118);
            }
            return null;
        }

        static TokenType NFA_PYTHON_433(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'd') {
                nextStates.set(123);
            }
            return null;
        }

        static TokenType NFA_PYTHON_434(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_435(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'o') {
                nextStates.set(223);
            }
            return null;
        }

        static TokenType NFA_PYTHON_436(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(321);
            }
            return null;
        }

        static TokenType NFA_PYTHON_437(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(130);
            }
            return null;
        }

        static TokenType NFA_PYTHON_438(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(40);
            }
            return null;
        }

        static TokenType NFA_PYTHON_439(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_440(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_441(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '&') {
                if (validTypes.contains(BIT_AND)) return BIT_AND;
            }
            return null;
        }

        static TokenType NFA_PYTHON_442(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '=') {
                nextStates.set(153);
            }
            return null;
        }

        static TokenType NFA_PYTHON_443(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_444(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>='A'&&ch<='Z')||((ch== '_')||((ch>='a'&&ch<='z')||(ch>=0x80&&ch<=0xffff)))) {
                nextStates.set(342);
                if (validTypes.contains(BADNAME)) return BADNAME;
            }
            return null;
        }

        static TokenType NFA_PYTHON_445(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '[') {
                if (validTypes.contains(LBRACKET)) return LBRACKET;
            }
            return null;
        }

        static TokenType NFA_PYTHON_446(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(171);
            }
            return null;
        }

        static TokenType NFA_PYTHON_447(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(359);
            }
            return null;
        }

        static TokenType NFA_PYTHON_448(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'i') {
                nextStates.set(189);
            }
            return null;
        }

        static TokenType NFA_PYTHON_449(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '/') {
                nextStates.set(380);
            }
            return null;
        }

        static TokenType NFA_PYTHON_450(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'g') {
                nextStates.set(110);
            }
            return null;
        }

        static TokenType NFA_PYTHON_451(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'w') {
                nextStates.set(236);
            }
            return null;
        }

        static TokenType NFA_PYTHON_452(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_453(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                if (validTypes.contains(DEF)) return DEF;
            }
            return null;
        }

        static TokenType NFA_PYTHON_454(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(432);
            }
            return null;
        }

        static TokenType NFA_PYTHON_455(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(121);
            }
            return null;
        }

        static TokenType NFA_PYTHON_456(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'a') {
                nextStates.set(155);
            }
            return null;
        }

        static TokenType NFA_PYTHON_457(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                nextStates.set(240);
            }
            return null;
        }

        static TokenType NFA_PYTHON_458(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                if (validTypes.contains(ELLIPSIS)) return ELLIPSIS;
            }
            return null;
        }

        static TokenType NFA_PYTHON_459(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_460(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'l') {
                if (validTypes.contains(DEL)) return DEL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_461(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ':') {
                nextStates.set(219);
            }
            return null;
        }

        static TokenType NFA_PYTHON_462(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'e') {
                nextStates.set(120);
            }
            return null;
        }

        static TokenType NFA_PYTHON_463(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_464(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(237);
            }
            return null;
        }

        static TokenType NFA_PYTHON_465(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_466(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(388);
            }
            return null;
        }

        static TokenType NFA_PYTHON_467(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(229);
            }
            return null;
        }

        static TokenType NFA_PYTHON_468(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(117);
            }
            return null;
        }

        static TokenType NFA_PYTHON_469(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(OCTNUMBER)) return OCTNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_470(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(42);
            }
            return null;
        }

        static TokenType NFA_PYTHON_471(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(412);
            }
            return null;
        }

        static TokenType NFA_PYTHON_472(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(576);
            }
            return null;
        }

        static TokenType NFA_PYTHON_473(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(5);
            }
            return null;
        }

        static TokenType NFA_PYTHON_474(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_475(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(270);
            }
            return null;
        }

        static TokenType NFA_PYTHON_476(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(340);
            }
            return null;
        }

        static TokenType NFA_PYTHON_477(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(133);
            }
            return null;
        }

        static TokenType NFA_PYTHON_478(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_479(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(459);
            }
            return null;
        }

        static TokenType NFA_PYTHON_480(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                nextStates.set(44);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_481(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(95);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_482(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(490);
            }
            return null;
        }

        static TokenType NFA_PYTHON_483(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(174);
            }
            return null;
        }

        static TokenType NFA_PYTHON_484(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(312);
            }
            return null;
        }

        static TokenType NFA_PYTHON_485(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(284);
            }
            return null;
        }

        static TokenType NFA_PYTHON_486(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(51);
            }
            return null;
        }

        static TokenType NFA_PYTHON_487(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(514);
            }
            return null;
        }

        static TokenType NFA_PYTHON_488(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(66);
            }
            return null;
        }

        static TokenType NFA_PYTHON_489(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0') {
                nextStates.set(489);
                if (validTypes.contains(DECNUMBER)) return DECNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_490(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(87);
                if (validTypes.contains(DECNUMBER)) return DECNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_491(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(436);
            }
            return null;
        }

        static TokenType NFA_PYTHON_492(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(83);
            }
            return null;
        }

        static TokenType NFA_PYTHON_493(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_494(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_495(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(402);
            }
            return null;
        }

        static TokenType NFA_PYTHON_496(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(14);
            }
            return null;
        }

        static TokenType NFA_PYTHON_497(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(16);
            }
            return null;
        }

        static TokenType NFA_PYTHON_498(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(82);
            }
            return null;
        }

        static TokenType NFA_PYTHON_499(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(82);
            }
            return null;
        }

        static TokenType NFA_PYTHON_500(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_501(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(64);
            }
            return null;
        }

        static TokenType NFA_PYTHON_502(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(54);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_503(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(63);
            }
            return null;
        }

        static TokenType NFA_PYTHON_504(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(3);
            }
            return null;
        }

        static TokenType NFA_PYTHON_505(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(4);
                if (validTypes.contains(BADDECNUMBER)) return BADDECNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_506(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(320);
            }
            return null;
        }

        static TokenType NFA_PYTHON_507(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(316);
            }
            return null;
        }

        static TokenType NFA_PYTHON_508(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(93);
            }
            return null;
        }

        static TokenType NFA_PYTHON_509(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(626);
            }
            return null;
        }

        static TokenType NFA_PYTHON_510(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(132);
            }
            return null;
        }

        static TokenType NFA_PYTHON_511(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(22);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_512(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(496);
            }
            return null;
        }

        static TokenType NFA_PYTHON_513(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(72);
            }
            return null;
        }

        static TokenType NFA_PYTHON_514(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
                nextStates.set(98);
                if (validTypes.contains(HEXNUMBER)) return HEXNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_515(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(116);
            }
            return null;
        }

        static TokenType NFA_PYTHON_516(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_517(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(47);
            }
            return null;
        }

        static TokenType NFA_PYTHON_518(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(288);
            }
            return null;
        }

        static TokenType NFA_PYTHON_519(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(626);
            }
            return null;
        }

        static TokenType NFA_PYTHON_520(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(434);
            }
            return null;
        }

        static TokenType NFA_PYTHON_521(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                nextStates.set(438);
            }
            return null;
        }

        static TokenType NFA_PYTHON_522(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ' ') {
                nextStates.set(56);
            }
            return null;
        }

        static TokenType NFA_PYTHON_523(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(194);
            }
            return null;
        }

        static TokenType NFA_PYTHON_524(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(69);
            }
            return null;
        }

        static TokenType NFA_PYTHON_525(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'U') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_526(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(678);
            }
            return null;
        }

        static TokenType NFA_PYTHON_527(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\f') {
                nextStates.set(53);
                if (validTypes.contains(SPACE)) return SPACE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_528(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(79);
            }
            return null;
        }

        static TokenType NFA_PYTHON_529(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(341);
            }
            return null;
        }

        static TokenType NFA_PYTHON_530(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(37);
            }
            return null;
        }

        static TokenType NFA_PYTHON_531(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\f') {
                nextStates.set(56);
            }
            return null;
        }

        static TokenType NFA_PYTHON_532(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(443);
            }
            return null;
        }

        static TokenType NFA_PYTHON_533(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(499);
            }
            return null;
        }

        static TokenType NFA_PYTHON_534(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(19);
            }
            return null;
        }

        static TokenType NFA_PYTHON_535(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0') {
                nextStates.set(38);
            }
            return null;
        }

        static TokenType NFA_PYTHON_536(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(84);
            }
            return null;
        }

        static TokenType NFA_PYTHON_537(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='1'&&ch<='9') {
                nextStates.set(37);
            }
            return null;
        }

        static TokenType NFA_PYTHON_538(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(23);
            }
            return null;
        }

        static TokenType NFA_PYTHON_539(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(534);
            }
            return null;
        }

        static TokenType NFA_PYTHON_540(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(602);
            }
            return null;
        }

        static TokenType NFA_PYTHON_541(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(73);
            }
            return null;
        }

        static TokenType NFA_PYTHON_542(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                nextStates.set(292);
            }
            return null;
        }

        static TokenType NFA_PYTHON_543(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(666);
            }
            return null;
        }

        static TokenType NFA_PYTHON_544(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(630);
            }
            return null;
        }

        static TokenType NFA_PYTHON_545(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_546(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_547(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(86);
            }
            return null;
        }

        static TokenType NFA_PYTHON_548(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(167);
            }
            return null;
        }

        static TokenType NFA_PYTHON_549(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(597);
            }
            return null;
        }

        static TokenType NFA_PYTHON_550(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(58);
            }
            return null;
        }

        static TokenType NFA_PYTHON_551(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0'||ch== '1') {
                nextStates.set(34);
                if (validTypes.contains(BINNUMBER)) return BINNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_552(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='7') {
                nextStates.set(18);
                if (validTypes.contains(OCTNUMBER)) return OCTNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_553(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(33);
            }
            return null;
        }

        static TokenType NFA_PYTHON_554(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(201);
            }
            return null;
        }

        static TokenType NFA_PYTHON_555(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'U') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_556(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(146);
            }
            return null;
        }

        static TokenType NFA_PYTHON_557(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(233);
            }
            return null;
        }

        static TokenType NFA_PYTHON_558(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(261);
            }
            return null;
        }

        static TokenType NFA_PYTHON_559(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(428);
            }
            return null;
        }

        static TokenType NFA_PYTHON_560(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(108);
            }
            return null;
        }

        static TokenType NFA_PYTHON_561(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(177);
            }
            return null;
        }

        static TokenType NFA_PYTHON_562(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(363);
            }
            return null;
        }

        static TokenType NFA_PYTHON_563(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(415);
            }
            return null;
        }

        static TokenType NFA_PYTHON_564(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(135);
            }
            return null;
        }

        static TokenType NFA_PYTHON_565(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_566(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_567(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(96);
            }
            return null;
        }

        static TokenType NFA_PYTHON_568(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(677);
            }
            return null;
        }

        static TokenType NFA_PYTHON_569(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(262);
            }
            return null;
        }

        static TokenType NFA_PYTHON_570(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(329);
            }
            return null;
        }

        static TokenType NFA_PYTHON_571(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(180);
            }
            return null;
        }

        static TokenType NFA_PYTHON_572(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(122);
            }
            return null;
        }

        static TokenType NFA_PYTHON_573(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(452);
            }
            return null;
        }

        static TokenType NFA_PYTHON_574(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(93);
            }
            return null;
        }

        static TokenType NFA_PYTHON_575(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(DECNUMBER)) return DECNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_576(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(44);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_577(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(299);
            }
            return null;
        }

        static TokenType NFA_PYTHON_578(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_579(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(62);
            }
            return null;
        }

        static TokenType NFA_PYTHON_580(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(439);
            }
            return null;
        }

        static TokenType NFA_PYTHON_581(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(552);
            }
            return null;
        }

        static TokenType NFA_PYTHON_582(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_583(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='1'&&ch<='9') {
                nextStates.set(69);
            }
            return null;
        }

        static TokenType NFA_PYTHON_584(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(498);
            }
            return null;
        }

        static TokenType NFA_PYTHON_585(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(29);
            }
            return null;
        }

        static TokenType NFA_PYTHON_586(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(280);
            }
            return null;
        }

        static TokenType NFA_PYTHON_587(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(411);
            }
            return null;
        }

        static TokenType NFA_PYTHON_588(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(348);
            }
            return null;
        }

        static TokenType NFA_PYTHON_589(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '"') {
                nextStates.set(36);
            }
            return null;
        }

        static TokenType NFA_PYTHON_590(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(14);
            }
            return null;
        }

        static TokenType NFA_PYTHON_591(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(373);
            }
            return null;
        }

        static TokenType NFA_PYTHON_592(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0') {
                nextStates.set(90);
            }
            return null;
        }

        static TokenType NFA_PYTHON_593(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'B')||(ch== 'b')) {
                nextStates.set(34);
                if (validTypes.contains(BINNUMBER)) return BINNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_594(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(502);
            }
            return null;
        }

        static TokenType NFA_PYTHON_595(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(440);
            }
            return null;
        }

        static TokenType NFA_PYTHON_596(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(590);
            }
            return null;
        }

        static TokenType NFA_PYTHON_597(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(22);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_598(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(517);
            }
            return null;
        }

        static TokenType NFA_PYTHON_599(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '.') {
                nextStates.set(19);
            }
            return null;
        }

        static TokenType NFA_PYTHON_600(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(331);
            }
            return null;
        }

        static TokenType NFA_PYTHON_601(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(511);
            }
            return null;
        }

        static TokenType NFA_PYTHON_602(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(40);
            }
            return null;
        }

        static TokenType NFA_PYTHON_603(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(405);
            }
            return null;
        }

        static TokenType NFA_PYTHON_604(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BADDECNUMBER)) return BADDECNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_605(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(10);
            }
            return null;
        }

        static TokenType NFA_PYTHON_606(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(247);
            }
            return null;
        }

        static TokenType NFA_PYTHON_607(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'u') {
                nextStates.set(528);
            }
            return null;
        }

        static TokenType NFA_PYTHON_608(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_609(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(221);
            }
            return null;
        }

        static TokenType NFA_PYTHON_610(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(92);
            }
            return null;
        }

        static TokenType NFA_PYTHON_611(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'u') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_612(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(669);
            }
            return null;
        }

        static TokenType NFA_PYTHON_613(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(138);
            }
            return null;
        }

        static TokenType NFA_PYTHON_614(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(420);
            }
            return null;
        }

        static TokenType NFA_PYTHON_615(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(232);
            }
            return null;
        }

        static TokenType NFA_PYTHON_616(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'U') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_617(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(427);
            }
            return null;
        }

        static TokenType NFA_PYTHON_618(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\n') {
                if (validTypes.contains(NEWLINE)) return NEWLINE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_619(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(79);
            }
            return null;
        }

        static TokenType NFA_PYTHON_620(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_621(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'u') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_622(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(403);
            }
            return null;
        }

        static TokenType NFA_PYTHON_623(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(109);
            }
            return null;
        }

        static TokenType NFA_PYTHON_624(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_625(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(49);
            }
            return null;
        }

        static TokenType NFA_PYTHON_626(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) return COMPLEX;
            }
            return null;
        }

        static TokenType NFA_PYTHON_627(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(33);
            }
            return null;
        }

        static TokenType NFA_PYTHON_628(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_629(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(409);
            }
            return null;
        }

        static TokenType NFA_PYTHON_630(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(47);
            }
            return null;
        }

        static TokenType NFA_PYTHON_631(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(426);
            }
            return null;
        }

        static TokenType NFA_PYTHON_632(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(134);
            }
            return null;
        }

        static TokenType NFA_PYTHON_633(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(410);
            }
            return null;
        }

        static TokenType NFA_PYTHON_634(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(530);
            }
            return null;
        }

        static TokenType NFA_PYTHON_635(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(481);
            }
            return null;
        }

        static TokenType NFA_PYTHON_636(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(78);
            }
            return null;
        }

        static TokenType NFA_PYTHON_637(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(310);
            }
            return null;
        }

        static TokenType NFA_PYTHON_638(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(54);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_639(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(524);
            }
            return null;
        }

        static TokenType NFA_PYTHON_640(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(364);
            }
            return null;
        }

        static TokenType NFA_PYTHON_641(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(301);
            }
            return null;
        }

        static TokenType NFA_PYTHON_642(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'b') {
                nextStates.set(408);
            }
            return null;
        }

        static TokenType NFA_PYTHON_643(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(HEXNUMBER)) return HEXNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_644(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(377);
            }
            return null;
        }

        static TokenType NFA_PYTHON_645(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_646(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(113);
            }
            return null;
        }

        static TokenType NFA_PYTHON_647(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(349);
            }
            return null;
        }

        static TokenType NFA_PYTHON_648(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(330);
            }
            return null;
        }

        static TokenType NFA_PYTHON_649(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(551);
            }
            return null;
        }

        static TokenType NFA_PYTHON_650(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(226);
            }
            return null;
        }

        static TokenType NFA_PYTHON_651(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '0') {
                nextStates.set(80);
            }
            return null;
        }

        static TokenType NFA_PYTHON_652(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(553);
            }
            return null;
        }

        static TokenType NFA_PYTHON_653(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BINNUMBER)) return BINNUMBER;
            }
            return null;
        }

        static TokenType NFA_PYTHON_654(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'r') {
                nextStates.set(265);
            }
            return null;
        }

        static TokenType NFA_PYTHON_655(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(358);
            }
            return null;
        }

        static TokenType NFA_PYTHON_656(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) return STRING_LITERAL;
            }
            return null;
        }

        static TokenType NFA_PYTHON_657(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'U') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_658(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_659(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'B') {
                nextStates.set(395);
            }
            return null;
        }

        static TokenType NFA_PYTHON_660(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'u') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_661(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(202);
            }
            return null;
        }

        static TokenType NFA_PYTHON_662(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(296);
            }
            return null;
        }

        static TokenType NFA_PYTHON_663(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(198);
            }
            return null;
        }

        static TokenType NFA_PYTHON_664(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(92);
            }
            return null;
        }

        static TokenType NFA_PYTHON_665(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\'') {
                nextStates.set(399);
            }
            return null;
        }

        static TokenType NFA_PYTHON_666(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(70);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_667(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== ' ') {
                nextStates.set(53);
                if (validTypes.contains(SPACE)) return SPACE;
            }
            return null;
        }

        static TokenType NFA_PYTHON_668(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '\\') {
                nextStates.set(369);
            }
            return null;
        }

        static TokenType NFA_PYTHON_669(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(70);
                if (validTypes.contains(FLOAT)) return FLOAT;
            }
            return null;
        }

        static TokenType NFA_PYTHON_670(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(505);
            }
            return null;
        }

        static TokenType NFA_PYTHON_671(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(250);
            }
            return null;
        }

        static TokenType NFA_PYTHON_672(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'f') {
                nextStates.set(464);
            }
            return null;
        }

        static TokenType NFA_PYTHON_673(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(225);
            }
            return null;
        }

        static TokenType NFA_PYTHON_674(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(378);
            }
            return null;
        }

        static TokenType NFA_PYTHON_675(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'F') {
                nextStates.set(192);
            }
            return null;
        }

        static TokenType NFA_PYTHON_676(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(112);
            }
            return null;
        }

        static TokenType NFA_PYTHON_677(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(3);
            }
            return null;
        }

        static TokenType NFA_PYTHON_678(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='0'&&ch<='9') {
                nextStates.set(58);
            }
            return null;
        }

        static TokenType NFA_PYTHON_679(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(664);
            }
            return null;
        }

        static TokenType NFA_PYTHON_680(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(638);
            }
            return null;
        }

        static TokenType NFA_PYTHON_681(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== '_') {
                nextStates.set(574);
            }
            return null;
        }

        static TokenType NFA_PYTHON_682(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch== 'R') {
                nextStates.set(491);
            }
            return null;
        }

        static TokenType NFA_PYTHON_683(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            if (ch>='1'&&ch<='9') {
                nextStates.set(87);
                if (validTypes.contains(DECNUMBER)) return DECNUMBER;
            }
            return null;
        }

        static private void NFA_FUNCTIONS_init() {
            NfaFunction[] functions= new NfaFunction[684];
            functions[0]= PYTHON::NFA_COMPOSITE_PYTHON_0;
            functions[1]= PYTHON::NFA_COMPOSITE_PYTHON_1;
            functions[2]= PYTHON::NFA_COMPOSITE_PYTHON_2;
            functions[3]= PYTHON::NFA_COMPOSITE_PYTHON_3;
            functions[4]= PYTHON::NFA_COMPOSITE_PYTHON_4;
            functions[5]= PYTHON::NFA_COMPOSITE_PYTHON_5;
            functions[6]= PYTHON::NFA_COMPOSITE_PYTHON_6;
            functions[7]= PYTHON::NFA_COMPOSITE_PYTHON_7;
            functions[8]= PYTHON::NFA_COMPOSITE_PYTHON_8;
            functions[9]= PYTHON::NFA_COMPOSITE_PYTHON_9;
            functions[10]= PYTHON::NFA_COMPOSITE_PYTHON_10;
            functions[11]= PYTHON::NFA_COMPOSITE_PYTHON_11;
            functions[12]= PYTHON::NFA_COMPOSITE_PYTHON_12;
            functions[13]= PYTHON::NFA_COMPOSITE_PYTHON_13;
            functions[14]= PYTHON::NFA_COMPOSITE_PYTHON_14;
            functions[15]= PYTHON::NFA_COMPOSITE_PYTHON_15;
            functions[16]= PYTHON::NFA_COMPOSITE_PYTHON_16;
            functions[17]= PYTHON::NFA_COMPOSITE_PYTHON_17;
            functions[18]= PYTHON::NFA_COMPOSITE_PYTHON_18;
            functions[19]= PYTHON::NFA_COMPOSITE_PYTHON_19;
            functions[20]= PYTHON::NFA_COMPOSITE_PYTHON_20;
            functions[21]= PYTHON::NFA_COMPOSITE_PYTHON_21;
            functions[22]= PYTHON::NFA_COMPOSITE_PYTHON_22;
            functions[23]= PYTHON::NFA_COMPOSITE_PYTHON_23;
            functions[24]= PYTHON::NFA_COMPOSITE_PYTHON_24;
            functions[25]= PYTHON::NFA_COMPOSITE_PYTHON_25;
            functions[26]= PYTHON::NFA_COMPOSITE_PYTHON_26;
            functions[27]= PYTHON::NFA_COMPOSITE_PYTHON_27;
            functions[28]= PYTHON::NFA_COMPOSITE_PYTHON_28;
            functions[29]= PYTHON::NFA_COMPOSITE_PYTHON_29;
            functions[30]= PYTHON::NFA_COMPOSITE_PYTHON_30;
            functions[31]= PYTHON::NFA_COMPOSITE_PYTHON_31;
            functions[32]= PYTHON::NFA_COMPOSITE_PYTHON_32;
            functions[33]= PYTHON::NFA_COMPOSITE_PYTHON_33;
            functions[34]= PYTHON::NFA_COMPOSITE_PYTHON_34;
            functions[35]= PYTHON::NFA_COMPOSITE_PYTHON_35;
            functions[36]= PYTHON::NFA_COMPOSITE_PYTHON_36;
            functions[37]= PYTHON::NFA_COMPOSITE_PYTHON_37;
            functions[38]= PYTHON::NFA_COMPOSITE_PYTHON_38;
            functions[39]= PYTHON::NFA_COMPOSITE_PYTHON_39;
            functions[40]= PYTHON::NFA_COMPOSITE_PYTHON_40;
            functions[41]= PYTHON::NFA_COMPOSITE_PYTHON_41;
            functions[42]= PYTHON::NFA_COMPOSITE_PYTHON_42;
            functions[43]= PYTHON::NFA_COMPOSITE_PYTHON_43;
            functions[44]= PYTHON::NFA_COMPOSITE_PYTHON_44;
            functions[45]= PYTHON::NFA_COMPOSITE_PYTHON_45;
            functions[46]= PYTHON::NFA_COMPOSITE_PYTHON_46;
            functions[47]= PYTHON::NFA_COMPOSITE_PYTHON_47;
            functions[48]= PYTHON::NFA_COMPOSITE_PYTHON_48;
            functions[49]= PYTHON::NFA_COMPOSITE_PYTHON_49;
            functions[50]= PYTHON::NFA_COMPOSITE_PYTHON_50;
            functions[51]= PYTHON::NFA_COMPOSITE_PYTHON_51;
            functions[52]= PYTHON::NFA_COMPOSITE_PYTHON_52;
            functions[53]= PYTHON::NFA_COMPOSITE_PYTHON_53;
            functions[54]= PYTHON::NFA_COMPOSITE_PYTHON_54;
            functions[55]= PYTHON::NFA_COMPOSITE_PYTHON_55;
            functions[56]= PYTHON::NFA_COMPOSITE_PYTHON_56;
            functions[57]= PYTHON::NFA_COMPOSITE_PYTHON_57;
            functions[58]= PYTHON::NFA_COMPOSITE_PYTHON_58;
            functions[59]= PYTHON::NFA_COMPOSITE_PYTHON_59;
            functions[60]= PYTHON::NFA_COMPOSITE_PYTHON_60;
            functions[61]= PYTHON::NFA_COMPOSITE_PYTHON_61;
            functions[62]= PYTHON::NFA_COMPOSITE_PYTHON_62;
            functions[63]= PYTHON::NFA_COMPOSITE_PYTHON_63;
            functions[64]= PYTHON::NFA_COMPOSITE_PYTHON_64;
            functions[65]= PYTHON::NFA_COMPOSITE_PYTHON_65;
            functions[66]= PYTHON::NFA_COMPOSITE_PYTHON_66;
            functions[67]= PYTHON::NFA_COMPOSITE_PYTHON_67;
            functions[68]= PYTHON::NFA_COMPOSITE_PYTHON_68;
            functions[69]= PYTHON::NFA_COMPOSITE_PYTHON_69;
            functions[70]= PYTHON::NFA_COMPOSITE_PYTHON_70;
            functions[71]= PYTHON::NFA_COMPOSITE_PYTHON_71;
            functions[72]= PYTHON::NFA_COMPOSITE_PYTHON_72;
            functions[73]= PYTHON::NFA_COMPOSITE_PYTHON_73;
            functions[74]= PYTHON::NFA_COMPOSITE_PYTHON_74;
            functions[75]= PYTHON::NFA_COMPOSITE_PYTHON_75;
            functions[76]= PYTHON::NFA_COMPOSITE_PYTHON_76;
            functions[77]= PYTHON::NFA_COMPOSITE_PYTHON_77;
            functions[78]= PYTHON::NFA_COMPOSITE_PYTHON_78;
            functions[79]= PYTHON::NFA_COMPOSITE_PYTHON_79;
            functions[80]= PYTHON::NFA_COMPOSITE_PYTHON_80;
            functions[81]= PYTHON::NFA_COMPOSITE_PYTHON_81;
            functions[82]= PYTHON::NFA_COMPOSITE_PYTHON_82;
            functions[83]= PYTHON::NFA_COMPOSITE_PYTHON_83;
            functions[84]= PYTHON::NFA_COMPOSITE_PYTHON_84;
            functions[85]= PYTHON::NFA_COMPOSITE_PYTHON_85;
            functions[86]= PYTHON::NFA_COMPOSITE_PYTHON_86;
            functions[87]= PYTHON::NFA_COMPOSITE_PYTHON_87;
            functions[88]= PYTHON::NFA_COMPOSITE_PYTHON_88;
            functions[89]= PYTHON::NFA_COMPOSITE_PYTHON_89;
            functions[90]= PYTHON::NFA_COMPOSITE_PYTHON_90;
            functions[91]= PYTHON::NFA_COMPOSITE_PYTHON_91;
            functions[92]= PYTHON::NFA_COMPOSITE_PYTHON_92;
            functions[93]= PYTHON::NFA_COMPOSITE_PYTHON_93;
            functions[94]= PYTHON::NFA_COMPOSITE_PYTHON_94;
            functions[95]= PYTHON::NFA_COMPOSITE_PYTHON_95;
            functions[96]= PYTHON::NFA_COMPOSITE_PYTHON_96;
            functions[97]= PYTHON::NFA_COMPOSITE_PYTHON_97;
            functions[98]= PYTHON::NFA_COMPOSITE_PYTHON_98;
            functions[99]= PYTHON::NFA_PYTHON_99;
            functions[100]= PYTHON::NFA_PYTHON_100;
            functions[101]= PYTHON::NFA_PYTHON_101;
            functions[102]= PYTHON::NFA_PYTHON_102;
            functions[103]= PYTHON::NFA_PYTHON_103;
            functions[104]= PYTHON::NFA_PYTHON_104;
            functions[105]= PYTHON::NFA_PYTHON_105;
            functions[106]= PYTHON::NFA_PYTHON_106;
            functions[107]= PYTHON::NFA_PYTHON_107;
            functions[108]= PYTHON::NFA_PYTHON_108;
            functions[109]= PYTHON::NFA_PYTHON_109;
            functions[110]= PYTHON::NFA_PYTHON_110;
            functions[111]= PYTHON::NFA_PYTHON_111;
            functions[112]= PYTHON::NFA_PYTHON_112;
            functions[113]= PYTHON::NFA_PYTHON_113;
            functions[114]= PYTHON::NFA_PYTHON_114;
            functions[115]= PYTHON::NFA_PYTHON_115;
            functions[116]= PYTHON::NFA_PYTHON_116;
            functions[117]= PYTHON::NFA_PYTHON_117;
            functions[118]= PYTHON::NFA_PYTHON_118;
            functions[119]= PYTHON::NFA_PYTHON_119;
            functions[120]= PYTHON::NFA_PYTHON_120;
            functions[121]= PYTHON::NFA_PYTHON_121;
            functions[122]= PYTHON::NFA_PYTHON_122;
            functions[123]= PYTHON::NFA_PYTHON_123;
            functions[124]= PYTHON::NFA_PYTHON_124;
            functions[125]= PYTHON::NFA_PYTHON_125;
            functions[126]= PYTHON::NFA_PYTHON_126;
            functions[127]= PYTHON::NFA_PYTHON_127;
            functions[128]= PYTHON::NFA_PYTHON_128;
            functions[129]= PYTHON::NFA_PYTHON_129;
            functions[130]= PYTHON::NFA_PYTHON_130;
            functions[131]= PYTHON::NFA_PYTHON_131;
            functions[132]= PYTHON::NFA_PYTHON_132;
            functions[133]= PYTHON::NFA_PYTHON_133;
            functions[134]= PYTHON::NFA_PYTHON_134;
            functions[135]= PYTHON::NFA_PYTHON_135;
            functions[136]= PYTHON::NFA_PYTHON_136;
            functions[137]= PYTHON::NFA_PYTHON_137;
            functions[138]= PYTHON::NFA_PYTHON_138;
            functions[139]= PYTHON::NFA_PYTHON_139;
            functions[140]= PYTHON::NFA_PYTHON_140;
            functions[141]= PYTHON::NFA_PYTHON_141;
            functions[142]= PYTHON::NFA_PYTHON_142;
            functions[143]= PYTHON::NFA_PYTHON_143;
            functions[144]= PYTHON::NFA_PYTHON_144;
            functions[145]= PYTHON::NFA_PYTHON_145;
            functions[146]= PYTHON::NFA_PYTHON_146;
            functions[147]= PYTHON::NFA_PYTHON_147;
            functions[148]= PYTHON::NFA_PYTHON_148;
            functions[149]= PYTHON::NFA_PYTHON_149;
            functions[150]= PYTHON::NFA_PYTHON_150;
            functions[151]= PYTHON::NFA_PYTHON_151;
            functions[152]= PYTHON::NFA_PYTHON_152;
            functions[153]= PYTHON::NFA_PYTHON_153;
            functions[154]= PYTHON::NFA_PYTHON_154;
            functions[155]= PYTHON::NFA_PYTHON_155;
            functions[156]= PYTHON::NFA_PYTHON_156;
            functions[157]= PYTHON::NFA_PYTHON_157;
            functions[158]= PYTHON::NFA_PYTHON_158;
            functions[159]= PYTHON::NFA_PYTHON_159;
            functions[160]= PYTHON::NFA_PYTHON_160;
            functions[161]= PYTHON::NFA_PYTHON_161;
            functions[162]= PYTHON::NFA_PYTHON_162;
            functions[163]= PYTHON::NFA_PYTHON_163;
            functions[164]= PYTHON::NFA_PYTHON_164;
            functions[165]= PYTHON::NFA_PYTHON_165;
            functions[166]= PYTHON::NFA_PYTHON_166;
            functions[167]= PYTHON::NFA_PYTHON_167;
            functions[168]= PYTHON::NFA_PYTHON_168;
            functions[169]= PYTHON::NFA_PYTHON_169;
            functions[170]= PYTHON::NFA_PYTHON_170;
            functions[171]= PYTHON::NFA_PYTHON_171;
            functions[172]= PYTHON::NFA_PYTHON_172;
            functions[173]= PYTHON::NFA_PYTHON_173;
            functions[174]= PYTHON::NFA_PYTHON_174;
            functions[175]= PYTHON::NFA_PYTHON_175;
            functions[176]= PYTHON::NFA_PYTHON_176;
            functions[177]= PYTHON::NFA_PYTHON_177;
            functions[178]= PYTHON::NFA_PYTHON_178;
            functions[179]= PYTHON::NFA_PYTHON_179;
            functions[180]= PYTHON::NFA_PYTHON_180;
            functions[181]= PYTHON::NFA_PYTHON_181;
            functions[182]= PYTHON::NFA_PYTHON_182;
            functions[183]= PYTHON::NFA_PYTHON_183;
            functions[184]= PYTHON::NFA_PYTHON_184;
            functions[185]= PYTHON::NFA_PYTHON_185;
            functions[186]= PYTHON::NFA_PYTHON_186;
            functions[187]= PYTHON::NFA_PYTHON_187;
            functions[188]= PYTHON::NFA_PYTHON_188;
            functions[189]= PYTHON::NFA_PYTHON_189;
            functions[190]= PYTHON::NFA_PYTHON_190;
            functions[191]= PYTHON::NFA_PYTHON_191;
            functions[192]= PYTHON::NFA_PYTHON_192;
            functions[193]= PYTHON::NFA_PYTHON_193;
            functions[194]= PYTHON::NFA_PYTHON_194;
            functions[195]= PYTHON::NFA_PYTHON_195;
            functions[196]= PYTHON::NFA_PYTHON_196;
            functions[197]= PYTHON::NFA_PYTHON_197;
            functions[198]= PYTHON::NFA_PYTHON_198;
            functions[199]= PYTHON::NFA_PYTHON_199;
            functions[200]= PYTHON::NFA_PYTHON_200;
            functions[201]= PYTHON::NFA_PYTHON_201;
            functions[202]= PYTHON::NFA_PYTHON_202;
            functions[203]= PYTHON::NFA_PYTHON_203;
            functions[204]= PYTHON::NFA_PYTHON_204;
            functions[205]= PYTHON::NFA_PYTHON_205;
            functions[206]= PYTHON::NFA_PYTHON_206;
            functions[207]= PYTHON::NFA_PYTHON_207;
            functions[208]= PYTHON::NFA_PYTHON_208;
            functions[209]= PYTHON::NFA_PYTHON_209;
            functions[210]= PYTHON::NFA_PYTHON_210;
            functions[211]= PYTHON::NFA_PYTHON_211;
            functions[212]= PYTHON::NFA_PYTHON_212;
            functions[213]= PYTHON::NFA_PYTHON_213;
            functions[214]= PYTHON::NFA_PYTHON_214;
            functions[215]= PYTHON::NFA_PYTHON_215;
            functions[216]= PYTHON::NFA_PYTHON_216;
            functions[217]= PYTHON::NFA_PYTHON_217;
            functions[218]= PYTHON::NFA_PYTHON_218;
            functions[219]= PYTHON::NFA_PYTHON_219;
            functions[220]= PYTHON::NFA_PYTHON_220;
            functions[221]= PYTHON::NFA_PYTHON_221;
            functions[222]= PYTHON::NFA_PYTHON_222;
            functions[223]= PYTHON::NFA_PYTHON_223;
            functions[224]= PYTHON::NFA_PYTHON_224;
            functions[225]= PYTHON::NFA_PYTHON_225;
            functions[226]= PYTHON::NFA_PYTHON_226;
            functions[227]= PYTHON::NFA_PYTHON_227;
            functions[228]= PYTHON::NFA_PYTHON_228;
            functions[229]= PYTHON::NFA_PYTHON_229;
            functions[230]= PYTHON::NFA_PYTHON_230;
            functions[231]= PYTHON::NFA_PYTHON_231;
            functions[232]= PYTHON::NFA_PYTHON_232;
            functions[233]= PYTHON::NFA_PYTHON_233;
            functions[234]= PYTHON::NFA_PYTHON_234;
            functions[235]= PYTHON::NFA_PYTHON_235;
            functions[236]= PYTHON::NFA_PYTHON_236;
            functions[237]= PYTHON::NFA_PYTHON_237;
            functions[238]= PYTHON::NFA_PYTHON_238;
            functions[239]= PYTHON::NFA_PYTHON_239;
            functions[240]= PYTHON::NFA_PYTHON_240;
            functions[241]= PYTHON::NFA_PYTHON_241;
            functions[242]= PYTHON::NFA_PYTHON_242;
            functions[243]= PYTHON::NFA_PYTHON_243;
            functions[244]= PYTHON::NFA_PYTHON_244;
            functions[245]= PYTHON::NFA_PYTHON_245;
            functions[246]= PYTHON::NFA_PYTHON_246;
            functions[247]= PYTHON::NFA_PYTHON_247;
            functions[248]= PYTHON::NFA_PYTHON_248;
            functions[249]= PYTHON::NFA_PYTHON_249;
            functions[250]= PYTHON::NFA_PYTHON_250;
            functions[251]= PYTHON::NFA_PYTHON_251;
            functions[252]= PYTHON::NFA_PYTHON_252;
            functions[253]= PYTHON::NFA_PYTHON_253;
            functions[254]= PYTHON::NFA_PYTHON_254;
            functions[255]= PYTHON::NFA_PYTHON_255;
            functions[256]= PYTHON::NFA_PYTHON_256;
            functions[257]= PYTHON::NFA_PYTHON_257;
            functions[258]= PYTHON::NFA_PYTHON_258;
            functions[259]= PYTHON::NFA_PYTHON_259;
            functions[260]= PYTHON::NFA_PYTHON_260;
            functions[261]= PYTHON::NFA_PYTHON_261;
            functions[262]= PYTHON::NFA_PYTHON_262;
            functions[263]= PYTHON::NFA_PYTHON_263;
            functions[264]= PYTHON::NFA_PYTHON_264;
            functions[265]= PYTHON::NFA_PYTHON_265;
            functions[266]= PYTHON::NFA_PYTHON_266;
            functions[267]= PYTHON::NFA_PYTHON_267;
            functions[268]= PYTHON::NFA_PYTHON_268;
            functions[269]= PYTHON::NFA_PYTHON_269;
            functions[270]= PYTHON::NFA_PYTHON_270;
            functions[271]= PYTHON::NFA_PYTHON_271;
            functions[272]= PYTHON::NFA_PYTHON_272;
            functions[273]= PYTHON::NFA_PYTHON_273;
            functions[274]= PYTHON::NFA_PYTHON_274;
            functions[275]= PYTHON::NFA_PYTHON_275;
            functions[276]= PYTHON::NFA_PYTHON_276;
            functions[277]= PYTHON::NFA_PYTHON_277;
            functions[278]= PYTHON::NFA_PYTHON_278;
            functions[279]= PYTHON::NFA_PYTHON_279;
            functions[280]= PYTHON::NFA_PYTHON_280;
            functions[281]= PYTHON::NFA_PYTHON_281;
            functions[282]= PYTHON::NFA_PYTHON_282;
            functions[283]= PYTHON::NFA_PYTHON_283;
            functions[284]= PYTHON::NFA_PYTHON_284;
            functions[285]= PYTHON::NFA_PYTHON_285;
            functions[286]= PYTHON::NFA_PYTHON_286;
            functions[287]= PYTHON::NFA_PYTHON_287;
            functions[288]= PYTHON::NFA_PYTHON_288;
            functions[289]= PYTHON::NFA_PYTHON_289;
            functions[290]= PYTHON::NFA_PYTHON_290;
            functions[291]= PYTHON::NFA_PYTHON_291;
            functions[292]= PYTHON::NFA_PYTHON_292;
            functions[293]= PYTHON::NFA_PYTHON_293;
            functions[294]= PYTHON::NFA_PYTHON_294;
            functions[295]= PYTHON::NFA_PYTHON_295;
            functions[296]= PYTHON::NFA_PYTHON_296;
            functions[297]= PYTHON::NFA_PYTHON_297;
            functions[298]= PYTHON::NFA_PYTHON_298;
            functions[299]= PYTHON::NFA_PYTHON_299;
            functions[300]= PYTHON::NFA_PYTHON_300;
            functions[301]= PYTHON::NFA_PYTHON_301;
            functions[302]= PYTHON::NFA_PYTHON_302;
            functions[303]= PYTHON::NFA_PYTHON_303;
            functions[304]= PYTHON::NFA_PYTHON_304;
            functions[305]= PYTHON::NFA_PYTHON_305;
            functions[306]= PYTHON::NFA_PYTHON_306;
            functions[307]= PYTHON::NFA_PYTHON_307;
            functions[308]= PYTHON::NFA_PYTHON_308;
            functions[309]= PYTHON::NFA_PYTHON_309;
            functions[310]= PYTHON::NFA_PYTHON_310;
            functions[311]= PYTHON::NFA_PYTHON_311;
            functions[312]= PYTHON::NFA_PYTHON_312;
            functions[313]= PYTHON::NFA_PYTHON_313;
            functions[314]= PYTHON::NFA_PYTHON_314;
            functions[315]= PYTHON::NFA_PYTHON_315;
            functions[316]= PYTHON::NFA_PYTHON_316;
            functions[317]= PYTHON::NFA_PYTHON_317;
            functions[318]= PYTHON::NFA_PYTHON_318;
            functions[319]= PYTHON::NFA_PYTHON_319;
            functions[320]= PYTHON::NFA_PYTHON_320;
            functions[321]= PYTHON::NFA_PYTHON_321;
            functions[322]= PYTHON::NFA_PYTHON_322;
            functions[323]= PYTHON::NFA_PYTHON_323;
            functions[324]= PYTHON::NFA_PYTHON_324;
            functions[325]= PYTHON::NFA_PYTHON_325;
            functions[326]= PYTHON::NFA_PYTHON_326;
            functions[327]= PYTHON::NFA_PYTHON_327;
            functions[328]= PYTHON::NFA_PYTHON_328;
            functions[329]= PYTHON::NFA_PYTHON_329;
            functions[330]= PYTHON::NFA_PYTHON_330;
            functions[331]= PYTHON::NFA_PYTHON_331;
            functions[332]= PYTHON::NFA_PYTHON_332;
            functions[333]= PYTHON::NFA_PYTHON_333;
            functions[334]= PYTHON::NFA_PYTHON_334;
            functions[335]= PYTHON::NFA_PYTHON_335;
            functions[336]= PYTHON::NFA_PYTHON_336;
            functions[337]= PYTHON::NFA_PYTHON_337;
            functions[338]= PYTHON::NFA_PYTHON_338;
            functions[339]= PYTHON::NFA_PYTHON_339;
            functions[340]= PYTHON::NFA_PYTHON_340;
            functions[341]= PYTHON::NFA_PYTHON_341;
            functions[342]= PYTHON::NFA_PYTHON_342;
            functions[343]= PYTHON::NFA_PYTHON_343;
            functions[344]= PYTHON::NFA_PYTHON_344;
            functions[345]= PYTHON::NFA_PYTHON_345;
            functions[346]= PYTHON::NFA_PYTHON_346;
            functions[347]= PYTHON::NFA_PYTHON_347;
            functions[348]= PYTHON::NFA_PYTHON_348;
            functions[349]= PYTHON::NFA_PYTHON_349;
            functions[350]= PYTHON::NFA_PYTHON_350;
            functions[351]= PYTHON::NFA_PYTHON_351;
            functions[352]= PYTHON::NFA_PYTHON_352;
            functions[353]= PYTHON::NFA_PYTHON_353;
            functions[354]= PYTHON::NFA_PYTHON_354;
            functions[355]= PYTHON::NFA_PYTHON_355;
            functions[356]= PYTHON::NFA_PYTHON_356;
            functions[357]= PYTHON::NFA_PYTHON_357;
            functions[358]= PYTHON::NFA_PYTHON_358;
            functions[359]= PYTHON::NFA_PYTHON_359;
            functions[360]= PYTHON::NFA_PYTHON_360;
            functions[361]= PYTHON::NFA_PYTHON_361;
            functions[362]= PYTHON::NFA_PYTHON_362;
            functions[363]= PYTHON::NFA_PYTHON_363;
            functions[364]= PYTHON::NFA_PYTHON_364;
            functions[365]= PYTHON::NFA_PYTHON_365;
            functions[366]= PYTHON::NFA_PYTHON_366;
            functions[367]= PYTHON::NFA_PYTHON_367;
            functions[368]= PYTHON::NFA_PYTHON_368;
            functions[369]= PYTHON::NFA_PYTHON_369;
            functions[370]= PYTHON::NFA_PYTHON_370;
            functions[371]= PYTHON::NFA_PYTHON_371;
            functions[372]= PYTHON::NFA_PYTHON_372;
            functions[373]= PYTHON::NFA_PYTHON_373;
            functions[374]= PYTHON::NFA_PYTHON_374;
            functions[375]= PYTHON::NFA_PYTHON_375;
            functions[376]= PYTHON::NFA_PYTHON_376;
            functions[377]= PYTHON::NFA_PYTHON_377;
            functions[378]= PYTHON::NFA_PYTHON_378;
            functions[379]= PYTHON::NFA_PYTHON_379;
            functions[380]= PYTHON::NFA_PYTHON_380;
            functions[381]= PYTHON::NFA_PYTHON_381;
            functions[382]= PYTHON::NFA_PYTHON_382;
            functions[383]= PYTHON::NFA_PYTHON_383;
            functions[384]= PYTHON::NFA_PYTHON_384;
            functions[385]= PYTHON::NFA_PYTHON_385;
            functions[386]= PYTHON::NFA_PYTHON_386;
            functions[387]= PYTHON::NFA_PYTHON_387;
            functions[388]= PYTHON::NFA_PYTHON_388;
            functions[389]= PYTHON::NFA_PYTHON_389;
            functions[390]= PYTHON::NFA_PYTHON_390;
            functions[391]= PYTHON::NFA_PYTHON_391;
            functions[392]= PYTHON::NFA_PYTHON_392;
            functions[393]= PYTHON::NFA_PYTHON_393;
            functions[394]= PYTHON::NFA_PYTHON_394;
            functions[395]= PYTHON::NFA_PYTHON_395;
            functions[396]= PYTHON::NFA_PYTHON_396;
            functions[397]= PYTHON::NFA_PYTHON_397;
            functions[398]= PYTHON::NFA_PYTHON_398;
            functions[399]= PYTHON::NFA_PYTHON_399;
            functions[400]= PYTHON::NFA_PYTHON_400;
            functions[401]= PYTHON::NFA_PYTHON_401;
            functions[402]= PYTHON::NFA_PYTHON_402;
            functions[403]= PYTHON::NFA_PYTHON_403;
            functions[404]= PYTHON::NFA_PYTHON_404;
            functions[405]= PYTHON::NFA_PYTHON_405;
            functions[406]= PYTHON::NFA_PYTHON_406;
            functions[407]= PYTHON::NFA_PYTHON_407;
            functions[408]= PYTHON::NFA_PYTHON_408;
            functions[409]= PYTHON::NFA_PYTHON_409;
            functions[410]= PYTHON::NFA_PYTHON_410;
            functions[411]= PYTHON::NFA_PYTHON_411;
            functions[412]= PYTHON::NFA_PYTHON_412;
            functions[413]= PYTHON::NFA_PYTHON_413;
            functions[414]= PYTHON::NFA_PYTHON_414;
            functions[415]= PYTHON::NFA_PYTHON_415;
            functions[416]= PYTHON::NFA_PYTHON_416;
            functions[417]= PYTHON::NFA_PYTHON_417;
            functions[418]= PYTHON::NFA_PYTHON_418;
            functions[419]= PYTHON::NFA_PYTHON_419;
            functions[420]= PYTHON::NFA_PYTHON_420;
            functions[421]= PYTHON::NFA_PYTHON_421;
            functions[422]= PYTHON::NFA_PYTHON_422;
            functions[423]= PYTHON::NFA_PYTHON_423;
            functions[424]= PYTHON::NFA_PYTHON_424;
            functions[425]= PYTHON::NFA_PYTHON_425;
            functions[426]= PYTHON::NFA_PYTHON_426;
            functions[427]= PYTHON::NFA_PYTHON_427;
            functions[428]= PYTHON::NFA_PYTHON_428;
            functions[429]= PYTHON::NFA_PYTHON_429;
            functions[430]= PYTHON::NFA_PYTHON_430;
            functions[431]= PYTHON::NFA_PYTHON_431;
            functions[432]= PYTHON::NFA_PYTHON_432;
            functions[433]= PYTHON::NFA_PYTHON_433;
            functions[434]= PYTHON::NFA_PYTHON_434;
            functions[435]= PYTHON::NFA_PYTHON_435;
            functions[436]= PYTHON::NFA_PYTHON_436;
            functions[437]= PYTHON::NFA_PYTHON_437;
            functions[438]= PYTHON::NFA_PYTHON_438;
            functions[439]= PYTHON::NFA_PYTHON_439;
            functions[440]= PYTHON::NFA_PYTHON_440;
            functions[441]= PYTHON::NFA_PYTHON_441;
            functions[442]= PYTHON::NFA_PYTHON_442;
            functions[443]= PYTHON::NFA_PYTHON_443;
            functions[444]= PYTHON::NFA_PYTHON_444;
            functions[445]= PYTHON::NFA_PYTHON_445;
            functions[446]= PYTHON::NFA_PYTHON_446;
            functions[447]= PYTHON::NFA_PYTHON_447;
            functions[448]= PYTHON::NFA_PYTHON_448;
            functions[449]= PYTHON::NFA_PYTHON_449;
            functions[450]= PYTHON::NFA_PYTHON_450;
            functions[451]= PYTHON::NFA_PYTHON_451;
            functions[452]= PYTHON::NFA_PYTHON_452;
            functions[453]= PYTHON::NFA_PYTHON_453;
            functions[454]= PYTHON::NFA_PYTHON_454;
            functions[455]= PYTHON::NFA_PYTHON_455;
            functions[456]= PYTHON::NFA_PYTHON_456;
            functions[457]= PYTHON::NFA_PYTHON_457;
            functions[458]= PYTHON::NFA_PYTHON_458;
            functions[459]= PYTHON::NFA_PYTHON_459;
            functions[460]= PYTHON::NFA_PYTHON_460;
            functions[461]= PYTHON::NFA_PYTHON_461;
            functions[462]= PYTHON::NFA_PYTHON_462;
            functions[463]= PYTHON::NFA_PYTHON_463;
            functions[464]= PYTHON::NFA_PYTHON_464;
            functions[465]= PYTHON::NFA_PYTHON_465;
            functions[466]= PYTHON::NFA_PYTHON_466;
            functions[467]= PYTHON::NFA_PYTHON_467;
            functions[468]= PYTHON::NFA_PYTHON_468;
            functions[469]= PYTHON::NFA_PYTHON_469;
            functions[470]= PYTHON::NFA_PYTHON_470;
            functions[471]= PYTHON::NFA_PYTHON_471;
            functions[472]= PYTHON::NFA_PYTHON_472;
            functions[473]= PYTHON::NFA_PYTHON_473;
            functions[474]= PYTHON::NFA_PYTHON_474;
            functions[475]= PYTHON::NFA_PYTHON_475;
            functions[476]= PYTHON::NFA_PYTHON_476;
            functions[477]= PYTHON::NFA_PYTHON_477;
            functions[478]= PYTHON::NFA_PYTHON_478;
            functions[479]= PYTHON::NFA_PYTHON_479;
            functions[480]= PYTHON::NFA_PYTHON_480;
            functions[481]= PYTHON::NFA_PYTHON_481;
            functions[482]= PYTHON::NFA_PYTHON_482;
            functions[483]= PYTHON::NFA_PYTHON_483;
            functions[484]= PYTHON::NFA_PYTHON_484;
            functions[485]= PYTHON::NFA_PYTHON_485;
            functions[486]= PYTHON::NFA_PYTHON_486;
            functions[487]= PYTHON::NFA_PYTHON_487;
            functions[488]= PYTHON::NFA_PYTHON_488;
            functions[489]= PYTHON::NFA_PYTHON_489;
            functions[490]= PYTHON::NFA_PYTHON_490;
            functions[491]= PYTHON::NFA_PYTHON_491;
            functions[492]= PYTHON::NFA_PYTHON_492;
            functions[493]= PYTHON::NFA_PYTHON_493;
            functions[494]= PYTHON::NFA_PYTHON_494;
            functions[495]= PYTHON::NFA_PYTHON_495;
            functions[496]= PYTHON::NFA_PYTHON_496;
            functions[497]= PYTHON::NFA_PYTHON_497;
            functions[498]= PYTHON::NFA_PYTHON_498;
            functions[499]= PYTHON::NFA_PYTHON_499;
            functions[500]= PYTHON::NFA_PYTHON_500;
            functions[501]= PYTHON::NFA_PYTHON_501;
            functions[502]= PYTHON::NFA_PYTHON_502;
            functions[503]= PYTHON::NFA_PYTHON_503;
            functions[504]= PYTHON::NFA_PYTHON_504;
            functions[505]= PYTHON::NFA_PYTHON_505;
            functions[506]= PYTHON::NFA_PYTHON_506;
            functions[507]= PYTHON::NFA_PYTHON_507;
            functions[508]= PYTHON::NFA_PYTHON_508;
            functions[509]= PYTHON::NFA_PYTHON_509;
            functions[510]= PYTHON::NFA_PYTHON_510;
            functions[511]= PYTHON::NFA_PYTHON_511;
            functions[512]= PYTHON::NFA_PYTHON_512;
            functions[513]= PYTHON::NFA_PYTHON_513;
            functions[514]= PYTHON::NFA_PYTHON_514;
            functions[515]= PYTHON::NFA_PYTHON_515;
            functions[516]= PYTHON::NFA_PYTHON_516;
            functions[517]= PYTHON::NFA_PYTHON_517;
            functions[518]= PYTHON::NFA_PYTHON_518;
            functions[519]= PYTHON::NFA_PYTHON_519;
            functions[520]= PYTHON::NFA_PYTHON_520;
            functions[521]= PYTHON::NFA_PYTHON_521;
            functions[522]= PYTHON::NFA_PYTHON_522;
            functions[523]= PYTHON::NFA_PYTHON_523;
            functions[524]= PYTHON::NFA_PYTHON_524;
            functions[525]= PYTHON::NFA_PYTHON_525;
            functions[526]= PYTHON::NFA_PYTHON_526;
            functions[527]= PYTHON::NFA_PYTHON_527;
            functions[528]= PYTHON::NFA_PYTHON_528;
            functions[529]= PYTHON::NFA_PYTHON_529;
            functions[530]= PYTHON::NFA_PYTHON_530;
            functions[531]= PYTHON::NFA_PYTHON_531;
            functions[532]= PYTHON::NFA_PYTHON_532;
            functions[533]= PYTHON::NFA_PYTHON_533;
            functions[534]= PYTHON::NFA_PYTHON_534;
            functions[535]= PYTHON::NFA_PYTHON_535;
            functions[536]= PYTHON::NFA_PYTHON_536;
            functions[537]= PYTHON::NFA_PYTHON_537;
            functions[538]= PYTHON::NFA_PYTHON_538;
            functions[539]= PYTHON::NFA_PYTHON_539;
            functions[540]= PYTHON::NFA_PYTHON_540;
            functions[541]= PYTHON::NFA_PYTHON_541;
            functions[542]= PYTHON::NFA_PYTHON_542;
            functions[543]= PYTHON::NFA_PYTHON_543;
            functions[544]= PYTHON::NFA_PYTHON_544;
            functions[545]= PYTHON::NFA_PYTHON_545;
            functions[546]= PYTHON::NFA_PYTHON_546;
            functions[547]= PYTHON::NFA_PYTHON_547;
            functions[548]= PYTHON::NFA_PYTHON_548;
            functions[549]= PYTHON::NFA_PYTHON_549;
            functions[550]= PYTHON::NFA_PYTHON_550;
            functions[551]= PYTHON::NFA_PYTHON_551;
            functions[552]= PYTHON::NFA_PYTHON_552;
            functions[553]= PYTHON::NFA_PYTHON_553;
            functions[554]= PYTHON::NFA_PYTHON_554;
            functions[555]= PYTHON::NFA_PYTHON_555;
            functions[556]= PYTHON::NFA_PYTHON_556;
            functions[557]= PYTHON::NFA_PYTHON_557;
            functions[558]= PYTHON::NFA_PYTHON_558;
            functions[559]= PYTHON::NFA_PYTHON_559;
            functions[560]= PYTHON::NFA_PYTHON_560;
            functions[561]= PYTHON::NFA_PYTHON_561;
            functions[562]= PYTHON::NFA_PYTHON_562;
            functions[563]= PYTHON::NFA_PYTHON_563;
            functions[564]= PYTHON::NFA_PYTHON_564;
            functions[565]= PYTHON::NFA_PYTHON_565;
            functions[566]= PYTHON::NFA_PYTHON_566;
            functions[567]= PYTHON::NFA_PYTHON_567;
            functions[568]= PYTHON::NFA_PYTHON_568;
            functions[569]= PYTHON::NFA_PYTHON_569;
            functions[570]= PYTHON::NFA_PYTHON_570;
            functions[571]= PYTHON::NFA_PYTHON_571;
            functions[572]= PYTHON::NFA_PYTHON_572;
            functions[573]= PYTHON::NFA_PYTHON_573;
            functions[574]= PYTHON::NFA_PYTHON_574;
            functions[575]= PYTHON::NFA_PYTHON_575;
            functions[576]= PYTHON::NFA_PYTHON_576;
            functions[577]= PYTHON::NFA_PYTHON_577;
            functions[578]= PYTHON::NFA_PYTHON_578;
            functions[579]= PYTHON::NFA_PYTHON_579;
            functions[580]= PYTHON::NFA_PYTHON_580;
            functions[581]= PYTHON::NFA_PYTHON_581;
            functions[582]= PYTHON::NFA_PYTHON_582;
            functions[583]= PYTHON::NFA_PYTHON_583;
            functions[584]= PYTHON::NFA_PYTHON_584;
            functions[585]= PYTHON::NFA_PYTHON_585;
            functions[586]= PYTHON::NFA_PYTHON_586;
            functions[587]= PYTHON::NFA_PYTHON_587;
            functions[588]= PYTHON::NFA_PYTHON_588;
            functions[589]= PYTHON::NFA_PYTHON_589;
            functions[590]= PYTHON::NFA_PYTHON_590;
            functions[591]= PYTHON::NFA_PYTHON_591;
            functions[592]= PYTHON::NFA_PYTHON_592;
            functions[593]= PYTHON::NFA_PYTHON_593;
            functions[594]= PYTHON::NFA_PYTHON_594;
            functions[595]= PYTHON::NFA_PYTHON_595;
            functions[596]= PYTHON::NFA_PYTHON_596;
            functions[597]= PYTHON::NFA_PYTHON_597;
            functions[598]= PYTHON::NFA_PYTHON_598;
            functions[599]= PYTHON::NFA_PYTHON_599;
            functions[600]= PYTHON::NFA_PYTHON_600;
            functions[601]= PYTHON::NFA_PYTHON_601;
            functions[602]= PYTHON::NFA_PYTHON_602;
            functions[603]= PYTHON::NFA_PYTHON_603;
            functions[604]= PYTHON::NFA_PYTHON_604;
            functions[605]= PYTHON::NFA_PYTHON_605;
            functions[606]= PYTHON::NFA_PYTHON_606;
            functions[607]= PYTHON::NFA_PYTHON_607;
            functions[608]= PYTHON::NFA_PYTHON_608;
            functions[609]= PYTHON::NFA_PYTHON_609;
            functions[610]= PYTHON::NFA_PYTHON_610;
            functions[611]= PYTHON::NFA_PYTHON_611;
            functions[612]= PYTHON::NFA_PYTHON_612;
            functions[613]= PYTHON::NFA_PYTHON_613;
            functions[614]= PYTHON::NFA_PYTHON_614;
            functions[615]= PYTHON::NFA_PYTHON_615;
            functions[616]= PYTHON::NFA_PYTHON_616;
            functions[617]= PYTHON::NFA_PYTHON_617;
            functions[618]= PYTHON::NFA_PYTHON_618;
            functions[619]= PYTHON::NFA_PYTHON_619;
            functions[620]= PYTHON::NFA_PYTHON_620;
            functions[621]= PYTHON::NFA_PYTHON_621;
            functions[622]= PYTHON::NFA_PYTHON_622;
            functions[623]= PYTHON::NFA_PYTHON_623;
            functions[624]= PYTHON::NFA_PYTHON_624;
            functions[625]= PYTHON::NFA_PYTHON_625;
            functions[626]= PYTHON::NFA_PYTHON_626;
            functions[627]= PYTHON::NFA_PYTHON_627;
            functions[628]= PYTHON::NFA_PYTHON_628;
            functions[629]= PYTHON::NFA_PYTHON_629;
            functions[630]= PYTHON::NFA_PYTHON_630;
            functions[631]= PYTHON::NFA_PYTHON_631;
            functions[632]= PYTHON::NFA_PYTHON_632;
            functions[633]= PYTHON::NFA_PYTHON_633;
            functions[634]= PYTHON::NFA_PYTHON_634;
            functions[635]= PYTHON::NFA_PYTHON_635;
            functions[636]= PYTHON::NFA_PYTHON_636;
            functions[637]= PYTHON::NFA_PYTHON_637;
            functions[638]= PYTHON::NFA_PYTHON_638;
            functions[639]= PYTHON::NFA_PYTHON_639;
            functions[640]= PYTHON::NFA_PYTHON_640;
            functions[641]= PYTHON::NFA_PYTHON_641;
            functions[642]= PYTHON::NFA_PYTHON_642;
            functions[643]= PYTHON::NFA_PYTHON_643;
            functions[644]= PYTHON::NFA_PYTHON_644;
            functions[645]= PYTHON::NFA_PYTHON_645;
            functions[646]= PYTHON::NFA_PYTHON_646;
            functions[647]= PYTHON::NFA_PYTHON_647;
            functions[648]= PYTHON::NFA_PYTHON_648;
            functions[649]= PYTHON::NFA_PYTHON_649;
            functions[650]= PYTHON::NFA_PYTHON_650;
            functions[651]= PYTHON::NFA_PYTHON_651;
            functions[652]= PYTHON::NFA_PYTHON_652;
            functions[653]= PYTHON::NFA_PYTHON_653;
            functions[654]= PYTHON::NFA_PYTHON_654;
            functions[655]= PYTHON::NFA_PYTHON_655;
            functions[656]= PYTHON::NFA_PYTHON_656;
            functions[657]= PYTHON::NFA_PYTHON_657;
            functions[658]= PYTHON::NFA_PYTHON_658;
            functions[659]= PYTHON::NFA_PYTHON_659;
            functions[660]= PYTHON::NFA_PYTHON_660;
            functions[661]= PYTHON::NFA_PYTHON_661;
            functions[662]= PYTHON::NFA_PYTHON_662;
            functions[663]= PYTHON::NFA_PYTHON_663;
            functions[664]= PYTHON::NFA_PYTHON_664;
            functions[665]= PYTHON::NFA_PYTHON_665;
            functions[666]= PYTHON::NFA_PYTHON_666;
            functions[667]= PYTHON::NFA_PYTHON_667;
            functions[668]= PYTHON::NFA_PYTHON_668;
            functions[669]= PYTHON::NFA_PYTHON_669;
            functions[670]= PYTHON::NFA_PYTHON_670;
            functions[671]= PYTHON::NFA_PYTHON_671;
            functions[672]= PYTHON::NFA_PYTHON_672;
            functions[673]= PYTHON::NFA_PYTHON_673;
            functions[674]= PYTHON::NFA_PYTHON_674;
            functions[675]= PYTHON::NFA_PYTHON_675;
            functions[676]= PYTHON::NFA_PYTHON_676;
            functions[677]= PYTHON::NFA_PYTHON_677;
            functions[678]= PYTHON::NFA_PYTHON_678;
            functions[679]= PYTHON::NFA_PYTHON_679;
            functions[680]= PYTHON::NFA_PYTHON_680;
            functions[681]= PYTHON::NFA_PYTHON_681;
            functions[682]= PYTHON::NFA_PYTHON_682;
            functions[683]= PYTHON::NFA_PYTHON_683;
            nfaFunctions= functions;
        }

    }
}
