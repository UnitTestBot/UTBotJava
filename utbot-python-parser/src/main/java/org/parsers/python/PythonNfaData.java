/* Generated by: JavaCC 21 Parser Generator. PythonNfaData.java */
package org.parsers.python;

import static org.parsers.python.PythonConstants.TokenType.*;
import java.util.EnumSet;
import java.util.BitSet;
import java.util.Arrays;
/**
 * Holder class for the data used by PythonLexer
 * to do the NFA thang
 */
class PythonNfaData implements PythonConstants {
    // The functional interface that represents 
    // the acceptance method of an NFA state
    static interface NfaFunction {
        TokenType apply(int ch, BitSet bs, EnumSet<TokenType> validTypes);
    }
    static private NfaFunction[] nfaFunctions;
    // This data holder class is never instantiated
    private PythonNfaData() {
    }

    /**
   * @param the lexical state
   * @return the table of function pointers that implement the lexical state
   */
    static final NfaFunction[] getFunctionTableMap(LexicalState lexicalState) {
        // We only have one lexical state in this case, so we return that!
        return nfaFunctions;
    }

    // Initialize the various NFA method tables
    static {
        PYTHON.NFA_FUNCTIONS_init();
    }
    // Just use the canned binary search to check whether the char
    // is in one of the intervals
    private static final boolean checkIntervals(int[] ranges, int ch) {
        int result= Arrays.binarySearch(ranges, ch);
        return result>=0||result%2== 0;
    }

    /**
  * Holder class for NFA code related to PYTHON lexical state
  */
    private static class PYTHON {
        static private TokenType NFA_PYTHON_0(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\f') {
                nextStates.set(80);
            }
            else if (ch== ' ') {
                nextStates.set(80);
            }
            else if (ch== '!') {
                nextStates.set(17);
            }
            else if (ch== '"') {
                nextStates.set(133);
                nextStates.set(25);
            }
            else if (ch== '%') {
                nextStates.set(318);
            }
            else if (ch== '&') {
                nextStates.set(297);
            }
            else if (ch== '\'') {
                nextStates.set(60);
                nextStates.set(63);
            }
            else if (ch== '*') {
                nextStates.set(34);
                nextStates.set(261);
                nextStates.set(222);
            }
            else if (ch== '+') {
                nextStates.set(322);
            }
            else if (ch== '-') {
                nextStates.set(203);
                nextStates.set(326);
            }
            else if (ch== '.') {
                nextStates.set(177);
                nextStates.set(351);
                nextStates.set(284);
            }
            else if (ch== '/') {
                nextStates.set(73);
                nextStates.set(86);
                nextStates.set(64);
            }
            else if (ch== '0') {
                nextStates.set(11);
                nextStates.set(115);
                nextStates.set(327);
                nextStates.set(208);
            }
            if (ch>='0'&&ch<='9') {
                nextStates.set(95);
                nextStates.set(329);
                nextStates.set(6);
                nextStates.set(294);
                nextStates.set(227);
            }
            if (ch>='1'&&ch<='9') {
                nextStates.set(5);
            }
            else if (ch== ':') {
                nextStates.set(36);
            }
            else if (ch== '<') {
                nextStates.set(332);
                nextStates.set(333);
                nextStates.set(56);
            }
            else if (ch== '=') {
                nextStates.set(188);
            }
            else if (ch== '>') {
                nextStates.set(181);
                nextStates.set(340);
                nextStates.set(321);
            }
            else if (ch== '?') {
                nextStates.set(18);
            }
            else if (ch== '@') {
                nextStates.set(107);
            }
            else if (ch== 'B') {
                nextStates.set(176);
                nextStates.set(78);
                nextStates.set(136);
                nextStates.set(262);
                nextStates.set(102);
                nextStates.set(126);
                nextStates.set(118);
                nextStates.set(288);
                nextStates.set(217);
                nextStates.set(246);
                nextStates.set(347);
                nextStates.set(279);
            }
            else if (ch== 'F') {
                nextStates.set(108);
                nextStates.set(161);
                nextStates.set(59);
                nextStates.set(214);
                nextStates.set(255);
                nextStates.set(335);
                nextStates.set(172);
                nextStates.set(46);
                nextStates.set(275);
                nextStates.set(268);
                nextStates.set(266);
                nextStates.set(200);
                nextStates.set(225);
            }
            else if (ch== 'N') {
                nextStates.set(345);
            }
            else if (ch== 'R') {
                nextStates.set(195);
                nextStates.set(46);
                nextStates.set(213);
                nextStates.set(131);
                nextStates.set(179);
                nextStates.set(81);
                nextStates.set(189);
                nextStates.set(228);
                nextStates.set(266);
                nextStates.set(335);
                nextStates.set(14);
                nextStates.set(295);
                nextStates.set(59);
                nextStates.set(192);
                nextStates.set(148);
                nextStates.set(54);
                nextStates.set(257);
                nextStates.set(77);
                nextStates.set(270);
                nextStates.set(201);
            }
            else if (ch== 'T') {
                nextStates.set(168);
            }
            else if (ch== 'U') {
                nextStates.set(59);
                nextStates.set(46);
                nextStates.set(335);
                nextStates.set(266);
            }
            else if (ch== '\\') {
                nextStates.set(119);
            }
            else if (ch== '^') {
                nextStates.set(1);
            }
            else if (ch== '_') {
                nextStates.set(41);
            }
            else if (ch== 'a') {
                nextStates.set(122);
                nextStates.set(67);
                nextStates.set(44);
                nextStates.set(316);
                nextStates.set(207);
            }
            else if (ch== 'b') {
                nextStates.set(187);
                nextStates.set(262);
                nextStates.set(289);
                nextStates.set(221);
                nextStates.set(126);
                nextStates.set(7);
                nextStates.set(185);
                nextStates.set(62);
                nextStates.set(176);
                nextStates.set(109);
                nextStates.set(173);
                nextStates.set(98);
                nextStates.set(288);
            }
            else if (ch== 'c') {
                nextStates.set(178);
                nextStates.set(341);
                nextStates.set(286);
            }
            else if (ch== 'd') {
                nextStates.set(157);
                nextStates.set(84);
            }
            else if (ch== 'e') {
                nextStates.set(83);
                nextStates.set(220);
                nextStates.set(218);
            }
            else if (ch== 'f') {
                nextStates.set(305);
                nextStates.set(97);
                nextStates.set(169);
                nextStates.set(300);
                nextStates.set(59);
                nextStates.set(243);
                nextStates.set(90);
                nextStates.set(46);
                nextStates.set(310);
                nextStates.set(335);
                nextStates.set(266);
                nextStates.set(141);
                nextStates.set(269);
                nextStates.set(134);
                nextStates.set(342);
            }
            else if (ch== 'g') {
                nextStates.set(47);
            }
            else if (ch== 'i') {
                nextStates.set(250);
                nextStates.set(224);
                nextStates.set(105);
                nextStates.set(88);
            }
            else if (ch== 'l') {
                nextStates.set(28);
            }
            else if (ch== 'm') {
                nextStates.set(101);
            }
            else if (ch== 'n') {
                nextStates.set(52);
                nextStates.set(127);
            }
            else if (ch== 'o') {
                nextStates.set(110);
            }
            else if (ch== 'p') {
                nextStates.set(48);
            }
            else if (ch== 'r') {
                nextStates.set(46);
                nextStates.set(256);
                nextStates.set(74);
                nextStates.set(71);
                nextStates.set(249);
                nextStates.set(313);
                nextStates.set(309);
                nextStates.set(230);
                nextStates.set(171);
                nextStates.set(335);
                nextStates.set(312);
                nextStates.set(234);
                nextStates.set(266);
                nextStates.set(283);
                nextStates.set(263);
                nextStates.set(57);
                nextStates.set(59);
                nextStates.set(247);
                nextStates.set(156);
                nextStates.set(49);
                nextStates.set(254);
                nextStates.set(117);
            }
            else if (ch== 't') {
                nextStates.set(184);
            }
            else if (ch== 'u') {
                nextStates.set(335);
                nextStates.set(59);
                nextStates.set(46);
                nextStates.set(266);
            }
            else if (ch== 'w') {
                nextStates.set(352);
                nextStates.set(139);
            }
            else if (ch== 'y') {
                nextStates.set(87);
            }
            else if (ch== '|') {
                nextStates.set(113);
            }
            if ((ch>='A'&&ch<='Z')||((ch== '_')||((ch>='a'&&ch<='z')||(ch>=0x80&&ch<=0xffff)))) {
                nextStates.set(175);
                if (validTypes.contains(BADNAME)) type= BADNAME;
            }
            if (((ch>='A'&&ch<='Z')||((ch== '_')||(ch>='a'&&ch<='z')))||(ch>=128&&checkIntervals(NFA_MOVES_PYTHON_574, ch))) {
                nextStates.set(324);
                if (validTypes.contains(NAME)) type= NAME;
            }
            else if (ch== '0') {
                nextStates.set(15);
                nextStates.set(311);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            else if (ch>='1'&&ch<='9') {
                nextStates.set(160);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            else if (ch== '%') {
                if (validTypes.contains(PERCENT)) type= PERCENT;
            }
            else if (ch== '/') {
                if (validTypes.contains(SLASH)) type= SLASH;
            }
            else if (ch== '+') {
                if (validTypes.contains(PLUS)) type= PLUS;
            }
            else if (ch== '-') {
                if (validTypes.contains(MINUS)) type= MINUS;
            }
            else if (ch== '<') {
                if (validTypes.contains(LT)) type= LT;
            }
            else if (ch== '>') {
                if (validTypes.contains(GT)) type= GT;
            }
            else if (ch== '.') {
                if (validTypes.contains(DOT)) type= DOT;
            }
            else if (ch== '~') {
                if (validTypes.contains(TILDE)) type= TILDE;
            }
            else if (ch== '^') {
                if (validTypes.contains(XOR)) type= XOR;
            }
            else if (ch== '|') {
                if (validTypes.contains(BIT_OR)) type= BIT_OR;
            }
            else if (ch== '&') {
                if (validTypes.contains(BIT_AND)) type= BIT_AND;
            }
            else if (ch== '*') {
                if (validTypes.contains(STAR)) type= STAR;
            }
            else if (ch== ';') {
                if (validTypes.contains(SEMICOLON)) type= SEMICOLON;
            }
            else if (ch== ')') {
                if (validTypes.contains(RPAREN)) type= RPAREN;
            }
            else if (ch== '(') {
                if (validTypes.contains(LPAREN)) type= LPAREN;
            }
            else if (ch== ']') {
                if (validTypes.contains(RBRACKET)) type= RBRACKET;
            }
            else if (ch== '[') {
                if (validTypes.contains(LBRACKET)) type= LBRACKET;
            }
            else if (ch== '}') {
                if (validTypes.contains(RBRACE)) type= RBRACE;
            }
            else if (ch== '{') {
                if (validTypes.contains(LBRACE)) type= LBRACE;
            }
            else if (ch== ',') {
                if (validTypes.contains(COMMA)) type= COMMA;
            }
            else if (ch== ':') {
                if (validTypes.contains(COLON)) type= COLON;
            }
            else if (ch== '@') {
                if (validTypes.contains(AT)) type= AT;
            }
            else if (ch== '=') {
                if (validTypes.contains(ASSIGN)) type= ASSIGN;
            }
            else if (ch== '\n') {
                if (validTypes.contains(NEWLINE)) type= NEWLINE;
            }
            else if (ch== '#') {
                nextStates.set(353);
                if (validTypes.contains(COMMENT)) type= COMMENT;
            }
            else if (ch== '\f') {
                nextStates.set(320);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            else if (ch== ' ') {
                nextStates.set(320);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_1(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(XORASSIGN)) type= XORASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_2(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(292);
            }
            if (ch== '\\') {
                nextStates.set(212);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_3(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_4(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(STARSTARASSIGN)) type= STARSTARASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_5(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(5);
            }
            else if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(58);
            }
            else if (ch== '_') {
                nextStates.set(146);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_6(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '.') {
                nextStates.set(143);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(6);
            }
            else if (ch== '_') {
                nextStates.set(291);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_7(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_8(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='7') {
                nextStates.set(72);
                if (validTypes.contains(OCTNUMBER)) type= OCTNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_9(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(227);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_10(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'y') {
                if (validTypes.contains(TRY)) type= TRY;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_11(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(11);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_12(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(219);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_13(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                nextStates.set(330);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_14(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_15(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(196);
            }
            else if (ch== '0'||ch== '1') {
                nextStates.set(163);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            else if ((ch== 'B')||(ch== 'b')) {
                nextStates.set(163);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_16(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(299);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_17(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(NE)) type= NE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_18(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== ' ') {
                if (validTypes.contains(HOOK)) type= HOOK;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_19(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(LSHIFTASSIGN)) type= LSHIFTASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_20(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(301);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_21(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(142);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(40);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_22(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(124);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_23(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(NONE)) type= NONE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_24(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(89);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(24);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_25(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(25);
            }
            else if (ch== '\\') {
                nextStates.set(194);
            }
            else if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_26(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'c') {
                nextStates.set(319);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_27(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(ELSE)) type= ELSE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_28(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(100);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_29(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '.') {
                if (validTypes.contains(ELLIPSIS)) type= ELLIPSIS;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_30(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                if (validTypes.contains(AWAIT)) type= AWAIT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_31(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(346);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_32(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'u') {
                nextStates.set(174);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_33(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(37);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_34(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(STARASSIGN)) type= STARASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_35(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(24);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_36(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(COLONEQUALS)) type= COLONEQUALS;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_37(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                if (validTypes.contains(PASS)) type= PASS;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_38(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                nextStates.set(162);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_39(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                if (validTypes.contains(LAMBDA)) type= LAMBDA;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_40(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(223);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(40);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_41(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(260);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_42(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                if (validTypes.contains(GLOBAL)) type= GLOBAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_43(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(143);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_44(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                nextStates.set(278);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_45(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(219);
            }
            if (ch== '\\') {
                nextStates.set(12);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_46(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(25);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_47(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(159);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_48(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(33);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_49(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(232);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_50(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(167);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_51(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(CASE)) type= CASE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_52(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(147);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_53(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(128);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_54(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_55(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'p') {
                nextStates.set(165);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_56(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(LE)) type= LE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_57(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_58(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_59(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(60);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_60(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(144);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_61(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(236);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_62(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(123);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_63(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(63);
            }
            else if (ch== '\\') {
                nextStates.set(267);
            }
            else if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_64(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '/') {
                if (validTypes.contains(_TOKEN_100)) type= _TOKEN_100;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_65(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(95);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_66(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(331);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_67(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                if (validTypes.contains(AS)) type= AS;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_68(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(153);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_69(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(258);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_70(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(CONTINUE)) type= CONTINUE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_71(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_72(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(8);
            }
            else if (ch>='0'&&ch<='7') {
                nextStates.set(72);
                if (validTypes.contains(OCTNUMBER)) type= OCTNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(OCTNUMBER)) type= OCTNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_73(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '/') {
                nextStates.set(328);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_74(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_75(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(292);
            }
            else if (ch== '"') {
                nextStates.set(2);
            }
            if (ch== '\\') {
                nextStates.set(212);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_76(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(35);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(24);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_77(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_78(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_79(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(164);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_80(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\f') {
                nextStates.set(80);
            }
            else if (ch== ' ') {
                nextStates.set(80);
            }
            else if (ch== '\n') {
                if (validTypes.contains(NEWLINE)) type= NEWLINE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_81(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_82(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'u') {
                nextStates.set(70);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_83(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(325);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_84(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(285);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_85(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'c') {
                nextStates.set(22);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_86(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(SLASHASSIGN)) type= SLASHASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_87(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(298);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_88(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                if (validTypes.contains(IN)) type= IN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_89(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(24);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_90(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(38);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_91(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                if (validTypes.contains(ELIF)) type= ELIF;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_92(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(229);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_93(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(61);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_94(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_95(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(95);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(76);
            }
            else if (ch== '_') {
                nextStates.set(65);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_96(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(96);
            }
            else if (ch== '_') {
                nextStates.set(152);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_97(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_98(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_99(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(233);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_100(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'm') {
                nextStates.set(145);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_101(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(13);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_102(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_103(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                if (validTypes.contains(_ASSERT)) type= _ASSERT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_104(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(209);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_105(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                if (validTypes.contains(IS)) type= IS;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_106(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(251);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_107(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(ATASSIGN)) type= ATASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_108(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(354);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_109(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_110(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                if (validTypes.contains(OR)) type= OR;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_111(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(114);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_112(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(317);
            }
            else if (ch== '\'') {
                nextStates.set(199);
            }
            if (ch== '\\') {
                nextStates.set(240);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_113(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(ORASSIGN)) type= ORASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_114(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(114);
            }
            else if (ch== '_') {
                nextStates.set(111);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_115(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'O')||(ch== 'o')) {
                nextStates.set(72);
                if (validTypes.contains(OCTNUMBER)) type= OCTNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_116(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(245);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_117(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_118(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_119(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\n') {
                if (validTypes.contains(CONTINUE_LINE)) type= CONTINUE_LINE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_120(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(150);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_121(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(244);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_122(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'w') {
                nextStates.set(182);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_123(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(20);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_124(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                if (validTypes.contains(NONLOCAL)) type= NONLOCAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_125(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(337);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_126(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(307);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_127(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(239);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_128(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(128);
            }
            else if (ch== '\'') {
                nextStates.set(348);
                nextStates.set(204);
            }
            if (ch== '\\') {
                nextStates.set(53);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_129(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                nextStates.set(186);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_130(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(51);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_131(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_132(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(116);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_133(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(336);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_134(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_135(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(205);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_136(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_137(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                nextStates.set(32);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_138(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(138);
            }
            else if (ch== '_') {
                nextStates.set(216);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_139(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(129);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_140(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(RSHIFTASSIGN)) type= RSHIFTASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_141(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_142(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(40);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_143(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(143);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(183);
            }
            else if (ch== '_') {
                nextStates.set(43);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_144(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(317);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_145(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(166);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_146(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(5);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_147(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                nextStates.set(106);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_148(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_149(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(191);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_150(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'p') {
                nextStates.set(259);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_151(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                nextStates.set(290);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_152(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(96);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_153(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(303);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_154(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                nextStates.set(210);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_155(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0&&ch<=0x7f) {
                nextStates.set(235);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_156(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_157(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(314);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_158(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(193);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_159(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(149);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_160(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(215);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(160);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_161(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_162(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(306);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_163(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(196);
            }
            else if (ch== '0'||ch== '1') {
                nextStates.set(163);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_164(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(RAISE)) type= RAISE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_165(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                if (validTypes.contains(EXCEPT)) type= EXCEPT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_166(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'd') {
                nextStates.set(39);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_167(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                if (validTypes.contains(IMPORT)) type= IMPORT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_168(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(211);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_169(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(293);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_170(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'y') {
                nextStates.set(154);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_171(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_172(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_173(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_174(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(273);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_175(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='Z')||((ch== '_')||((ch>='a'&&ch<='z')||(ch>=0x80&&ch<=0xffff))))) {
                nextStates.set(175);
                if (validTypes.contains(BADNAME)) type= BADNAME;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_176(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(235);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_177(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '.') {
                nextStates.set(29);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_178(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(151);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_179(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_180(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(96);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_181(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '>') {
                if (validTypes.contains(RSHIFT)) type= RSHIFT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_182(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(338);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_183(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(180);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(96);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_184(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(10);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_185(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_186(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'h') {
                if (validTypes.contains(WITH)) type= WITH;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_187(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_188(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(EQ)) type= EQ;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_189(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_190(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'p') {
                nextStates.set(226);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_191(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(42);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_192(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_193(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'm') {
                if (validTypes.contains(FROM)) type= FROM;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_194(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0) {
                nextStates.set(25);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_195(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_196(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0'||ch== '1') {
                nextStates.set(163);
                if (validTypes.contains(BINNUMBER)) type= BINNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_197(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(231);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(229);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_198(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(253);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_199(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(317);
            }
            if (ch== '\\') {
                nextStates.set(240);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_200(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_201(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_202(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'g') {
                nextStates.set(120);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_203(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(MINUSASSIGN)) type= MINUSASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_204(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(241);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_205(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(WHILE)) type= WHILE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_206(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(114);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_207(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(132);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_208(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'X')||(ch== 'x')) {
                nextStates.set(277);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_209(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'd') {
                if (validTypes.contains(YIELD)) type= YIELD;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_210(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'c') {
                if (validTypes.contains(ASYNC)) type= ASYNC;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_211(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'u') {
                nextStates.set(272);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_212(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0) {
                nextStates.set(292);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_213(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_214(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_215(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(160);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_216(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(138);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_217(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_218(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(281);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_219(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(219);
            }
            else if (ch== '"') {
                nextStates.set(16);
                nextStates.set(237);
            }
            if (ch== '\\') {
                nextStates.set(12);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_220(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'x') {
                nextStates.set(26);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_221(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_222(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '*') {
                nextStates.set(4);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_223(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(40);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_224(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                if (validTypes.contains(IF)) type= IF;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_225(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_226(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(50);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_227(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(227);
            }
            else if (ch== '_') {
                nextStates.set(9);
            }
            else if (ch== '.') {
                nextStates.set(264);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_228(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_229(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(92);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(229);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_230(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_231(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(229);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_232(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(79);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_233(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'y') {
                if (validTypes.contains(FINALLY)) type= FINALLY;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_234(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_235(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='!')||((ch>='#'&&ch<='[')||(ch>=']')))) {
                nextStates.set(235);
            }
            else if (ch== '\\') {
                nextStates.set(155);
            }
            else if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_236(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(121);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_237(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(219);
            }
            else if (ch== '"') {
                nextStates.set(45);
            }
            if (ch== '\\') {
                nextStates.set(12);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_238(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(315);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_239(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                if (validTypes.contains(NOT)) type= NOT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_240(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0) {
                nextStates.set(317);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_241(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_242(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                nextStates.set(23);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_243(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(158);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_244(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(302);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_245(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(103);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_246(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_247(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_248(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(128);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_249(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_250(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'm') {
                nextStates.set(190);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_251(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(85);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_252(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(128);
            }
            if (ch== '\\') {
                nextStates.set(53);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_253(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(253);
            }
            else if ((ch== 'L')||(ch== 'l')) {
                nextStates.set(58);
            }
            else if (ch== '_') {
                nextStates.set(198);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_254(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'F') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_255(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_256(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_257(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_258(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(219);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_259(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(93);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_260(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'p') {
                nextStates.set(334);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_261(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '*') {
                if (validTypes.contains(STAR_STAR)) type= STAR_STAR;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_262(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(346);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_263(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'b') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_264(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(21);
            }
            else if (ch== '_') {
                nextStates.set(344);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(264);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_265(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(3);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_266(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(133);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_267(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>=0x0) {
                nextStates.set(63);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_268(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_269(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_270(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_271(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(304);
                if (validTypes.contains(BADDECNUMBER)) type= BADDECNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_272(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(TRUE)) type= TRUE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_273(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                if (validTypes.contains(RETURN)) type= RETURN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_274(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(206);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(114);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_275(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(59);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_276(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(276);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_277(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(287);
            }
            else if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
                nextStates.set(349);
                if (validTypes.contains(HEXNUMBER)) type= HEXNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_278(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'd') {
                if (validTypes.contains(AND)) type= AND;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_279(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_280(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(343);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_281(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(27);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_282(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(138);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_283(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(137);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_284(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(331);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_285(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                if (validTypes.contains(DEF)) type= DEF;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_286(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'a') {
                nextStates.set(130);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_287(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
                nextStates.set(349);
                if (validTypes.contains(HEXNUMBER)) type= HEXNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_288(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(69);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_289(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_290(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 't') {
                nextStates.set(125);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_291(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(6);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_292(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='!')||(ch>='#')) {
                nextStates.set(292);
            }
            else if (ch== '"') {
                nextStates.set(75);
                nextStates.set(265);
            }
            if (ch== '\\') {
                nextStates.set(212);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_293(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                if (validTypes.contains(FOR)) type= FOR;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_294(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(294);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(350);
            }
            else if (ch== '_') {
                nextStates.set(296);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_295(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(126);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_296(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(294);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_297(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(ANDASSIGN)) type= ANDASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_298(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(104);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_299(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_300(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_301(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'k') {
                if (validTypes.contains(BREAK)) type= BREAK;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_302(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                if (validTypes.contains(PEG_PARSER)) type= PEG_PARSER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_303(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                if (validTypes.contains(CLASS)) type= CLASS;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_304(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(271);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(304);
                if (validTypes.contains(BADDECNUMBER)) type= BADDECNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(BADDECNUMBER)) type= BADDECNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_305(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(46);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_306(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(99);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_307(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(248);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_308(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'h') {
                if (validTypes.contains(MATCH)) type= MATCH;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_309(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'f') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_310(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(335);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_311(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(311);
                if (validTypes.contains(DECNUMBER)) type= DECNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_312(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(176);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_313(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'B') {
                nextStates.set(262);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_314(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                if (validTypes.contains(DEL)) type= DEL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_315(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(315);
            }
            else if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(274);
            }
            else if (ch== '_') {
                nextStates.set(238);
            }
            else if ((ch== 'J')||(ch== 'j')) {
                if (validTypes.contains(COMPLEX)) type= COMPLEX;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_316(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 's') {
                nextStates.set(170);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_317(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(317);
            }
            else if (ch== '\'') {
                nextStates.set(112);
                nextStates.set(339);
            }
            if (ch== '\\') {
                nextStates.set(240);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_318(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(REMASSIGN)) type= REMASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_319(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(55);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_320(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\f') {
                nextStates.set(320);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            else if (ch== ' ') {
                nextStates.set(320);
                if (validTypes.contains(SPACE)) type= SPACE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_321(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '>') {
                nextStates.set(140);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_322(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(PLUSASSIGN)) type= PLUSASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_323(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(135);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_324(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (((ch>='0'&&ch<='9')||((ch>='A'&&ch<='Z')||((ch== '_')||(ch>='a'&&ch<='z'))))||(ch>=128&&checkIntervals(NFA_MOVES_PYTHON_456, ch))) {
                nextStates.set(324);
                if (validTypes.contains(NAME)) type= NAME;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_325(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(91);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_326(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '>') {
                if (validTypes.contains(RARROW)) type= RARROW;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_327(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '0') {
                nextStates.set(276);
            }
            else if (ch>='1'&&ch<='9') {
                nextStates.set(253);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_328(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(SLASHSLASHASSIGN)) type= SLASHSLASHASSIGN;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_329(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(271);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(304);
                if (validTypes.contains(BADDECNUMBER)) type= BADDECNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_330(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'c') {
                nextStates.set(308);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_331(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== 'E')||(ch== 'e')) {
                nextStates.set(197);
            }
            else if (ch== '_') {
                nextStates.set(66);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(331);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_332(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '<') {
                if (validTypes.contains(LSHIFT)) type= LSHIFT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_333(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '<') {
                nextStates.set(19);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_334(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                nextStates.set(202);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_335(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(63);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_336(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '"') {
                nextStates.set(292);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_337(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'n') {
                nextStates.set(82);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_338(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'i') {
                nextStates.set(30);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_339(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '\'') {
                nextStates.set(94);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_340(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '=') {
                if (validTypes.contains(GE)) type= GE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_341(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(68);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_342(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'R') {
                nextStates.set(266);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_343(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'e') {
                if (validTypes.contains(FALSE)) type= FALSE;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_344(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(264);
                if (validTypes.contains(FLOAT)) type= FLOAT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_345(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'o') {
                nextStates.set(242);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_346(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||((ch>=0xb&&ch<='&')||((ch>='('&&ch<='[')||(ch>=']')))) {
                nextStates.set(346);
            }
            else if (ch== '\\') {
                nextStates.set(31);
            }
            else if (ch== '\'') {
                if (validTypes.contains(STRING_LITERAL)) type= STRING_LITERAL;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_347(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'r') {
                nextStates.set(288);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_348(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='&')||(ch>='(')) {
                nextStates.set(128);
            }
            else if (ch== '\'') {
                nextStates.set(252);
            }
            if (ch== '\\') {
                nextStates.set(53);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_349(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== '_') {
                nextStates.set(287);
            }
            else if ((ch>='0'&&ch<='9')||((ch>='A'&&ch<='F')||(ch>='a'&&ch<='f'))) {
                nextStates.set(349);
                if (validTypes.contains(HEXNUMBER)) type= HEXNUMBER;
            }
            else if ((ch== 'L')||(ch== 'l')) {
                if (validTypes.contains(HEXNUMBER)) type= HEXNUMBER;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_350(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch== '+')||(ch== '-')) {
                nextStates.set(282);
            }
            else if (ch>='0'&&ch<='9') {
                nextStates.set(138);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_351(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch>='0'&&ch<='9') {
                nextStates.set(315);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_352(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'h') {
                nextStates.set(323);
            }
            return type;
        }

        static private TokenType NFA_PYTHON_353(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if ((ch>=0x0&&ch<='\t')||(ch>=0xb)) {
                nextStates.set(353);
                if (validTypes.contains(COMMENT)) type= COMMENT;
            }
            return type;
        }

        static private TokenType NFA_PYTHON_354(int ch, BitSet nextStates, EnumSet<TokenType> validTypes) {
            TokenType type= null;
            if (ch== 'l') {
                nextStates.set(280);
            }
            return type;
        }

        static private int[] NFA_MOVES_PYTHON_456= NFA_MOVES_PYTHON_456_init();
        static private int[] NFA_MOVES_PYTHON_456_init() {
            return new int[]{'0', '9', 'A', 'Z', '_', '_', 'a', 'z', 0xaa, 0xaa, 0xb5, 0xb5, 0xba, 0xba, 0xc0, 0xd6, 0xd8, 0xf6, 0xf8, 0x13e, 0x141, 0x2c1, 0x2c6, 0x2d1, 0x2e0, 0x2e4, 0x2ec, 0x2ec, 0x2ee, 0x2ee, 0x300, 0x374, 0x376, 0x377, 0x37b, 0x37d, 0x37f, 0x37f, 0x386, 0x386, 0x388, 0x38a, 0x38c, 0x38c, 0x38e, 0x3a1, 0x3a3, 0x3f5, 0x3f7, 0x481, 0x483, 0x487, 0x48a, 0x52f, 0x531, 0x556, 0x559, 0x559, 0x560, 0x588, 0x591, 0x5bd, 0x5bf, 0x5bf, 0x5c1, 0x5c2, 0x5c4, 0x5c5, 0x5c7, 0x5c7, 0x5d0, 0x5ea, 0x5ef, 0x5f2, 0x610, 0x61a, 0x620, 0x669, 0x66e, 0x6d3, 0x6d5, 0x6dc, 0x6df, 0x6e8, 0x6ea, 0x6fc, 0x6ff, 0x6ff, 0x710, 0x74a, 0x74d, 0x7b1, 0x7c0, 0x7f5, 0x7fa, 0x7fa, 0x7fd, 0x7fd, 0x800, 0x82d, 0x840, 0x85b, 0x860, 0x86a, 0x8a0, 0x8b4, 0x8b6, 0x8c7, 0x8d3, 0x8e1, 0x8e3, 0x963, 0x966, 0x96f, 0x971, 0x983, 0x985, 0x98c, 0x98f, 0x990, 0x993, 0x9a8, 0x9aa, 0x9b0, 0x9b2, 0x9b2, 0x9b6, 0x9b9, 0x9bc, 0x9c4, 0x9c7, 0x9c8, 0x9cb, 0x9ce, 0x9d7, 0x9d7, 0x9dc, 0x9dd, 0x9df, 0x9e3, 0x9e6, 0x9f1, 0x9fc, 0x9fc, 0x9fe, 0x9fe, 0xa01, 0xa03, 0xa05, 0xa0a, 0xa0f, 0xa10, 0xa13, 0xa28, 0xa2a, 0xa30, 0xa32, 0xa33, 0xa35, 0xa36, 0xa38, 0xa39, 0xa3c, 0xa3c, 0xa3e, 0xa42, 0xa47, 0xa48, 0xa4b, 0xa4d, 0xa51, 0xa51, 0xa59, 0xa5c, 0xa5e, 0xa5e, 0xa66, 0xa75, 0xa81, 0xa83, 0xa85, 0xa8d, 0xa8f, 0xa91, 0xa93, 0xaa8, 0xaaa, 0xab0, 0xab2, 0xab3, 0xab5, 0xab9, 0xabc, 0xac5, 0xac7, 0xac9, 0xacb, 0xacd, 0xad0, 0xad0, 0xae0, 0xae3, 0xae6, 0xaef, 0xaf9, 0xaff, 0xb01, 0xb03, 0xb05, 0xb0c, 0xb0f, 0xb10, 0xb13, 0xb28, 0xb2a, 0xb30, 0xb32, 0xb33, 0xb35, 0xb39, 0xb3c, 0xb44, 0xb47, 0xb48, 0xb4b, 0xb4d, 0xb55, 0xb57, 0xb5c, 0xb5d, 0xb5f, 0xb63, 0xb66, 0xb6f, 0xb71, 0xb71, 0xb82, 0xb83, 0xb85, 0xb8a, 0xb8e, 0xb90, 0xb92, 0xb95, 0xb99, 0xb9a, 0xb9c, 0xb9c, 0xb9e, 0xb9f, 0xba3, 0xba4, 0xba8, 0xbaa, 0xbae, 0xbb9, 0xbbe, 0xbc2, 0xbc6, 0xbc8, 0xbca, 0xbcd, 0xbd0, 0xbd0, 0xbd7, 0xbd7, 0xbe6, 0xbef, 0xc00, 0xc0c, 0xc0e, 0xc10, 0xc12, 0xc28, 0xc2a, 0xc39, 0xc3d, 0xc44, 0xc46, 0xc48, 0xc4a, 0xc4d, 0xc55, 0xc56, 0xc58, 0xc5a, 0xc60, 0xc63, 0xc66, 0xc6f, 0xc80, 0xc83, 0xc85, 0xc8c, 0xc8e, 0xc90, 0xc92, 0xca8, 0xcaa, 0xcb3, 0xcb5, 0xcb9, 0xcbc, 0xcc4, 0xcc6, 0xcc8, 0xcca, 0xccd, 0xcd5, 0xcd6, 0xcde, 0xcde, 0xce0, 0xce3, 0xce6, 0xcef, 0xcf1, 0xcf2, 0xd00, 0xd0c, 0xd0e, 0xd10, 0xd12, 0xd44, 0xd46, 0xd48, 0xd4a, 0xd4e, 0xd54, 0xd57, 0xd5f, 0xd63, 0xd66, 0xd6f, 0xd7a, 0xd7f, 0xd81, 0xd83, 0xd85, 0xd96, 0xd9a, 0xdb1, 0xdb3, 0xdbb, 0xdbd, 0xdbd, 0xdc0, 0xdc6, 0xdca, 0xdca, 0xdcf, 0xdd4, 0xdd6, 0xdd6, 0xdd8, 0xddf, 0xde6, 0xdef, 0xdf2, 0xdf3, 0xe01, 0xe3a, 0xe40, 0xe4e, 0xe50, 0xe59, 0xe81, 0xe82, 0xe84, 0xe84, 0xe86, 0xe8a, 0xe8c, 0xea3, 0xea5, 0xea5, 0xea7, 0xebd, 0xec0, 0xec4, 0xec6, 0xec6, 0xec8, 0xecd, 0xed0, 0xed9, 0xedc, 0xedf, 0xf00, 0xf00, 0xf18, 0xf19, 0xf20, 0xf29, 0xf35, 0xf35, 0xf37, 0xf37, 0xf39, 0xf39, 0xf3e, 0xf47, 0xf49, 0xf6c, 0xf71, 0xf84, 0xf86, 0xf97, 0xf99, 0xfbc, 0xfc6, 0xfc6, 0x1000, 0x1049, 0x1050, 0x109d, 0x10a0, 0x10c5, 0x10c7, 0x10c7, 0x10cd, 0x10cd, 0x10d0, 0x10fa, 0x10fc, 0x1248, 0x124a, 0x124d, 0x1250, 0x1256, 0x1258, 0x1258, 0x125a, 0x125d, 0x1260, 0x1288, 0x128a, 0x128d, 0x1290, 0x12b0, 0x12b2, 0x12b5, 0x12b8, 0x12be, 0x12c0, 0x12c0, 0x12c2, 0x12c5, 0x12c8, 0x12d6, 0x12d8, 0x1310, 0x1312, 0x1315, 0x1318, 0x135a, 0x135d, 0x135f, 0x1380, 0x138f, 0x13a0, 0x13f5, 0x13f8, 0x13fd, 0x1401, 0x166c, 0x166f, 0x167f, 0x1681, 0x169a, 0x16a0, 0x16ea, 0x16ee, 0x16f8, 0x1700, 0x170c, 0x170e, 0x1714, 0x1720, 0x1734, 0x1740, 0x1753, 0x1760, 0x176c, 0x176e, 0x1770, 0x1772, 0x1773, 0x1780, 0x17d3, 0x17d7, 0x17d7, 0x17dc, 0x17dd, 0x17e0, 0x17e9, 0x180b, 0x180d, 0x1810, 0x1819, 0x1820, 0x1878, 0x1880, 0x18aa, 0x18b0, 0x18f5, 0x1900, 0x191e, 0x1920, 0x192b, 0x1930, 0x193b, 0x1946, 0x196d, 0x1970, 0x1974, 0x1980, 0x19ab, 0x19b0, 0x19c9, 0x19d0, 0x19d9, 0x1a00, 0x1a1b, 0x1a20, 0x1a5e, 0x1a60, 0x1a7c, 0x1a7f, 0x1a89, 0x1a90, 0x1a99, 0x1aa7, 0x1aa7, 0x1ab0, 0x1abd, 0x1abf, 0x1ac0, 0x1b00, 0x1b4b, 0x1b50, 0x1b59, 0x1b6b, 0x1b73, 0x1b80, 0x1bf3, 0x1c00, 0x1c37, 0x1c40, 0x1c49, 0x1c4d, 0x1c7d, 0x1c80, 0x1c88, 0x1c90, 0x1cba, 0x1cbd, 0x1cbf, 0x1cd0, 0x1cd2, 0x1cd4, 0x1cfa, 0x1d00, 0x1df9, 0x1dfb, 0x1f15, 0x1f18, 0x1f1d, 0x1f20, 0x1f45, 0x1f48, 0x1f4d, 0x1f50, 0x1f57, 0x1f59, 0x1f59, 0x1f5b, 0x1f5b, 0x1f5d, 0x1f5d, 0x1f5f, 0x1f7d, 0x1f80, 0x1fb4, 0x1fb6, 0x1fbc, 0x1fbe, 0x1fbe, 0x1fc2, 0x1fc4, 0x1fc6, 0x1fcc, 0x1fd0, 0x1fd3, 0x1fd6, 0x1fdb, 0x1fe0, 0x1fec, 0x1ff2, 0x1ff4, 0x1ff6, 0x1ffc, 0x203f, 0x2040, 0x2054, 0x2054, 0x2071, 0x2071, 0x207f, 0x207f, 0x2090, 0x209c, 0x20d0, 0x20dc, 0x20e1, 0x20e1, 0x20e5, 0x20f0, 0x2102, 0x2102, 0x2107, 0x2107, 0x210a, 0x2113, 0x2115, 0x2115, 0x2119, 0x211d, 0x2124, 0x2124, 0x2126, 0x2126, 0x2128, 0x2128, 0x212a, 0x212d, 0x212f, 0x2139, 0x213c, 0x213f, 0x2145, 0x2149, 0x214e, 0x214e, 0x2160, 0x2188, 0x2c00, 0x2c2e, 0x2c30, 0x2c5e, 0x2c60, 0x2ce4, 0x2ceb, 0x2cf3, 0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x2d30, 0x2d67, 0x2d6f, 0x2d6f, 0x2d7f, 0x2d96, 0x2da0, 0x2da6, 0x2da8, 0x2dae, 0x2db0, 0x2db6, 0x2db8, 0x2dbe, 0x2dc0, 0x2dc6, 0x2dc8, 0x2dce, 0x2dd0, 0x2dd6, 0x2dd8, 0x2dde, 0x2de0, 0x2dff, 0x2e2f, 0x2e2f, 0x3005, 0x3007, 0x3021, 0x302f, 0x3031, 0x3035, 0x3038, 0x303c, 0x3041, 0x3096, 0x3099, 0x309a, 0x309d, 0x309f, 0x30a1, 0x30fa, 0x30fc, 0x30ff, 0x3105, 0x312f, 0x3131, 0x318e, 0x31a0, 0x31bf, 0x31f0, 0x31ff, 0x3400, 0x4dbf, 0x4e00, 0x9ffc, 0xa000, 0xa48c, 0xa4d0, 0xa4fd, 0xa500, 0xa60c, 0xa610, 0xa62b, 0xa640, 0xa66f, 0xa674, 0xa67d, 0xa67f, 0xa6f1, 0xa717, 0xa71f, 0xa722, 0xa788, 0xa78b, 0xa7bf, 0xa7c2, 0xa7ca, 0xa7f5, 0xa827, 0xa82c, 0xa82c, 0xa840, 0xa873, 0xa880, 0xa8c5, 0xa8d0, 0xa8d9, 0xa8e0, 0xa8f7, 0xa8fb, 0xa8fb, 0xa8fd, 0xa92d, 0xa930, 0xa953, 0xa960, 0xa97c, 0xa980, 0xa9c0, 0xa9cf, 0xa9d9, 0xa9e0, 0xa9fe, 0xaa00, 0xaa36, 0xaa40, 0xaa4d, 0xaa50, 0xaa59, 0xaa60, 0xaa76, 0xaa7a, 0xaac2, 0xaadb, 0xaadd, 0xaae0, 0xaaef, 0xaaf2, 0xaaf6, 0xab01, 0xab06, 0xab09, 0xab0e, 0xab11, 0xab16, 0xab20, 0xab26, 0xab28, 0xab2e, 0xab30, 0xab5a, 0xab5c, 0xab69, 0xab70, 0xabea, 0xabec, 0xabed, 0xabf0, 0xabf9, 0xac00, 0xd7a3, 0xd7b0, 0xd7c6, 0xd7cb, 0xd7fb, 0xf900, 0xfa6d, 0xfa70, 0xfad9, 0xfb00, 0xfb06, 0xfb13, 0xfb17, 0xfb1d, 0xfb28, 0xfb2a, 0xfb36, 0xfb38, 0xfb3c, 0xfb3e, 0xfb3e, 0xfb40, 0xfb41, 0xfb43, 0xfb44, 0xfb46, 0xfbb1, 0xfbd3, 0xfc5d, 0xfc64, 0xfd3d, 0xfd50, 0xfd8f, 0xfd92, 0xfdc7, 0xfdf0, 0xfdf9, 0xfe00, 0xfe0f, 0xfe20, 0xfe2f, 0xfe33, 0xfe34, 0xfe4d, 0xfe4f, 0xfe71, 0xfe71, 0xfe73, 0xfe73, 0xfe77, 0xfe77, 0xfe79, 0xfe79, 0xfe7b, 0xfe7b, 0xfe7d, 0xfe7d, 0xfe7f, 0xfefc, 0xff10, 0xff19, 0xff21, 0xff3a, 0xff3f, 0xff3f, 0xff41, 0xff5a, 0xff66, 0xffbe, 0xffc2, 0xffc7, 0xffca, 0xffcf, 0xffd2, 0xffd7, 0xffda, 0xffdc, 0x10000, 0x1000b, 0x1000d, 0x10026, 0x10028, 0x1003a, 0x1003c, 0x1003d, 0x1003f, 0x1004d, 0x10050, 0x1005d, 0x10080, 0x100fa, 0x10140, 0x10174, 0x101fd, 0x101fd, 0x10280, 0x1029c, 0x102a0, 0x102d0, 0x102e0, 0x102e0, 0x10300, 0x1031f, 0x1032d, 0x1034a, 0x10350, 0x1037a, 0x10380, 0x1039d, 0x103a0, 0x103c3, 0x103c8, 0x103cf, 0x103d1, 0x103d5, 0x10400, 0x1049d, 0x104a0, 0x104a9, 0x104b0, 0x104d3, 0x104d8, 0x104fb, 0x10500, 0x10527, 0x10530, 0x10563, 0x10600, 0x10736, 0x10740, 0x10755, 0x10760, 0x10767, 0x10800, 0x10805, 0x10808, 0x10808, 0x1080a, 0x10835, 0x10837, 0x10838, 0x1083c, 0x1083c, 0x1083f, 0x10855, 0x10860, 0x10876, 0x10880, 0x1089e, 0x108e0, 0x108f2, 0x108f4, 0x108f5, 0x10900, 0x10915, 0x10920, 0x10939, 0x10980, 0x109b7, 0x109be, 0x109bf, 0x10a00, 0x10a03, 0x10a05, 0x10a06, 0x10a0c, 0x10a13, 0x10a15, 0x10a17, 0x10a19, 0x10a35, 0x10a38, 0x10a3a, 0x10a3f, 0x10a3f, 0x10a60, 0x10a7c, 0x10a80, 0x10a9c, 0x10ac0, 0x10ac7, 0x10ac9, 0x10ae6, 0x10b00, 0x10b35, 0x10b40, 0x10b55, 0x10b60, 0x10b72, 0x10b80, 0x10b91, 0x10c00, 0x10c48, 0x10c80, 0x10cb2, 0x10cc0, 0x10cf2, 0x10d00, 0x10d27, 0x10d30, 0x10d39, 0x10e80, 0x10ea9, 0x10eab, 0x10eac, 0x10eb0, 0x10eb1, 0x10f00, 0x10f1c, 0x10f27, 0x10f27, 0x10f30, 0x10f50, 0x10fb0, 0x10fc4, 0x10fe0, 0x10ff6, 0x11000, 0x11046, 0x11066, 0x1106f, 0x1107f, 0x110ba, 0x110d0, 0x110e8, 0x110f0, 0x110f9, 0x11100, 0x11134, 0x11136, 0x1113f, 0x11144, 0x11147, 0x11150, 0x11173, 0x11176, 0x11176, 0x11180, 0x111c4, 0x111c9, 0x111cc, 0x111ce, 0x111da, 0x111dc, 0x111dc, 0x11200, 0x11211, 0x11213, 0x11237, 0x1123e, 0x1123e, 0x11280, 0x11286, 0x11288, 0x11288, 0x1128a, 0x1128d, 0x1128f, 0x1129d, 0x1129f, 0x112a8, 0x112b0, 0x112ea, 0x112f0, 0x112f9, 0x11300, 0x11303, 0x11305, 0x1130c, 0x1130f, 0x11310, 0x11313, 0x11328, 0x1132a, 0x11330, 0x11332, 0x11333, 0x11335, 0x11339, 0x1133b, 0x11344, 0x11347, 0x11348, 0x1134b, 0x1134d, 0x11350, 0x11350, 0x11357, 0x11357, 0x1135d, 0x11363, 0x11366, 0x1136c, 0x11370, 0x11374, 0x11400, 0x1144a, 0x11450, 0x11459, 0x1145e, 0x11461, 0x11480, 0x114c5, 0x114c7, 0x114c7, 0x114d0, 0x114d9, 0x11580, 0x115b5, 0x115b8, 0x115c0, 0x115d8, 0x115dd, 0x11600, 0x11640, 0x11644, 0x11644, 0x11650, 0x11659, 0x11680, 0x116b8, 0x116c0, 0x116c9, 0x11700, 0x1171a, 0x1171d, 0x1172b, 0x11730, 0x11739, 0x11800, 0x1183a, 0x118a0, 0x118e9, 0x118ff, 0x11906, 0x11909, 0x11909, 0x1190c, 0x11913, 0x11915, 0x11916, 0x11918, 0x11935, 0x11937, 0x11938, 0x1193b, 0x11943, 0x11950, 0x11959, 0x119a0, 0x119a7, 0x119aa, 0x119d7, 0x119da, 0x119e1, 0x119e3, 0x119e4, 0x11a00, 0x11a3e, 0x11a47, 0x11a47, 0x11a50, 0x11a99, 0x11a9d, 0x11a9d, 0x11ac0, 0x11af8, 0x11c00, 0x11c08, 0x11c0a, 0x11c36, 0x11c38, 0x11c40, 0x11c50, 0x11c59, 0x11c72, 0x11c8f, 0x11c92, 0x11ca7, 0x11ca9, 0x11cb6, 0x11d00, 0x11d06, 0x11d08, 0x11d09, 0x11d0b, 0x11d36, 0x11d3a, 0x11d3a, 0x11d3c, 0x11d3d, 0x11d3f, 0x11d47, 0x11d50, 0x11d59, 0x11d60, 0x11d65, 0x11d67, 0x11d68, 0x11d6a, 0x11d8e, 0x11d90, 0x11d91, 0x11d93, 0x11d98, 0x11da0, 0x11da9, 0x11ee0, 0x11ef6, 0x11fb0, 0x11fb0, 0x12000, 0x12399, 0x12400, 0x1246e, 0x12480, 0x12543, 0x13000, 0x1342e, 0x14400, 0x14646, 0x16800, 0x16a38, 0x16a40, 0x16a5e, 0x16a60, 0x16a69, 0x16ad0, 0x16aed, 0x16af0, 0x16af4, 0x16b00, 0x16b36, 0x16b40, 0x16b43, 0x16b50, 0x16b59, 0x16b63, 0x16b77, 0x16b7d, 0x16b8f, 0x16e40, 0x16e7f, 0x16f00, 0x16f4a, 0x16f4f, 0x16f87, 0x16f8f, 0x16f9f, 0x16fe0, 0x16fe1, 0x16fe3, 0x16fe4, 0x16ff0, 0x16ff1, 0x17000, 0x187f7, 0x18800, 0x18cd5, 0x18d00, 0x18d08, 0x1b000, 0x1b11e, 0x1b150, 0x1b152, 0x1b164, 0x1b167, 0x1b170, 0x1b2fb, 0x1bc00, 0x1bc6a, 0x1bc70, 0x1bc7c, 0x1bc80, 0x1bc88, 0x1bc90, 0x1bc99, 0x1bc9d, 0x1bc9e, 0x1d165, 0x1d169, 0x1d16d, 0x1d172, 0x1d17b, 0x1d182, 0x1d185, 0x1d18b, 0x1d1aa, 0x1d1ad, 0x1d242, 0x1d244, 0x1d400, 0x1d454, 0x1d456, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4ac, 0x1d4ae, 0x1d4b9, 0x1d4bb, 0x1d4bb, 0x1d4bd, 0x1d4c3, 0x1d4c5, 0x1d505, 0x1d507, 0x1d50a, 0x1d50d, 0x1d514, 0x1d516, 0x1d51c, 0x1d51e, 0x1d539, 0x1d53b, 0x1d53e, 0x1d540, 0x1d544, 0x1d546, 0x1d546, 0x1d54a, 0x1d550, 0x1d552, 0x1d6a5, 0x1d6a8, 0x1d6c0, 0x1d6c2, 0x1d6da, 0x1d6dc, 0x1d6fa, 0x1d6fc, 0x1d714, 0x1d716, 0x1d734, 0x1d736, 0x1d74e, 0x1d750, 0x1d76e, 0x1d770, 0x1d788, 0x1d78a, 0x1d7a8, 0x1d7aa, 0x1d7c2, 0x1d7c4, 0x1d7cb, 0x1d7ce, 0x1d7ff, 0x1da00, 0x1da36, 0x1da3b, 0x1da6c, 0x1da75, 0x1da75, 0x1da84, 0x1da84, 0x1da9b, 0x1da9f, 0x1daa1, 0x1daaf, 0x1e000, 0x1e006, 0x1e008, 0x1e018, 0x1e01b, 0x1e021, 0x1e023, 0x1e024, 0x1e026, 0x1e02a, 0x1e100, 0x1e12c, 0x1e130, 0x1e13d, 0x1e140, 0x1e149, 0x1e14e, 0x1e14e, 0x1e2c0, 0x1e2f9, 0x1e800, 0x1e8c4, 0x1e8d0, 0x1e8d6, 0x1e900, 0x1e94b, 0x1e950, 0x1e959, 0x1ee00, 0x1ee03, 0x1ee05, 0x1ee1f, 0x1ee21, 0x1ee22, 0x1ee24, 0x1ee24, 0x1ee27, 0x1ee27, 0x1ee29, 0x1ee32, 0x1ee34, 0x1ee37, 0x1ee39, 0x1ee39, 0x1ee3b, 0x1ee3b, 0x1ee42, 0x1ee42, 0x1ee47, 0x1ee47, 0x1ee49, 0x1ee49, 0x1ee4b, 0x1ee4b, 0x1ee4d, 0x1ee4f, 0x1ee51, 0x1ee52, 0x1ee54, 0x1ee54, 0x1ee57, 0x1ee57, 0x1ee59, 0x1ee59, 0x1ee5b, 0x1ee5b, 0x1ee5d, 0x1ee5d, 0x1ee5f, 0x1ee5f, 0x1ee61, 0x1ee62, 0x1ee64, 0x1ee64, 0x1ee67, 0x1ee6a, 0x1ee6c, 0x1ee72, 0x1ee74, 0x1ee77, 0x1ee79, 0x1ee7c, 0x1ee7e, 0x1ee7e, 0x1ee80, 0x1ee89, 0x1ee8b, 0x1ee9b, 0x1eea1, 0x1eea3, 0x1eea5, 0x1eea9, 0x1eeab, 0x1eebb, 0x1fbf0, 0x1fbf9, 0x20000, 0x2a6dd, 0x2a700, 0x2b734, 0x2b740, 0x2b81d, 0x2b820, 0x2cea1, 0x2ceb0, 0x2ebe0, 0x2f800, 0x2fa1d, 0x30000, 0x3134a, 0xe0100, 0xe01ef};
        }

        static private int[] NFA_MOVES_PYTHON_574= NFA_MOVES_PYTHON_574_init();
        static private int[] NFA_MOVES_PYTHON_574_init() {
            return new int[]{'A', 'Z', '_', '_', 'a', 'z', 0xaa, 0xaa, 0xb5, 0xb5, 0xba, 0xba, 0xc0, 0xd6, 0xd8, 0xf6, 0xf8, 0x13e, 0x141, 0x2c1, 0x2c6, 0x2d1, 0x2e0, 0x2e4, 0x2ec, 0x2ec, 0x2ee, 0x2ee, 0x370, 0x374, 0x376, 0x377, 0x37b, 0x37d, 0x37f, 0x37f, 0x386, 0x386, 0x388, 0x38a, 0x38c, 0x38c, 0x38e, 0x3a1, 0x3a3, 0x3f5, 0x3f7, 0x481, 0x48a, 0x52f, 0x531, 0x556, 0x559, 0x559, 0x560, 0x588, 0x5d0, 0x5ea, 0x5ef, 0x5f2, 0x620, 0x64a, 0x66e, 0x66f, 0x671, 0x6d3, 0x6d5, 0x6d5, 0x6e5, 0x6e6, 0x6ee, 0x6ef, 0x6fa, 0x6fc, 0x6ff, 0x6ff, 0x710, 0x710, 0x712, 0x72f, 0x74d, 0x7a5, 0x7b1, 0x7b1, 0x7ca, 0x7ea, 0x7f4, 0x7f5, 0x7fa, 0x7fa, 0x800, 0x815, 0x81a, 0x81a, 0x824, 0x824, 0x828, 0x828, 0x840, 0x858, 0x860, 0x86a, 0x8a0, 0x8b4, 0x8b6, 0x8c7, 0x904, 0x939, 0x93d, 0x93d, 0x950, 0x950, 0x958, 0x961, 0x971, 0x980, 0x985, 0x98c, 0x98f, 0x990, 0x993, 0x9a8, 0x9aa, 0x9b0, 0x9b2, 0x9b2, 0x9b6, 0x9b9, 0x9bd, 0x9bd, 0x9ce, 0x9ce, 0x9dc, 0x9dd, 0x9df, 0x9e1, 0x9f0, 0x9f1, 0x9fc, 0x9fc, 0xa05, 0xa0a, 0xa0f, 0xa10, 0xa13, 0xa28, 0xa2a, 0xa30, 0xa32, 0xa33, 0xa35, 0xa36, 0xa38, 0xa39, 0xa59, 0xa5c, 0xa5e, 0xa5e, 0xa72, 0xa74, 0xa85, 0xa8d, 0xa8f, 0xa91, 0xa93, 0xaa8, 0xaaa, 0xab0, 0xab2, 0xab3, 0xab5, 0xab9, 0xabd, 0xabd, 0xad0, 0xad0, 0xae0, 0xae1, 0xaf9, 0xaf9, 0xb05, 0xb0c, 0xb0f, 0xb10, 0xb13, 0xb28, 0xb2a, 0xb30, 0xb32, 0xb33, 0xb35, 0xb39, 0xb3d, 0xb3d, 0xb5c, 0xb5d, 0xb5f, 0xb61, 0xb71, 0xb71, 0xb83, 0xb83, 0xb85, 0xb8a, 0xb8e, 0xb90, 0xb92, 0xb95, 0xb99, 0xb9a, 0xb9c, 0xb9c, 0xb9e, 0xb9f, 0xba3, 0xba4, 0xba8, 0xbaa, 0xbae, 0xbb9, 0xbd0, 0xbd0, 0xc05, 0xc0c, 0xc0e, 0xc10, 0xc12, 0xc28, 0xc2a, 0xc39, 0xc3d, 0xc3d, 0xc58, 0xc5a, 0xc60, 0xc61, 0xc80, 0xc80, 0xc85, 0xc8c, 0xc8e, 0xc90, 0xc92, 0xca8, 0xcaa, 0xcb3, 0xcb5, 0xcb9, 0xcbd, 0xcbd, 0xcde, 0xcde, 0xce0, 0xce1, 0xcf1, 0xcf2, 0xd04, 0xd0c, 0xd0e, 0xd10, 0xd12, 0xd3a, 0xd3d, 0xd3d, 0xd4e, 0xd4e, 0xd54, 0xd56, 0xd5f, 0xd61, 0xd7a, 0xd7f, 0xd85, 0xd96, 0xd9a, 0xdb1, 0xdb3, 0xdbb, 0xdbd, 0xdbd, 0xdc0, 0xdc6, 0xe01, 0xe30, 0xe32, 0xe32, 0xe40, 0xe46, 0xe81, 0xe82, 0xe84, 0xe84, 0xe86, 0xe8a, 0xe8c, 0xea3, 0xea5, 0xea5, 0xea7, 0xeb0, 0xeb2, 0xeb2, 0xebd, 0xebd, 0xec0, 0xec4, 0xec6, 0xec6, 0xedc, 0xedf, 0xf00, 0xf00, 0xf40, 0xf47, 0xf49, 0xf6c, 0xf88, 0xf8c, 0x1000, 0x102a, 0x103f, 0x103f, 0x1050, 0x1055, 0x105a, 0x105d, 0x1061, 0x1061, 0x1065, 0x1066, 0x106e, 0x1070, 0x1075, 0x1081, 0x108e, 0x108e, 0x10a0, 0x10c5, 0x10c7, 0x10c7, 0x10cd, 0x10cd, 0x10d0, 0x10fa, 0x10fc, 0x1248, 0x124a, 0x124d, 0x1250, 0x1256, 0x1258, 0x1258, 0x125a, 0x125d, 0x1260, 0x1288, 0x128a, 0x128d, 0x1290, 0x12b0, 0x12b2, 0x12b5, 0x12b8, 0x12be, 0x12c0, 0x12c0, 0x12c2, 0x12c5, 0x12c8, 0x12d6, 0x12d8, 0x1310, 0x1312, 0x1315, 0x1318, 0x135a, 0x1380, 0x138f, 0x13a0, 0x13f5, 0x13f8, 0x13fd, 0x1401, 0x166c, 0x166f, 0x167f, 0x1681, 0x169a, 0x16a0, 0x16ea, 0x16ee, 0x16f8, 0x1700, 0x170c, 0x170e, 0x1711, 0x1720, 0x1731, 0x1740, 0x1751, 0x1760, 0x176c, 0x176e, 0x1770, 0x1780, 0x17b3, 0x17d7, 0x17d7, 0x17dc, 0x17dc, 0x1820, 0x1878, 0x1880, 0x1884, 0x1887, 0x18a8, 0x18aa, 0x18aa, 0x18b0, 0x18f5, 0x1900, 0x191e, 0x1950, 0x196d, 0x1970, 0x1974, 0x1980, 0x19ab, 0x19b0, 0x19c9, 0x1a00, 0x1a16, 0x1a20, 0x1a54, 0x1aa7, 0x1aa7, 0x1b05, 0x1b33, 0x1b45, 0x1b4b, 0x1b83, 0x1ba0, 0x1bae, 0x1baf, 0x1bba, 0x1be5, 0x1c00, 0x1c23, 0x1c4d, 0x1c4f, 0x1c5a, 0x1c7d, 0x1c80, 0x1c88, 0x1c90, 0x1cba, 0x1cbd, 0x1cbf, 0x1ce9, 0x1cec, 0x1cee, 0x1cf3, 0x1cf5, 0x1cf6, 0x1cfa, 0x1cfa, 0x1d00, 0x1dbf, 0x1e00, 0x1f15, 0x1f18, 0x1f1d, 0x1f20, 0x1f45, 0x1f48, 0x1f4d, 0x1f50, 0x1f57, 0x1f59, 0x1f59, 0x1f5b, 0x1f5b, 0x1f5d, 0x1f5d, 0x1f5f, 0x1f7d, 0x1f80, 0x1fb4, 0x1fb6, 0x1fbc, 0x1fbe, 0x1fbe, 0x1fc2, 0x1fc4, 0x1fc6, 0x1fcc, 0x1fd0, 0x1fd3, 0x1fd6, 0x1fdb, 0x1fe0, 0x1fec, 0x1ff2, 0x1ff4, 0x1ff6, 0x1ffc, 0x2071, 0x2071, 0x207f, 0x207f, 0x2090, 0x209c, 0x2102, 0x2102, 0x2107, 0x2107, 0x210a, 0x2113, 0x2115, 0x2115, 0x2119, 0x211d, 0x2124, 0x2124, 0x2126, 0x2126, 0x2128, 0x2128, 0x212a, 0x212d, 0x212f, 0x2139, 0x213c, 0x213f, 0x2145, 0x2149, 0x214e, 0x214e, 0x2160, 0x2188, 0x2c00, 0x2c2e, 0x2c30, 0x2c5e, 0x2c60, 0x2ce4, 0x2ceb, 0x2cee, 0x2cf2, 0x2cf3, 0x2d00, 0x2d25, 0x2d27, 0x2d27, 0x2d2d, 0x2d2d, 0x2d30, 0x2d67, 0x2d6f, 0x2d6f, 0x2d80, 0x2d96, 0x2da0, 0x2da6, 0x2da8, 0x2dae, 0x2db0, 0x2db6, 0x2db8, 0x2dbe, 0x2dc0, 0x2dc6, 0x2dc8, 0x2dce, 0x2dd0, 0x2dd6, 0x2dd8, 0x2dde, 0x2e2f, 0x2e2f, 0x3005, 0x3007, 0x3021, 0x3029, 0x3031, 0x3035, 0x3038, 0x303c, 0x3041, 0x3096, 0x309d, 0x309f, 0x30a1, 0x30fa, 0x30fc, 0x30ff, 0x3105, 0x312f, 0x3131, 0x318e, 0x31a0, 0x31bf, 0x31f0, 0x31ff, 0x3400, 0x4dbf, 0x4e00, 0x9ffc, 0xa000, 0xa48c, 0xa4d0, 0xa4fd, 0xa500, 0xa60c, 0xa610, 0xa61f, 0xa62a, 0xa62b, 0xa640, 0xa66e, 0xa67f, 0xa69d, 0xa6a0, 0xa6ef, 0xa717, 0xa71f, 0xa722, 0xa788, 0xa78b, 0xa7bf, 0xa7c2, 0xa7ca, 0xa7f5, 0xa801, 0xa803, 0xa805, 0xa807, 0xa80a, 0xa80c, 0xa822, 0xa840, 0xa873, 0xa882, 0xa8b3, 0xa8f2, 0xa8f7, 0xa8fb, 0xa8fb, 0xa8fd, 0xa8fe, 0xa90a, 0xa925, 0xa930, 0xa946, 0xa960, 0xa97c, 0xa984, 0xa9b2, 0xa9cf, 0xa9cf, 0xa9e0, 0xa9e4, 0xa9e6, 0xa9ef, 0xa9fa, 0xa9fe, 0xaa00, 0xaa28, 0xaa40, 0xaa42, 0xaa44, 0xaa4b, 0xaa60, 0xaa76, 0xaa7a, 0xaa7a, 0xaa7e, 0xaaaf, 0xaab1, 0xaab1, 0xaab5, 0xaab6, 0xaab9, 0xaabd, 0xaac0, 0xaac0, 0xaac2, 0xaac2, 0xaadb, 0xaadd, 0xaae0, 0xaaea, 0xaaf2, 0xaaf4, 0xab01, 0xab06, 0xab09, 0xab0e, 0xab11, 0xab16, 0xab20, 0xab26, 0xab28, 0xab2e, 0xab30, 0xab5a, 0xab5c, 0xab69, 0xab70, 0xabe2, 0xac00, 0xd7a3, 0xd7b0, 0xd7c6, 0xd7cb, 0xd7fb, 0xf900, 0xfa6d, 0xfa70, 0xfad9, 0xfb00, 0xfb06, 0xfb13, 0xfb17, 0xfb1d, 0xfb1d, 0xfb1f, 0xfb28, 0xfb2a, 0xfb36, 0xfb38, 0xfb3c, 0xfb3e, 0xfb3e, 0xfb40, 0xfb41, 0xfb43, 0xfb44, 0xfb46, 0xfbb1, 0xfbd3, 0xfc5d, 0xfc64, 0xfd3d, 0xfd50, 0xfd8f, 0xfd92, 0xfdc7, 0xfdf0, 0xfdf9, 0xfe71, 0xfe71, 0xfe73, 0xfe73, 0xfe77, 0xfe77, 0xfe79, 0xfe79, 0xfe7b, 0xfe7b, 0xfe7d, 0xfe7d, 0xfe7f, 0xfefc, 0xff21, 0xff3a, 0xff41, 0xff5a, 0xff66, 0xff9d, 0xffa0, 0xffbe, 0xffc2, 0xffc7, 0xffca, 0xffcf, 0xffd2, 0xffd7, 0xffda, 0xffdc, 0x10000, 0x1000b, 0x1000d, 0x10026, 0x10028, 0x1003a, 0x1003c, 0x1003d, 0x1003f, 0x1004d, 0x10050, 0x1005d, 0x10080, 0x100fa, 0x10140, 0x10174, 0x10280, 0x1029c, 0x102a0, 0x102d0, 0x10300, 0x1031f, 0x1032d, 0x1034a, 0x10350, 0x10375, 0x10380, 0x1039d, 0x103a0, 0x103c3, 0x103c8, 0x103cf, 0x103d1, 0x103d5, 0x10400, 0x1049d, 0x104b0, 0x104d3, 0x104d8, 0x104fb, 0x10500, 0x10527, 0x10530, 0x10563, 0x10600, 0x10736, 0x10740, 0x10755, 0x10760, 0x10767, 0x10800, 0x10805, 0x10808, 0x10808, 0x1080a, 0x10835, 0x10837, 0x10838, 0x1083c, 0x1083c, 0x1083f, 0x10855, 0x10860, 0x10876, 0x10880, 0x1089e, 0x108e0, 0x108f2, 0x108f4, 0x108f5, 0x10900, 0x10915, 0x10920, 0x10939, 0x10980, 0x109b7, 0x109be, 0x109bf, 0x10a00, 0x10a00, 0x10a10, 0x10a13, 0x10a15, 0x10a17, 0x10a19, 0x10a35, 0x10a60, 0x10a7c, 0x10a80, 0x10a9c, 0x10ac0, 0x10ac7, 0x10ac9, 0x10ae4, 0x10b00, 0x10b35, 0x10b40, 0x10b55, 0x10b60, 0x10b72, 0x10b80, 0x10b91, 0x10c00, 0x10c48, 0x10c80, 0x10cb2, 0x10cc0, 0x10cf2, 0x10d00, 0x10d23, 0x10e80, 0x10ea9, 0x10eb0, 0x10eb1, 0x10f00, 0x10f1c, 0x10f27, 0x10f27, 0x10f30, 0x10f45, 0x10fb0, 0x10fc4, 0x10fe0, 0x10ff6, 0x11003, 0x11037, 0x11083, 0x110af, 0x110d0, 0x110e8, 0x11103, 0x11126, 0x11144, 0x11144, 0x11147, 0x11147, 0x11150, 0x11172, 0x11176, 0x11176, 0x11183, 0x111b2, 0x111c1, 0x111c4, 0x111da, 0x111da, 0x111dc, 0x111dc, 0x11200, 0x11211, 0x11213, 0x1122b, 0x11280, 0x11286, 0x11288, 0x11288, 0x1128a, 0x1128d, 0x1128f, 0x1129d, 0x1129f, 0x112a8, 0x112b0, 0x112de, 0x11305, 0x1130c, 0x1130f, 0x11310, 0x11313, 0x11328, 0x1132a, 0x11330, 0x11332, 0x11333, 0x11335, 0x11339, 0x1133d, 0x1133d, 0x11350, 0x11350, 0x1135d, 0x11361, 0x11400, 0x11434, 0x11447, 0x1144a, 0x1145f, 0x11461, 0x11480, 0x114af, 0x114c4, 0x114c5, 0x114c7, 0x114c7, 0x11580, 0x115ae, 0x115d8, 0x115db, 0x11600, 0x1162f, 0x11644, 0x11644, 0x11680, 0x116aa, 0x116b8, 0x116b8, 0x11700, 0x1171a, 0x11800, 0x1182b, 0x118a0, 0x118df, 0x118ff, 0x11906, 0x11909, 0x11909, 0x1190c, 0x11913, 0x11915, 0x11916, 0x11918, 0x1192f, 0x1193f, 0x1193f, 0x11941, 0x11941, 0x119a0, 0x119a7, 0x119aa, 0x119d0, 0x119e1, 0x119e1, 0x119e3, 0x119e3, 0x11a00, 0x11a00, 0x11a0b, 0x11a32, 0x11a3a, 0x11a3a, 0x11a50, 0x11a50, 0x11a5c, 0x11a89, 0x11a9d, 0x11a9d, 0x11ac0, 0x11af8, 0x11c00, 0x11c08, 0x11c0a, 0x11c2e, 0x11c40, 0x11c40, 0x11c72, 0x11c8f, 0x11d00, 0x11d06, 0x11d08, 0x11d09, 0x11d0b, 0x11d30, 0x11d46, 0x11d46, 0x11d60, 0x11d65, 0x11d67, 0x11d68, 0x11d6a, 0x11d89, 0x11d98, 0x11d98, 0x11ee0, 0x11ef2, 0x11fb0, 0x11fb0, 0x12000, 0x12399, 0x12400, 0x1246e, 0x12480, 0x12543, 0x13000, 0x1342e, 0x14400, 0x14646, 0x16800, 0x16a38, 0x16a40, 0x16a5e, 0x16ad0, 0x16aed, 0x16b00, 0x16b2f, 0x16b40, 0x16b43, 0x16b63, 0x16b77, 0x16b7d, 0x16b8f, 0x16e40, 0x16e7f, 0x16f00, 0x16f4a, 0x16f50, 0x16f50, 0x16f93, 0x16f9f, 0x16fe0, 0x16fe1, 0x16fe3, 0x16fe3, 0x17000, 0x187f7, 0x18800, 0x18cd5, 0x18d00, 0x18d08, 0x1b000, 0x1b11e, 0x1b150, 0x1b152, 0x1b164, 0x1b167, 0x1b170, 0x1b2fb, 0x1bc00, 0x1bc6a, 0x1bc70, 0x1bc7c, 0x1bc80, 0x1bc88, 0x1bc90, 0x1bc99, 0x1d400, 0x1d454, 0x1d456, 0x1d49c, 0x1d49e, 0x1d49f, 0x1d4a2, 0x1d4a2, 0x1d4a5, 0x1d4a6, 0x1d4a9, 0x1d4ac, 0x1d4ae, 0x1d4b9, 0x1d4bb, 0x1d4bb, 0x1d4bd, 0x1d4c3, 0x1d4c5, 0x1d505, 0x1d507, 0x1d50a, 0x1d50d, 0x1d514, 0x1d516, 0x1d51c, 0x1d51e, 0x1d539, 0x1d53b, 0x1d53e, 0x1d540, 0x1d544, 0x1d546, 0x1d546, 0x1d54a, 0x1d550, 0x1d552, 0x1d6a5, 0x1d6a8, 0x1d6c0, 0x1d6c2, 0x1d6da, 0x1d6dc, 0x1d6fa, 0x1d6fc, 0x1d714, 0x1d716, 0x1d734, 0x1d736, 0x1d74e, 0x1d750, 0x1d76e, 0x1d770, 0x1d788, 0x1d78a, 0x1d7a8, 0x1d7aa, 0x1d7c2, 0x1d7c4, 0x1d7cb, 0x1e100, 0x1e12c, 0x1e137, 0x1e13d, 0x1e14e, 0x1e14e, 0x1e2c0, 0x1e2eb, 0x1e800, 0x1e8c4, 0x1e900, 0x1e943, 0x1e94b, 0x1e94b, 0x1ee00, 0x1ee03, 0x1ee05, 0x1ee1f, 0x1ee21, 0x1ee22, 0x1ee24, 0x1ee24, 0x1ee27, 0x1ee27, 0x1ee29, 0x1ee32, 0x1ee34, 0x1ee37, 0x1ee39, 0x1ee39, 0x1ee3b, 0x1ee3b, 0x1ee42, 0x1ee42, 0x1ee47, 0x1ee47, 0x1ee49, 0x1ee49, 0x1ee4b, 0x1ee4b, 0x1ee4d, 0x1ee4f, 0x1ee51, 0x1ee52, 0x1ee54, 0x1ee54, 0x1ee57, 0x1ee57, 0x1ee59, 0x1ee59, 0x1ee5b, 0x1ee5b, 0x1ee5d, 0x1ee5d, 0x1ee5f, 0x1ee5f, 0x1ee61, 0x1ee62, 0x1ee64, 0x1ee64, 0x1ee67, 0x1ee6a, 0x1ee6c, 0x1ee72, 0x1ee74, 0x1ee77, 0x1ee79, 0x1ee7c, 0x1ee7e, 0x1ee7e, 0x1ee80, 0x1ee89, 0x1ee8b, 0x1ee9b, 0x1eea1, 0x1eea3, 0x1eea5, 0x1eea9, 0x1eeab, 0x1eebb, 0x20000, 0x2a6dd, 0x2a700, 0x2b734, 0x2b740, 0x2b81d, 0x2b820, 0x2cea1, 0x2ceb0, 0x2ebe0, 0x2f800, 0x2fa1d, 0x30000, 0x3134a};
        }

        static private void NFA_FUNCTIONS_init() {
            nfaFunctions= new NfaFunction[]{PYTHON::NFA_PYTHON_0, PYTHON::NFA_PYTHON_1, PYTHON::NFA_PYTHON_2, PYTHON::NFA_PYTHON_3, PYTHON::NFA_PYTHON_4, PYTHON::NFA_PYTHON_5, PYTHON::NFA_PYTHON_6, PYTHON::NFA_PYTHON_7, PYTHON::NFA_PYTHON_8, PYTHON::NFA_PYTHON_9, PYTHON::NFA_PYTHON_10, PYTHON::NFA_PYTHON_11, PYTHON::NFA_PYTHON_12, PYTHON::NFA_PYTHON_13, PYTHON::NFA_PYTHON_14, PYTHON::NFA_PYTHON_15, PYTHON::NFA_PYTHON_16, PYTHON::NFA_PYTHON_17, PYTHON::NFA_PYTHON_18, PYTHON::NFA_PYTHON_19, PYTHON::NFA_PYTHON_20, PYTHON::NFA_PYTHON_21, PYTHON::NFA_PYTHON_22, PYTHON::NFA_PYTHON_23, PYTHON::NFA_PYTHON_24, PYTHON::NFA_PYTHON_25, PYTHON::NFA_PYTHON_26, PYTHON::NFA_PYTHON_27, PYTHON::NFA_PYTHON_28, PYTHON::NFA_PYTHON_29, PYTHON::NFA_PYTHON_30, PYTHON::NFA_PYTHON_31, PYTHON::NFA_PYTHON_32, PYTHON::NFA_PYTHON_33, PYTHON::NFA_PYTHON_34, PYTHON::NFA_PYTHON_35, PYTHON::NFA_PYTHON_36, PYTHON::NFA_PYTHON_37, PYTHON::NFA_PYTHON_38, PYTHON::NFA_PYTHON_39, PYTHON::NFA_PYTHON_40, PYTHON::NFA_PYTHON_41, PYTHON::NFA_PYTHON_42, PYTHON::NFA_PYTHON_43, PYTHON::NFA_PYTHON_44, PYTHON::NFA_PYTHON_45, PYTHON::NFA_PYTHON_46, PYTHON::NFA_PYTHON_47, PYTHON::NFA_PYTHON_48, PYTHON::NFA_PYTHON_49, PYTHON::NFA_PYTHON_50, PYTHON::NFA_PYTHON_51, PYTHON::NFA_PYTHON_52, PYTHON::NFA_PYTHON_53, PYTHON::NFA_PYTHON_54, PYTHON::NFA_PYTHON_55, PYTHON::NFA_PYTHON_56, PYTHON::NFA_PYTHON_57, PYTHON::NFA_PYTHON_58, PYTHON::NFA_PYTHON_59, PYTHON::NFA_PYTHON_60, PYTHON::NFA_PYTHON_61, PYTHON::NFA_PYTHON_62, PYTHON::NFA_PYTHON_63, PYTHON::NFA_PYTHON_64, PYTHON::NFA_PYTHON_65, PYTHON::NFA_PYTHON_66, PYTHON::NFA_PYTHON_67, PYTHON::NFA_PYTHON_68, PYTHON::NFA_PYTHON_69, PYTHON::NFA_PYTHON_70, PYTHON::NFA_PYTHON_71, PYTHON::NFA_PYTHON_72, PYTHON::NFA_PYTHON_73, PYTHON::NFA_PYTHON_74, PYTHON::NFA_PYTHON_75, PYTHON::NFA_PYTHON_76, PYTHON::NFA_PYTHON_77, PYTHON::NFA_PYTHON_78, PYTHON::NFA_PYTHON_79, PYTHON::NFA_PYTHON_80, PYTHON::NFA_PYTHON_81, PYTHON::NFA_PYTHON_82, PYTHON::NFA_PYTHON_83, PYTHON::NFA_PYTHON_84, PYTHON::NFA_PYTHON_85, PYTHON::NFA_PYTHON_86, PYTHON::NFA_PYTHON_87, PYTHON::NFA_PYTHON_88, PYTHON::NFA_PYTHON_89, PYTHON::NFA_PYTHON_90, PYTHON::NFA_PYTHON_91, PYTHON::NFA_PYTHON_92, PYTHON::NFA_PYTHON_93, PYTHON::NFA_PYTHON_94, PYTHON::NFA_PYTHON_95, PYTHON::NFA_PYTHON_96, PYTHON::NFA_PYTHON_97, PYTHON::NFA_PYTHON_98, PYTHON::NFA_PYTHON_99, PYTHON::NFA_PYTHON_100, PYTHON::NFA_PYTHON_101, PYTHON::NFA_PYTHON_102, PYTHON::NFA_PYTHON_103, PYTHON::NFA_PYTHON_104, PYTHON::NFA_PYTHON_105, PYTHON::NFA_PYTHON_106, PYTHON::NFA_PYTHON_107, PYTHON::NFA_PYTHON_108, PYTHON::NFA_PYTHON_109, PYTHON::NFA_PYTHON_110, PYTHON::NFA_PYTHON_111, PYTHON::NFA_PYTHON_112, PYTHON::NFA_PYTHON_113, PYTHON::NFA_PYTHON_114, PYTHON::NFA_PYTHON_115, PYTHON::NFA_PYTHON_116, PYTHON::NFA_PYTHON_117, PYTHON::NFA_PYTHON_118, PYTHON::NFA_PYTHON_119, PYTHON::NFA_PYTHON_120, PYTHON::NFA_PYTHON_121, PYTHON::NFA_PYTHON_122, PYTHON::NFA_PYTHON_123, PYTHON::NFA_PYTHON_124, PYTHON::NFA_PYTHON_125, PYTHON::NFA_PYTHON_126, PYTHON::NFA_PYTHON_127, PYTHON::NFA_PYTHON_128, PYTHON::NFA_PYTHON_129, PYTHON::NFA_PYTHON_130, PYTHON::NFA_PYTHON_131, PYTHON::NFA_PYTHON_132, PYTHON::NFA_PYTHON_133, PYTHON::NFA_PYTHON_134, PYTHON::NFA_PYTHON_135, PYTHON::NFA_PYTHON_136, PYTHON::NFA_PYTHON_137, PYTHON::NFA_PYTHON_138, PYTHON::NFA_PYTHON_139, PYTHON::NFA_PYTHON_140, PYTHON::NFA_PYTHON_141, PYTHON::NFA_PYTHON_142, PYTHON::NFA_PYTHON_143, PYTHON::NFA_PYTHON_144, PYTHON::NFA_PYTHON_145, PYTHON::NFA_PYTHON_146, PYTHON::NFA_PYTHON_147, PYTHON::NFA_PYTHON_148, PYTHON::NFA_PYTHON_149, PYTHON::NFA_PYTHON_150, PYTHON::NFA_PYTHON_151, PYTHON::NFA_PYTHON_152, PYTHON::NFA_PYTHON_153, PYTHON::NFA_PYTHON_154, PYTHON::NFA_PYTHON_155, PYTHON::NFA_PYTHON_156, PYTHON::NFA_PYTHON_157, PYTHON::NFA_PYTHON_158, PYTHON::NFA_PYTHON_159, PYTHON::NFA_PYTHON_160, PYTHON::NFA_PYTHON_161, PYTHON::NFA_PYTHON_162, PYTHON::NFA_PYTHON_163, PYTHON::NFA_PYTHON_164, PYTHON::NFA_PYTHON_165, PYTHON::NFA_PYTHON_166, PYTHON::NFA_PYTHON_167, PYTHON::NFA_PYTHON_168, PYTHON::NFA_PYTHON_169, PYTHON::NFA_PYTHON_170, PYTHON::NFA_PYTHON_171, PYTHON::NFA_PYTHON_172, PYTHON::NFA_PYTHON_173, PYTHON::NFA_PYTHON_174, PYTHON::NFA_PYTHON_175, PYTHON::NFA_PYTHON_176, PYTHON::NFA_PYTHON_177, PYTHON::NFA_PYTHON_178, PYTHON::NFA_PYTHON_179, PYTHON::NFA_PYTHON_180, PYTHON::NFA_PYTHON_181, PYTHON::NFA_PYTHON_182, PYTHON::NFA_PYTHON_183, PYTHON::NFA_PYTHON_184, PYTHON::NFA_PYTHON_185, PYTHON::NFA_PYTHON_186, PYTHON::NFA_PYTHON_187, PYTHON::NFA_PYTHON_188, PYTHON::NFA_PYTHON_189, PYTHON::NFA_PYTHON_190, PYTHON::NFA_PYTHON_191, PYTHON::NFA_PYTHON_192, PYTHON::NFA_PYTHON_193, PYTHON::NFA_PYTHON_194, PYTHON::NFA_PYTHON_195, PYTHON::NFA_PYTHON_196, PYTHON::NFA_PYTHON_197, PYTHON::NFA_PYTHON_198, PYTHON::NFA_PYTHON_199, PYTHON::NFA_PYTHON_200, PYTHON::NFA_PYTHON_201, PYTHON::NFA_PYTHON_202, PYTHON::NFA_PYTHON_203, PYTHON::NFA_PYTHON_204, PYTHON::NFA_PYTHON_205, PYTHON::NFA_PYTHON_206, PYTHON::NFA_PYTHON_207, PYTHON::NFA_PYTHON_208, PYTHON::NFA_PYTHON_209, PYTHON::NFA_PYTHON_210, PYTHON::NFA_PYTHON_211, PYTHON::NFA_PYTHON_212, PYTHON::NFA_PYTHON_213, PYTHON::NFA_PYTHON_214, PYTHON::NFA_PYTHON_215, PYTHON::NFA_PYTHON_216, PYTHON::NFA_PYTHON_217, PYTHON::NFA_PYTHON_218, PYTHON::NFA_PYTHON_219, PYTHON::NFA_PYTHON_220, PYTHON::NFA_PYTHON_221, PYTHON::NFA_PYTHON_222, PYTHON::NFA_PYTHON_223, PYTHON::NFA_PYTHON_224, PYTHON::NFA_PYTHON_225, PYTHON::NFA_PYTHON_226, PYTHON::NFA_PYTHON_227, PYTHON::NFA_PYTHON_228, PYTHON::NFA_PYTHON_229, PYTHON::NFA_PYTHON_230, PYTHON::NFA_PYTHON_231, PYTHON::NFA_PYTHON_232, PYTHON::NFA_PYTHON_233, PYTHON::NFA_PYTHON_234, PYTHON::NFA_PYTHON_235, PYTHON::NFA_PYTHON_236, PYTHON::NFA_PYTHON_237, PYTHON::NFA_PYTHON_238, PYTHON::NFA_PYTHON_239, PYTHON::NFA_PYTHON_240, PYTHON::NFA_PYTHON_241, PYTHON::NFA_PYTHON_242, PYTHON::NFA_PYTHON_243, PYTHON::NFA_PYTHON_244, PYTHON::NFA_PYTHON_245, PYTHON::NFA_PYTHON_246, PYTHON::NFA_PYTHON_247, PYTHON::NFA_PYTHON_248, PYTHON::NFA_PYTHON_249, PYTHON::NFA_PYTHON_250, PYTHON::NFA_PYTHON_251, PYTHON::NFA_PYTHON_252, PYTHON::NFA_PYTHON_253, PYTHON::NFA_PYTHON_254, PYTHON::NFA_PYTHON_255, PYTHON::NFA_PYTHON_256, PYTHON::NFA_PYTHON_257, PYTHON::NFA_PYTHON_258, PYTHON::NFA_PYTHON_259, PYTHON::NFA_PYTHON_260, PYTHON::NFA_PYTHON_261, PYTHON::NFA_PYTHON_262, PYTHON::NFA_PYTHON_263, PYTHON::NFA_PYTHON_264, PYTHON::NFA_PYTHON_265, PYTHON::NFA_PYTHON_266, PYTHON::NFA_PYTHON_267, PYTHON::NFA_PYTHON_268, PYTHON::NFA_PYTHON_269, PYTHON::NFA_PYTHON_270, PYTHON::NFA_PYTHON_271, PYTHON::NFA_PYTHON_272, PYTHON::NFA_PYTHON_273, PYTHON::NFA_PYTHON_274, PYTHON::NFA_PYTHON_275, PYTHON::NFA_PYTHON_276, PYTHON::NFA_PYTHON_277, PYTHON::NFA_PYTHON_278, PYTHON::NFA_PYTHON_279, PYTHON::NFA_PYTHON_280, PYTHON::NFA_PYTHON_281, PYTHON::NFA_PYTHON_282, PYTHON::NFA_PYTHON_283, PYTHON::NFA_PYTHON_284, PYTHON::NFA_PYTHON_285, PYTHON::NFA_PYTHON_286, PYTHON::NFA_PYTHON_287, PYTHON::NFA_PYTHON_288, PYTHON::NFA_PYTHON_289, PYTHON::NFA_PYTHON_290, PYTHON::NFA_PYTHON_291, PYTHON::NFA_PYTHON_292, PYTHON::NFA_PYTHON_293, PYTHON::NFA_PYTHON_294, PYTHON::NFA_PYTHON_295, PYTHON::NFA_PYTHON_296, PYTHON::NFA_PYTHON_297, PYTHON::NFA_PYTHON_298, PYTHON::NFA_PYTHON_299, PYTHON::NFA_PYTHON_300, PYTHON::NFA_PYTHON_301, PYTHON::NFA_PYTHON_302, PYTHON::NFA_PYTHON_303, PYTHON::NFA_PYTHON_304, PYTHON::NFA_PYTHON_305, PYTHON::NFA_PYTHON_306, PYTHON::NFA_PYTHON_307, PYTHON::NFA_PYTHON_308, PYTHON::NFA_PYTHON_309, PYTHON::NFA_PYTHON_310, PYTHON::NFA_PYTHON_311, PYTHON::NFA_PYTHON_312, PYTHON::NFA_PYTHON_313, PYTHON::NFA_PYTHON_314, PYTHON::NFA_PYTHON_315, PYTHON::NFA_PYTHON_316, PYTHON::NFA_PYTHON_317, PYTHON::NFA_PYTHON_318, PYTHON::NFA_PYTHON_319, PYTHON::NFA_PYTHON_320, PYTHON::NFA_PYTHON_321, PYTHON::NFA_PYTHON_322, PYTHON::NFA_PYTHON_323, PYTHON::NFA_PYTHON_324, PYTHON::NFA_PYTHON_325, PYTHON::NFA_PYTHON_326, PYTHON::NFA_PYTHON_327, PYTHON::NFA_PYTHON_328, PYTHON::NFA_PYTHON_329, PYTHON::NFA_PYTHON_330, PYTHON::NFA_PYTHON_331, PYTHON::NFA_PYTHON_332, PYTHON::NFA_PYTHON_333, PYTHON::NFA_PYTHON_334, PYTHON::NFA_PYTHON_335, PYTHON::NFA_PYTHON_336, PYTHON::NFA_PYTHON_337, PYTHON::NFA_PYTHON_338, PYTHON::NFA_PYTHON_339, PYTHON::NFA_PYTHON_340, PYTHON::NFA_PYTHON_341, PYTHON::NFA_PYTHON_342, PYTHON::NFA_PYTHON_343, PYTHON::NFA_PYTHON_344, PYTHON::NFA_PYTHON_345, PYTHON::NFA_PYTHON_346, PYTHON::NFA_PYTHON_347, PYTHON::NFA_PYTHON_348, PYTHON::NFA_PYTHON_349, PYTHON::NFA_PYTHON_350, PYTHON::NFA_PYTHON_351, PYTHON::NFA_PYTHON_352, PYTHON::NFA_PYTHON_353, PYTHON::NFA_PYTHON_354};
        }

    }
}
