/* Generated by: JavaCC 21 Parser Generator. PythonParser.java */
package org.parsers.python;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.concurrent.CancellationException;
import org.parsers.python.ast.Module;
import org.parsers.python.ast.SignedNumber;
import org.parsers.python.ast.Strings;
import org.parsers.python.ast.Slice;
import org.parsers.python.ast.Slices;
import org.parsers.python.ast.Statement;
import org.parsers.python.ast.SimpleStatement;
import org.parsers.python.ast.SmallStatement;
import org.parsers.python.ast.CompoundStatement;
import org.parsers.python.ast.ReturnStatement;
import org.parsers.python.ast.GlobalStatement;
import org.parsers.python.ast.NonlocalStatement;
import org.parsers.python.ast.AssertStatement;
import org.parsers.python.ast.RaiseStatement;
import org.parsers.python.ast.Block;
import org.parsers.python.ast.ElseBlock;
import org.parsers.python.ast.ExceptBlock;
import org.parsers.python.ast.IfStatement;
import org.parsers.python.ast.FinallyBlock;
import org.parsers.python.ast.WhileStatement;
import org.parsers.python.ast.WithStatement;
import org.parsers.python.ast.WithItem;
import org.parsers.python.ast.ForStatement;
import org.parsers.python.ast.TryStatement;
import org.parsers.python.ast.DelStatement;
import org.parsers.python.ast.NamedExpression;
import org.parsers.python.ast.DottedName;
import org.parsers.python.ast.ImportStatement;
import org.parsers.python.ast.ImportFromTargets;
import org.parsers.python.ast.StarNamedExpression;
import org.parsers.python.ast.StarExpression;
import org.parsers.python.ast.StarExpressions;
import org.parsers.python.ast.StarNamedExpressions;
import org.parsers.python.ast.BitwiseOr;
import org.parsers.python.ast.BitwiseXor;
import org.parsers.python.ast.BitwiseAnd;
import org.parsers.python.ast.ShiftExpression;
import org.parsers.python.ast.AdditiveExpression;
import org.parsers.python.ast.MultiplicativeExpression;
import org.parsers.python.ast.UnaryExpression;
import org.parsers.python.ast.Power;
import org.parsers.python.ast.Tuple;
import org.parsers.python.ast.Group;
import org.parsers.python.ast.AwaitPrimary;
import org.parsers.python.ast.DotName;
import org.parsers.python.ast.SliceExpression;
import org.parsers.python.ast.GenExpression;
import org.parsers.python.ast.FunctionCall;
import org.parsers.python.ast.YieldExpression;
import org.parsers.python.ast.YieldStatement;
import org.parsers.python.ast.AnnotatedRhs;
import org.parsers.python.ast.Decorators;
import org.parsers.python.ast.Annotation;
import org.parsers.python.ast.InvocationArguments;
import org.parsers.python.ast.Argument;
import org.parsers.python.ast.KeyValuePair;
import org.parsers.python.ast.DoubleStarredKeyValuePair;
import org.parsers.python.ast.DoubleStarredKeyValuePairs;
import org.parsers.python.ast.Dict;
import org.parsers.python.ast.DictComp;
import org.parsers.python.ast.Set;
import org.parsers.python.ast.SetComp;
import org.parsers.python.ast.ClassDefinition;
import org.parsers.python.ast.FunctionDefinition;
import org.parsers.python.ast.LambdaDefinition;
import org.parsers.python.ast.Expression;
import org.parsers.python.ast.Disjunction;
import org.parsers.python.ast.Conjunction;
import org.parsers.python.ast.Inversion;
import org.parsers.python.ast.Comparison;
import org.parsers.python.ast.StarTarget;
import org.parsers.python.ast.StarTargets;
import org.parsers.python.ast.ForIfClause;
import org.parsers.python.ast.GenExp;
import org.parsers.python.ast.List;
import org.parsers.python.ast.ListComp;
import org.parsers.python.ast.StarEtc;
import org.parsers.python.ast.ParamMaybeDefault;
import org.parsers.python.ast.KeyWords;
import org.parsers.python.ast.Parameters;
import org.parsers.python.ast.SimpleAssignTarget;
import org.parsers.python.ast.Assignment;
import org.parsers.python.ast.MatchStatement;
import org.parsers.python.ast.CaseBlock;
import org.parsers.python.ast.Patterns;
import org.parsers.python.ast.StarPattern;
import org.parsers.python.ast.ClosedPattern;
import org.parsers.python.ast.GroupPattern;
import org.parsers.python.ast.KeyValuePattern;
import org.parsers.python.ast.ItemsPattern;
import org.parsers.python.ast.MappingPattern;
import org.parsers.python.ast.DoubleStarPattern;
import org.parsers.python.ast.LiteralPattern;
import org.parsers.python.ast.MaybeSequencePattern;
import org.parsers.python.ast.OpenSequencePattern;
import org.parsers.python.ast.SequencePattern;
import org.parsers.python.ast.ClassPattern;
import org.parsers.python.ast.PositionalPatterns;
import org.parsers.python.ast.KeywordPattern;
import org.parsers.python.ast.KeywordPatterns;
import org.parsers.python.ast.OrPattern;
import org.parsers.python.ast.Pattern;
import org.parsers.python.ast.SubjectExpression;
import org.parsers.python.ast.Attribute;
import static org.parsers.python.PythonConstants.TokenType.*;
public class PythonParser implements PythonConstants {
    static final int UNLIMITED= Integer.MAX_VALUE;
    // The last token successfully "consumed"
    Token lastConsumedToken;
    private TokenType nextTokenType;
    private Token currentLookaheadToken;
    private int remainingLookahead;
    private boolean hitFailure, passedPredicate;
    private String currentlyParsedProduction, currentLookaheadProduction;
    private int lookaheadRoutineNesting, passedPredicateThreshold= -1;
    private boolean legacyGlitchyLookahead= false;
    private boolean cancelled;
    public void cancel() {
        cancelled= true;
    }

    public boolean isCancelled() {
        return cancelled;
    }

    /** Generated Lexer. */
    public PythonLexer token_source;
    public void setInputSource(String inputSource) {
        token_source.setInputSource(inputSource);
    }

    String getInputSource() {
        return token_source.getInputSource();
    }

    //=================================
    // Generated constructors
    //=================================
    public PythonParser(String inputSource, CharSequence content) {
        this(new PythonLexer(inputSource, content));
    }

    public PythonParser(CharSequence content) {
        this("input", content);
    }

    /**
   * @param inputSource just the name of the input source (typically the filename) that 
   * will be used in error messages and so on.
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public PythonParser(String inputSource, Path path) throws IOException {
        this(inputSource, PythonLexer.stringFromBytes(Files.readAllBytes(path)));
    }

    public PythonParser(String inputSource, Path path, Charset charset) throws IOException {
        this(inputSource, PythonLexer.stringFromBytes(Files.readAllBytes(path), charset));
    }

    /**
   * @param path The location (typically the filename) from which to get the input to parse
   */
    public PythonParser(Path path) throws IOException {
        this(path.toString(), path);
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public PythonParser(java.io.InputStream stream) {
        this(new InputStreamReader(stream));
    }

    /**
   * @Deprecated Use the constructor that takes a #java.nio.files.Path or just 
   * a String (i.e. CharSequence) directly.
   */
    public PythonParser(Reader reader) {
        this(new PythonLexer("input", reader));
    }

    /** Constructor with user supplied Lexer. */
    public PythonParser(PythonLexer lexer) {
        token_source= lexer;
        lastConsumedToken= lexer.DUMMY_START_TOKEN;
        lastConsumedToken.setTokenSource(lexer);
    }

    // If the next token is cached, it returns that
    // Otherwise, it goes to the token_source, i.e. the Lexer.
    final private Token nextToken(final Token tok) {
        Token result= token_source.getNextToken(tok);
        while (result.isUnparsed()) {
            result= token_source.getNextToken(result);
        }
        nextTokenType= null;
        return result;
    }

    /**
   * @return the next Token off the stream. This is the same as #getToken(1)
   */
    final public Token getNextToken() {
        return getToken(1);
    }

    /**
 * @param index how many tokens to look ahead
 * @return the specific regular (i.e. parsed) Token index ahead/behind in the stream. 
 * If we are in a lookahead, it looks ahead from the currentLookaheadToken
 * Otherwise, it is the lastConsumedToken. If you pass in a negative
 * number it goes backward.
 */
    final public Token getToken(final int index) {
        Token t= currentLookaheadToken== null?lastConsumedToken:
        currentLookaheadToken;
        for (int i= 0; i<index; i++) {
            t= nextToken(t);
        }
        for (int i= 0; i> index; i--) {
            t= t.getPrevious();
            if (t== null) break;
        }
        return t;
    }

    private final TokenType nextTokenType() {
        if (nextTokenType== null) {
            nextTokenType= nextToken(lastConsumedToken).getType();
        }
        return nextTokenType;
    }

    boolean activateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.add(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType= null;
        }
        return result;
    }

    boolean deactivateTokenTypes(TokenType...types) {
        boolean result= false;
        for (TokenType tt : types) {
            result|=token_source.activeTokenTypes.remove(tt);
        }
        if (result) {
            token_source.reset(getToken(0));
            nextTokenType= null;
        }
        return result;
    }

    private static HashMap<TokenType[], EnumSet<TokenType> > enumSetCache= new HashMap<> ();
    private static EnumSet<TokenType> tokenTypeSet(TokenType first, TokenType...rest) {
        TokenType[] key= new TokenType[1+rest.length];
        key[0]= first;
        if (rest.length> 0) {
            System.arraycopy(rest, 0, key, 1, rest.length);
        }
        Arrays.sort(key);
        if (enumSetCache.containsKey(key)) {
            return enumSetCache.get(key);
        }
        EnumSet<TokenType> result= (rest.length== 0)?EnumSet.of(first):
        EnumSet.of(first, rest);
        enumSetCache.put(key, result);
        return result;
    }

    // Python.javacc:22:1
    final public Module Module() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Module";
        Module Module1= null;
        if (buildTree) {
            Module1= new Module();
            openNodeScope(Module1);
        }
        ParseException parseException2= null;
        int callStackSize3= parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Python.javacc:23:4
            while (true) {
                if (!(first_set$Python_javacc$23$5.contains(nextTokenType()))) break;
                // Code for NonTerminal specified at Python.javacc:23:5
                pushOntoCallStack("Module", "Python.javacc", 23, 5);
                try {
                    Statement();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for EndOfFile specified at Python.javacc:24:4
            consumeToken(EOF);
            // Code for CodeBlock specified at Python.javacc:25:4
            return Module1;
        }
        catch(ParseException e) {
            parseException2= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3);
            if (Module1!=null) {
                if (parseException2== null) {
                    closeNodeScope(Module1, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Number_FIRST_SET= tokenTypeSet(DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX);
    // Python.javacc:28:1
    final public void Number() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Number";
        // Code for ExpansionChoice specified at Python.javacc:29:3
        if (nextTokenType()== HEXNUMBER) {
            // Code for RegexpRef specified at Python.javacc:29:3
            consumeToken(HEXNUMBER);
        }
        else if (nextTokenType()== BINNUMBER) {
            // Code for RegexpRef specified at Python.javacc:29:17
            consumeToken(BINNUMBER);
        }
        else if (nextTokenType()== OCTNUMBER) {
            // Code for RegexpRef specified at Python.javacc:29:31
            consumeToken(OCTNUMBER);
        }
        else if (nextTokenType()== DECNUMBER) {
            // Code for RegexpRef specified at Python.javacc:29:45
            consumeToken(DECNUMBER);
        }
        else if (nextTokenType()== FLOAT) {
            // Code for RegexpRef specified at Python.javacc:29:59
            consumeToken(FLOAT);
        }
        else if (nextTokenType()== COMPLEX) {
            // Code for RegexpRef specified at Python.javacc:29:69
            consumeToken(COMPLEX);
        }
        else  {
            pushOntoCallStack("Number", "Python.javacc", 29, 3);
            throw new ParseException(this, Number_FIRST_SET, parsingStack);
        }
    }

    // Python.javacc:32:1
    final public void SignedNumber() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SignedNumber";
        SignedNumber SignedNumber2= null;
        if (buildTree) {
            SignedNumber2= new SignedNumber();
            openNodeScope(SignedNumber2);
        }
        ParseException parseException78= null;
        int callStackSize79= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:33:3
            if (nextTokenType()== MINUS) {
                // Code for RegexpStringLiteral specified at Python.javacc:33:4
                consumeToken(MINUS);
            }
            // Code for NonTerminal specified at Python.javacc:34:3
            pushOntoCallStack("SignedNumber", "Python.javacc", 34, 3);
            try {
                Number();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Python.javacc:35:3
            if (nextTokenType()== MINUS||nextTokenType== PLUS) {
                if (nextTokenType()== PLUS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:35:5
                    consumeToken(PLUS);
                }
                else if (nextTokenType()== MINUS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:35:9
                    consumeToken(MINUS);
                }
                else  {
                    pushOntoCallStack("SignedNumber", "Python.javacc", 35, 5);
                    throw new ParseException(this, first_set$Python_javacc$35$5, parsingStack);
                }
                // Code for RegexpRef specified at Python.javacc:35:14
                consumeToken(COMPLEX);
            }
        }
        catch(ParseException e) {
            parseException78= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize79);
            if (SignedNumber2!=null) {
                if (parseException78== null) {
                    closeNodeScope(SignedNumber2, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:38:1
    final public void Strings() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Strings";
        Strings Strings3= null;
        if (buildTree) {
            Strings3= new Strings();
            openNodeScope(Strings3);
        }
        ParseException parseException131= null;
        int callStackSize132= parsingStack.size();
        try {
            // Code for OneOrMore specified at Python.javacc:38:11
            while (true) {
                // Code for RegexpRef specified at Python.javacc:38:12
                consumeToken(STRING_LITERAL);
                if (!(nextTokenType()== STRING_LITERAL)) break;
            }
        }
        catch(ParseException e) {
            parseException131= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize132);
            if (Strings3!=null) {
                if (parseException131== null) {
                    closeNodeScope(Strings3, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> AtomicExpression_FIRST_SET= AtomicExpression_FIRST_SET_init();
    static private EnumSet<TokenType> AtomicExpression_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, ELLIPSIS, FALSE, NONE, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:40:1
    final public void AtomicExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "AtomicExpression";
        // Code for ExpansionChoice specified at Python.javacc:41:5
        if (nextTokenType()== NAME) {
            // Code for RegexpRef specified at Python.javacc:41:5
            consumeToken(NAME);
        }
        else if (first_set$Python_javacc$43$5.contains(nextTokenType())) {
            // Code for NonTerminal specified at Python.javacc:43:5
            pushOntoCallStack("AtomicExpression", "Python.javacc", 43, 5);
            try {
                Number();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== STRING_LITERAL) {
            // Code for NonTerminal specified at Python.javacc:45:5
            pushOntoCallStack("AtomicExpression", "Python.javacc", 45, 5);
            try {
                Strings();
            }
            finally {
                popCallStack();
            }
        }
        else if (nextTokenType()== TRUE) {
            // Code for RegexpStringLiteral specified at Python.javacc:47:5
            consumeToken(TRUE);
        }
        else if (nextTokenType()== FALSE) {
            // Code for RegexpStringLiteral specified at Python.javacc:49:5
            consumeToken(FALSE);
        }
        else if (nextTokenType()== NONE) {
            // Code for RegexpStringLiteral specified at Python.javacc:51:5
            consumeToken(NONE);
        }
        else if (nextTokenType()== PEG_PARSER) {
            // Code for RegexpStringLiteral specified at Python.javacc:53:5
            consumeToken(PEG_PARSER);
        }
        else if (nextTokenType()== LPAREN) {
            if (scan$Python_javacc$55$6()) {
                // Code for NonTerminal specified at Python.javacc:55:6
                pushOntoCallStack("AtomicExpression", "Python.javacc", 55, 6);
                try {
                    Tuple();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$55$14()) {
                // Code for NonTerminal specified at Python.javacc:55:14
                pushOntoCallStack("AtomicExpression", "Python.javacc", 55, 14);
                try {
                    GenExp();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for NonTerminal specified at Python.javacc:55:23
                pushOntoCallStack("AtomicExpression", "Python.javacc", 55, 23);
                try {
                    Group();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("AtomicExpression", "Python.javacc", 55, 6);
                throw new ParseException(this, first_set$Python_javacc$55$6, parsingStack);
            }
        }
        else if (nextTokenType()== LBRACKET) {
            if (scan$Python_javacc$57$6()) {
                // Code for NonTerminal specified at Python.javacc:57:6
                pushOntoCallStack("AtomicExpression", "Python.javacc", 57, 6);
                try {
                    ListComp();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LBRACKET) {
                // Code for NonTerminal specified at Python.javacc:57:17
                pushOntoCallStack("AtomicExpression", "Python.javacc", 57, 17);
                try {
                    List();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("AtomicExpression", "Python.javacc", 57, 6);
                throw new ParseException(this, first_set$Python_javacc$57$6, parsingStack);
            }
        }
        else if (nextTokenType()== LBRACE) {
            if (scan$Python_javacc$59$6()) {
                // Code for NonTerminal specified at Python.javacc:59:6
                pushOntoCallStack("AtomicExpression", "Python.javacc", 59, 6);
                try {
                    SetComp();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$59$16()) {
                // Code for NonTerminal specified at Python.javacc:59:16
                pushOntoCallStack("AtomicExpression", "Python.javacc", 59, 16);
                try {
                    DictComp();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$59$27()) {
                // Code for NonTerminal specified at Python.javacc:59:27
                pushOntoCallStack("AtomicExpression", "Python.javacc", 59, 27);
                try {
                    Dict();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LBRACE) {
                // Code for NonTerminal specified at Python.javacc:59:34
                pushOntoCallStack("AtomicExpression", "Python.javacc", 59, 34);
                try {
                    Set();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("AtomicExpression", "Python.javacc", 59, 6);
                throw new ParseException(this, first_set$Python_javacc$59$6, parsingStack);
            }
        }
        else if (nextTokenType()== ELLIPSIS) {
            // Code for RegexpStringLiteral specified at Python.javacc:61:5
            consumeToken(ELLIPSIS);
        }
        else  {
            pushOntoCallStack("AtomicExpression", "Python.javacc", 41, 5);
            throw new ParseException(this, AtomicExpression_FIRST_SET, parsingStack);
        }
    }

    static private final EnumSet<TokenType> Slice_FIRST_SET= Slice_FIRST_SET_init();
    static private EnumSet<TokenType> Slice_FIRST_SET_init() {
        return tokenTypeSet(COLON, LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:64:1
    final public void Slice() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Slice";
        // Code for ExpansionChoice specified at Python.javacc:65:5
        Slice Slice4= null;
        if (buildTree) {
            Slice4= new Slice();
            openNodeScope(Slice4);
        }
        ParseException parseException314= null;
        int callStackSize315= parsingStack.size();
        try {
            if (scan$Python_javacc$65$5()) {
                // Code for ZeroOrOne specified at Python.javacc:65:5
                if (first_set$Python_javacc$65$6.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:65:6
                    pushOntoCallStack("Slice", "Python.javacc", 65, 6);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpStringLiteral specified at Python.javacc:65:18
                consumeToken(COLON);
                // Code for ZeroOrOne specified at Python.javacc:65:27
                if (first_set$Python_javacc$65$28.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:65:28
                    pushOntoCallStack("Slice", "Python.javacc", 65, 28);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:65:40
                if (nextTokenType()== COLON) {
                    // Code for RegexpStringLiteral specified at Python.javacc:65:41
                    consumeToken(COLON);
                    // Code for ZeroOrOne specified at Python.javacc:65:45
                    if (first_set$Python_javacc$65$46.contains(nextTokenType())) {
                        // Code for NonTerminal specified at Python.javacc:65:46
                        pushOntoCallStack("Slice", "Python.javacc", 65, 46);
                        try {
                            Expression();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                }
            }
            else if (first_set$Python_javacc$67$5.contains(nextTokenType())) {
                // Code for ZeroOrOne specified at Python.javacc:67:5
                if (scan$Python_javacc$67$6()) {
                    // Code for RegexpRef specified at Python.javacc:67:9
                    consumeToken(NAME);
                    // Code for RegexpStringLiteral specified at Python.javacc:67:16
                    consumeToken(COLONEQUALS);
                }
                // Code for NonTerminal specified at Python.javacc:67:22
                pushOntoCallStack("Slice", "Python.javacc", 67, 22);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Slice", "Python.javacc", 65, 5);
                throw new ParseException(this, Slice_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException314= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize315);
            if (Slice4!=null) {
                if (parseException314== null) {
                    closeNodeScope(Slice4, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:70:1
    final public void Slices() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Slices";
        Slices Slices5= null;
        if (buildTree) {
            Slices5= new Slices();
            openNodeScope(Slices5);
        }
        ParseException parseException398= null;
        int callStackSize399= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:70:10
            consumeToken(LBRACKET);
            // Code for NonTerminal specified at Python.javacc:70:14
            pushOntoCallStack("Slices", "Python.javacc", 70, 14);
            try {
                Slice();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:70:20
            while (true) {
                if (!(scan$Python_javacc$70$21())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:70:21
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:70:31
                pushOntoCallStack("Slices", "Python.javacc", 70, 31);
                try {
                    Slice();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:70:39
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:70:40
                consumeToken(COMMA);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:70:45
            consumeToken(RBRACKET);
        }
        catch(ParseException e) {
            parseException398= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize399);
            if (Slices5!=null) {
                if (parseException398== null) {
                    closeNodeScope(Slices5, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Statement_FIRST_SET= Statement_FIRST_SET_init();
    static private EnumSet<TokenType> Statement_FIRST_SET_init() {
        return tokenTypeSet(AT, LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, _ASSERT, ASYNC, AWAIT, BREAK, CLASS, CONTINUE, DEF, DEL, FOR, FROM, GLOBAL, IF, FALSE, IMPORT, LAMBDA, MATCH, NONLOCAL, NONE, NOT, PASS, PEG_PARSER, RAISE, RETURN, TRUE, TRY, WHILE, WITH, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:72:1
    final public void Statement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Statement";
        // Code for ExpansionChoice specified at Python.javacc:73:4
        Statement Statement6= null;
        if (buildTree) {
            Statement6= new Statement();
            openNodeScope(Statement6);
        }
        ParseException parseException442= null;
        int callStackSize443= parsingStack.size();
        try {
            if (scan$Python_javacc$73$4()) {
                // Code for NonTerminal specified at Python.javacc:73:4
                pushOntoCallStack("Statement", "Python.javacc", 73, 4);
                try {
                    MatchStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$75$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:75:4
                pushOntoCallStack("Statement", "Python.javacc", 75, 4);
                try {
                    SimpleStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$77$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:77:4
                pushOntoCallStack("Statement", "Python.javacc", 77, 4);
                try {
                    CompoundStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Statement", "Python.javacc", 73, 4);
                throw new ParseException(this, Statement_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException442= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize443);
            if (Statement6!=null) {
                if (parseException442== null) {
                    closeNodeScope(Statement6, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:80:1
    final public void SimpleStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SimpleStatement";
        SimpleStatement SimpleStatement7= null;
        if (buildTree) {
            SimpleStatement7= new SimpleStatement();
            openNodeScope(SimpleStatement7);
        }
        ParseException parseException470= null;
        int callStackSize471= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:80:24
            pushOntoCallStack("SimpleStatement", "Python.javacc", 80, 24);
            try {
                SmallStatement();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:80:39
            while (true) {
                if (!(scan$Python_javacc$80$40())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:80:40
                consumeToken(SEMICOLON);
                // Code for NonTerminal specified at Python.javacc:80:50
                pushOntoCallStack("SimpleStatement", "Python.javacc", 80, 50);
                try {
                    SmallStatement();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:80:67
            if (nextTokenType()== SEMICOLON) {
                // Code for RegexpStringLiteral specified at Python.javacc:80:68
                consumeToken(SEMICOLON);
            }
            // Code for RegexpRef specified at Python.javacc:80:73
            consumeToken(NEWLINE);
        }
        catch(ParseException e) {
            parseException470= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize471);
            if (SimpleStatement7!=null) {
                if (parseException470== null) {
                    closeNodeScope(SimpleStatement7, nodeArity()> 2);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> SmallStatement_FIRST_SET= SmallStatement_FIRST_SET_init();
    static private EnumSet<TokenType> SmallStatement_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, _ASSERT, AWAIT, BREAK, CONTINUE, DEL, FROM, GLOBAL, FALSE, IMPORT, LAMBDA, NONLOCAL, NONE, NOT, PASS, PEG_PARSER, RAISE, RETURN, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:82:1
    final public void SmallStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SmallStatement";
        // Code for ExpansionChoice specified at Python.javacc:83:4
        SmallStatement SmallStatement8= null;
        if (buildTree) {
            SmallStatement8= new SmallStatement();
            openNodeScope(SmallStatement8);
        }
        ParseException parseException510= null;
        int callStackSize511= parsingStack.size();
        try {
            if (scan$Python_javacc$83$4()) {
                // Code for NonTerminal specified at Python.javacc:83:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 83, 4);
                try {
                    Assignment();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$85$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:85:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 85, 4);
                try {
                    StarExpressions();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== RETURN) {
                // Code for NonTerminal specified at Python.javacc:87:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 87, 4);
                try {
                    ReturnStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== FROM||nextTokenType== IMPORT) {
                // Code for NonTerminal specified at Python.javacc:89:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 89, 4);
                try {
                    ImportStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== GLOBAL) {
                // Code for NonTerminal specified at Python.javacc:91:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 91, 4);
                try {
                    GlobalStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== NONLOCAL) {
                // Code for NonTerminal specified at Python.javacc:93:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 93, 4);
                try {
                    NonlocalStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== BREAK) {
                // Code for RegexpStringLiteral specified at Python.javacc:95:4
                consumeToken(BREAK);
            }
            else if (nextTokenType()== CONTINUE) {
                // Code for RegexpStringLiteral specified at Python.javacc:97:4
                consumeToken(CONTINUE);
            }
            else if (nextTokenType()== PASS) {
                // Code for RegexpStringLiteral specified at Python.javacc:99:4
                consumeToken(PASS);
            }
            else if (nextTokenType()== DEL) {
                // Code for NonTerminal specified at Python.javacc:101:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 101, 4);
                try {
                    DelStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== _ASSERT) {
                // Code for NonTerminal specified at Python.javacc:103:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 103, 4);
                try {
                    AssertStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== RAISE) {
                // Code for NonTerminal specified at Python.javacc:105:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 105, 4);
                try {
                    RaiseStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== YIELD) {
                // Code for NonTerminal specified at Python.javacc:107:4
                pushOntoCallStack("SmallStatement", "Python.javacc", 107, 4);
                try {
                    YieldStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("SmallStatement", "Python.javacc", 83, 4);
                throw new ParseException(this, SmallStatement_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException510= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize511);
            if (SmallStatement8!=null) {
                if (parseException510== null) {
                    closeNodeScope(SmallStatement8, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> CompoundStatement_FIRST_SET= CompoundStatement_FIRST_SET_init();
    static private EnumSet<TokenType> CompoundStatement_FIRST_SET_init() {
        return tokenTypeSet(AT, ASYNC, CLASS, DEF, FOR, IF, TRY, WHILE, WITH);
    }

    // Python.javacc:110:1
    final public void CompoundStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CompoundStatement";
        // Code for ExpansionChoice specified at Python.javacc:111:5
        CompoundStatement CompoundStatement9= null;
        if (buildTree) {
            CompoundStatement9= new CompoundStatement();
            openNodeScope(CompoundStatement9);
        }
        ParseException parseException618= null;
        int callStackSize619= parsingStack.size();
        try {
            if (scan$Python_javacc$111$5()) {
                // Code for NonTerminal specified at Python.javacc:111:5
                pushOntoCallStack("CompoundStatement", "Python.javacc", 111, 5);
                try {
                    FunctionDefinition();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== IF) {
                // Code for NonTerminal specified at Python.javacc:113:5
                pushOntoCallStack("CompoundStatement", "Python.javacc", 113, 5);
                try {
                    IfStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$115$5()) {
                // Code for NonTerminal specified at Python.javacc:115:5
                pushOntoCallStack("CompoundStatement", "Python.javacc", 115, 5);
                try {
                    ClassDefinition();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$117$5()) {
                // Code for NonTerminal specified at Python.javacc:117:5
                pushOntoCallStack("CompoundStatement", "Python.javacc", 117, 5);
                try {
                    WithStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== WHILE) {
                // Code for NonTerminal specified at Python.javacc:119:5
                pushOntoCallStack("CompoundStatement", "Python.javacc", 119, 5);
                try {
                    WhileStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$121$5()) {
                // Code for NonTerminal specified at Python.javacc:121:5
                pushOntoCallStack("CompoundStatement", "Python.javacc", 121, 5);
                try {
                    ForStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== TRY) {
                // Code for NonTerminal specified at Python.javacc:123:5
                pushOntoCallStack("CompoundStatement", "Python.javacc", 123, 5);
                try {
                    TryStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("CompoundStatement", "Python.javacc", 111, 5);
                throw new ParseException(this, CompoundStatement_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException618= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize619);
            if (CompoundStatement9!=null) {
                if (parseException618== null) {
                    closeNodeScope(CompoundStatement9, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:126:1
    final public void ReturnStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ReturnStatement";
        ReturnStatement ReturnStatement10= null;
        if (buildTree) {
            ReturnStatement10= new ReturnStatement();
            openNodeScope(ReturnStatement10);
        }
        ParseException parseException678= null;
        int callStackSize679= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:126:19
            consumeToken(RETURN);
            // Code for ZeroOrOne specified at Python.javacc:126:28
            if (first_set$Python_javacc$126$29.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:126:29
                pushOntoCallStack("ReturnStatement", "Python.javacc", 126, 29);
                try {
                    StarExpressions();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException678= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize679);
            if (ReturnStatement10!=null) {
                if (parseException678== null) {
                    closeNodeScope(ReturnStatement10, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:128:1
    final public void GlobalStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "GlobalStatement";
        GlobalStatement GlobalStatement11= null;
        if (buildTree) {
            GlobalStatement11= new GlobalStatement();
            openNodeScope(GlobalStatement11);
        }
        ParseException parseException698= null;
        int callStackSize699= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:128:19
            consumeToken(GLOBAL);
            // Code for RegexpRef specified at Python.javacc:128:28
            consumeToken(NAME);
            // Code for ZeroOrMore specified at Python.javacc:128:35
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:128:36
                consumeToken(COMMA);
                // Code for RegexpRef specified at Python.javacc:128:40
                consumeToken(NAME);
            }
        }
        catch(ParseException e) {
            parseException698= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize699);
            if (GlobalStatement11!=null) {
                if (parseException698== null) {
                    closeNodeScope(GlobalStatement11, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:130:1
    final public void NonlocalStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "NonlocalStatement";
        NonlocalStatement NonlocalStatement12= null;
        if (buildTree) {
            NonlocalStatement12= new NonlocalStatement();
            openNodeScope(NonlocalStatement12);
        }
        ParseException parseException726= null;
        int callStackSize727= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:130:21
            consumeToken(NONLOCAL);
            // Code for RegexpRef specified at Python.javacc:130:32
            consumeToken(NAME);
            // Code for ZeroOrMore specified at Python.javacc:130:39
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:130:40
                consumeToken(COMMA);
                // Code for RegexpRef specified at Python.javacc:130:44
                consumeToken(NAME);
            }
        }
        catch(ParseException e) {
            parseException726= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize727);
            if (NonlocalStatement12!=null) {
                if (parseException726== null) {
                    closeNodeScope(NonlocalStatement12, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:132:1
    final public void AssertStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "AssertStatement";
        AssertStatement AssertStatement13= null;
        if (buildTree) {
            AssertStatement13= new AssertStatement();
            openNodeScope(AssertStatement13);
        }
        ParseException parseException754= null;
        int callStackSize755= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:132:19
            consumeToken(_ASSERT);
            // Code for NonTerminal specified at Python.javacc:132:28
            pushOntoCallStack("AssertStatement", "Python.javacc", 132, 28);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:132:39
            while (true) {
                if (!(nextTokenType()== COMMA)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:132:40
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:132:44
                pushOntoCallStack("AssertStatement", "Python.javacc", 132, 44);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException754= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize755);
            if (AssertStatement13!=null) {
                if (parseException754== null) {
                    closeNodeScope(AssertStatement13, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:134:1
    final public void RaiseStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "RaiseStatement";
        RaiseStatement RaiseStatement14= null;
        if (buildTree) {
            RaiseStatement14= new RaiseStatement();
            openNodeScope(RaiseStatement14);
        }
        ParseException parseException782= null;
        int callStackSize783= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:134:18
            consumeToken(RAISE);
            // Code for ZeroOrOne specified at Python.javacc:134:26
            if (first_set$Python_javacc$134$28.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:134:28
                pushOntoCallStack("RaiseStatement", "Python.javacc", 134, 28);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:134:39
                if (nextTokenType()== FROM) {
                    // Code for RegexpStringLiteral specified at Python.javacc:134:40
                    consumeToken(FROM);
                    // Code for NonTerminal specified at Python.javacc:134:47
                    pushOntoCallStack("RaiseStatement", "Python.javacc", 134, 47);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
        }
        catch(ParseException e) {
            parseException782= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize783);
            if (RaiseStatement14!=null) {
                if (parseException782== null) {
                    closeNodeScope(RaiseStatement14, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Block_FIRST_SET= Block_FIRST_SET_init();
    static private EnumSet<TokenType> Block_FIRST_SET_init() {
        return tokenTypeSet(NEWLINE, LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, _ASSERT, AWAIT, BREAK, CONTINUE, DEL, FROM, GLOBAL, FALSE, IMPORT, LAMBDA, NONLOCAL, NONE, NOT, PASS, PEG_PARSER, RAISE, RETURN, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:136:1
    final public void Block() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Block";
        // Code for ExpansionChoice specified at Python.javacc:137:5
        Block Block15= null;
        if (buildTree) {
            Block15= new Block();
            openNodeScope(Block15);
        }
        ParseException parseException818= null;
        int callStackSize819= parsingStack.size();
        try {
            if (first_set$Python_javacc$137$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:137:5
                pushOntoCallStack("Block", "Python.javacc", 137, 5);
                try {
                    SimpleStatement();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== NEWLINE) {
                // Code for RegexpRef specified at Python.javacc:139:5
                consumeToken(NEWLINE);
                // Code for RegexpRef specified at Python.javacc:139:14
                consumeToken(INDENT);
                // Code for OneOrMore specified at Python.javacc:139:22
                while (true) {
                    // Code for NonTerminal specified at Python.javacc:139:23
                    pushOntoCallStack("Block", "Python.javacc", 139, 23);
                    try {
                        Statement();
                    }
                    finally {
                        popCallStack();
                    }
                    if (!(first_set$Python_javacc$139$23.contains(nextTokenType()))) break;
                }
                // Code for RegexpRef specified at Python.javacc:139:34
                consumeToken(DEDENT);
            }
            else  {
                pushOntoCallStack("Block", "Python.javacc", 137, 5);
                throw new ParseException(this, Block_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException818= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize819);
            if (Block15!=null) {
                if (parseException818== null) {
                    closeNodeScope(Block15, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:142:1
    final public void ElseBlock() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ElseBlock";
        ElseBlock ElseBlock16= null;
        if (buildTree) {
            ElseBlock16= new ElseBlock();
            openNodeScope(ElseBlock16);
        }
        ParseException parseException858= null;
        int callStackSize859= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:142:13
            consumeToken(ELSE);
            // Code for RegexpStringLiteral specified at Python.javacc:142:20
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:142:24
            pushOntoCallStack("ElseBlock", "Python.javacc", 142, 24);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException858= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize859);
            if (ElseBlock16!=null) {
                if (parseException858== null) {
                    closeNodeScope(ElseBlock16, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:144:1
    final public void ExceptBlock() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ExceptBlock";
        ExceptBlock ExceptBlock17= null;
        if (buildTree) {
            ExceptBlock17= new ExceptBlock();
            openNodeScope(ExceptBlock17);
        }
        ParseException parseException874= null;
        int callStackSize875= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:144:15
            consumeToken(EXCEPT);
            // Code for ZeroOrOne specified at Python.javacc:144:24
            if (first_set$Python_javacc$144$26.contains(nextTokenType())) {
                // Code for ZeroOrOne specified at Python.javacc:144:26
                if (nextTokenType()== STAR) {
                    // Code for RegexpStringLiteral specified at Python.javacc:144:27
                    consumeToken(STAR);
                }
                // Code for NonTerminal specified at Python.javacc:144:32
                pushOntoCallStack("ExceptBlock", "Python.javacc", 144, 32);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:144:43
                if (nextTokenType()== AS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:144:44
                    consumeToken(AS);
                    // Code for RegexpRef specified at Python.javacc:144:49
                    consumeToken(NAME);
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:144:59
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:144:63
            pushOntoCallStack("ExceptBlock", "Python.javacc", 144, 63);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException874= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize875);
            if (ExceptBlock17!=null) {
                if (parseException874== null) {
                    closeNodeScope(ExceptBlock17, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:146:1
    final public void IfStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "IfStatement";
        IfStatement IfStatement18= null;
        if (buildTree) {
            IfStatement18= new IfStatement();
            openNodeScope(IfStatement18);
        }
        ParseException parseException930= null;
        int callStackSize931= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:147:5
            consumeToken(IF);
            // Code for NonTerminal specified at Python.javacc:147:10
            pushOntoCallStack("IfStatement", "Python.javacc", 147, 10);
            try {
                NamedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:147:26
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:147:30
            pushOntoCallStack("IfStatement", "Python.javacc", 147, 30);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:148:6
            while (true) {
                if (!(nextTokenType()== ELIF)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:148:7
                consumeToken(ELIF);
                // Code for NonTerminal specified at Python.javacc:148:14
                pushOntoCallStack("IfStatement", "Python.javacc", 148, 14);
                try {
                    NamedExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpStringLiteral specified at Python.javacc:148:30
                consumeToken(COLON);
                // Code for NonTerminal specified at Python.javacc:148:34
                pushOntoCallStack("IfStatement", "Python.javacc", 148, 34);
                try {
                    Block();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:149:6
            if (nextTokenType()== ELSE) {
                // Code for RegexpStringLiteral specified at Python.javacc:149:7
                consumeToken(ELSE);
                // Code for RegexpStringLiteral specified at Python.javacc:149:14
                consumeToken(COLON);
                // Code for NonTerminal specified at Python.javacc:149:18
                pushOntoCallStack("IfStatement", "Python.javacc", 149, 18);
                try {
                    Block();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException930= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize931);
            if (IfStatement18!=null) {
                if (parseException930== null) {
                    closeNodeScope(IfStatement18, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:152:1
    final public void FinallyBlock() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "FinallyBlock";
        FinallyBlock FinallyBlock19= null;
        if (buildTree) {
            FinallyBlock19= new FinallyBlock();
            openNodeScope(FinallyBlock19);
        }
        ParseException parseException994= null;
        int callStackSize995= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:152:16
            consumeToken(FINALLY);
            // Code for RegexpStringLiteral specified at Python.javacc:152:26
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:152:30
            pushOntoCallStack("FinallyBlock", "Python.javacc", 152, 30);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException994= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize995);
            if (FinallyBlock19!=null) {
                if (parseException994== null) {
                    closeNodeScope(FinallyBlock19, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:154:1
    final public void WhileStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "WhileStatement";
        WhileStatement WhileStatement20= null;
        if (buildTree) {
            WhileStatement20= new WhileStatement();
            openNodeScope(WhileStatement20);
        }
        ParseException parseException1010= null;
        int callStackSize1011= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:154:18
            consumeToken(WHILE);
            // Code for NonTerminal specified at Python.javacc:154:26
            pushOntoCallStack("WhileStatement", "Python.javacc", 154, 26);
            try {
                NamedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:154:42
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:154:46
            pushOntoCallStack("WhileStatement", "Python.javacc", 154, 46);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Python.javacc:154:52
            if (nextTokenType()== ELSE) {
                // Code for NonTerminal specified at Python.javacc:154:53
                pushOntoCallStack("WhileStatement", "Python.javacc", 154, 53);
                try {
                    ElseBlock();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1010= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1011);
            if (WhileStatement20!=null) {
                if (parseException1010== null) {
                    closeNodeScope(WhileStatement20, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:156:1
    final public void WithStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "WithStatement";
        WithStatement WithStatement21= null;
        if (buildTree) {
            WithStatement21= new WithStatement();
            openNodeScope(WithStatement21);
        }
        ParseException parseException1042= null;
        int callStackSize1043= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:157:5
            if (nextTokenType()== ASYNC) {
                // Code for RegexpStringLiteral specified at Python.javacc:157:6
                consumeToken(ASYNC);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:157:15
            consumeToken(WITH);
            if (scan$Python_javacc$159$9()) {
                // Code for NonTerminal specified at Python.javacc:159:44
                pushOntoCallStack("WithStatement", "Python.javacc", 159, 44);
                try {
                    WithItemsInParentheses();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$161$9.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:161:9
                pushOntoCallStack("WithStatement", "Python.javacc", 161, 9);
                try {
                    WithItem();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Python.javacc:161:18
                while (true) {
                    if (!(nextTokenType()== COMMA)) break;
                    // Code for RegexpStringLiteral specified at Python.javacc:161:19
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Python.javacc:161:23
                    pushOntoCallStack("WithStatement", "Python.javacc", 161, 23);
                    try {
                        WithItem();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            else  {
                pushOntoCallStack("WithStatement", "Python.javacc", 159, 9);
                throw new ParseException(this, first_set$Python_javacc$159$9, parsingStack);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:163:5
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:163:9
            pushOntoCallStack("WithStatement", "Python.javacc", 163, 9);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException1042= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1043);
            if (WithStatement21!=null) {
                if (parseException1042== null) {
                    closeNodeScope(WithStatement21, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:166:1
    final public void WithItemsInParentheses() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "WithItemsInParentheses";
        // Code for RegexpStringLiteral specified at Python.javacc:166:31
        consumeToken(LPAREN);
        // Code for NonTerminal specified at Python.javacc:166:35
        pushOntoCallStack("WithItemsInParentheses", "Python.javacc", 166, 35);
        try {
            WithItem();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified at Python.javacc:166:44
        while (true) {
            if (!(scan$Python_javacc$166$45())) break;
            // Code for RegexpStringLiteral specified at Python.javacc:166:52
            consumeToken(COMMA);
            // Code for NonTerminal specified at Python.javacc:166:56
            pushOntoCallStack("WithItemsInParentheses", "Python.javacc", 166, 56);
            try {
                WithItem();
            }
            finally {
                popCallStack();
            }
        }
        // Code for ZeroOrOne specified at Python.javacc:166:67
        if (nextTokenType()== COMMA) {
            // Code for RegexpStringLiteral specified at Python.javacc:166:68
            consumeToken(COMMA);
        }
        // Code for RegexpStringLiteral specified at Python.javacc:166:73
        consumeToken(RPAREN);
    }

    // Python.javacc:168:1
    final public void WithItem() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "WithItem";
        WithItem WithItem22= null;
        if (buildTree) {
            WithItem22= new WithItem();
            openNodeScope(WithItem22);
        }
        ParseException parseException1151= null;
        int callStackSize1152= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:168:12
            pushOntoCallStack("WithItem", "Python.javacc", 168, 12);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Python.javacc:168:23
            if (nextTokenType()== AS) {
                // Code for RegexpStringLiteral specified at Python.javacc:168:24
                consumeToken(AS);
                // Code for NonTerminal specified at Python.javacc:168:29
                pushOntoCallStack("WithItem", "Python.javacc", 168, 29);
                try {
                    StarTarget();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1151= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1152);
            if (WithItem22!=null) {
                if (parseException1151== null) {
                    closeNodeScope(WithItem22, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:170:1
    final public void ForStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ForStatement";
        ForStatement ForStatement23= null;
        if (buildTree) {
            ForStatement23= new ForStatement();
            openNodeScope(ForStatement23);
        }
        ParseException parseException1175= null;
        int callStackSize1176= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:171:4
            if (nextTokenType()== ASYNC) {
                // Code for RegexpStringLiteral specified at Python.javacc:171:5
                consumeToken(ASYNC);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:171:14
            consumeToken(FOR);
            // Code for NonTerminal specified at Python.javacc:172:4
            pushOntoCallStack("ForStatement", "Python.javacc", 172, 4);
            try {
                StarTargets();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:172:16
            consumeToken(IN);
            // Code for NonTerminal specified at Python.javacc:172:21
            pushOntoCallStack("ForStatement", "Python.javacc", 172, 21);
            try {
                StarExpressions();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:172:37
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:173:4
            pushOntoCallStack("ForStatement", "Python.javacc", 173, 4);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Python.javacc:173:10
            if (nextTokenType()== ELSE) {
                // Code for NonTerminal specified at Python.javacc:173:11
                pushOntoCallStack("ForStatement", "Python.javacc", 173, 11);
                try {
                    ElseBlock();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1175= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1176);
            if (ForStatement23!=null) {
                if (parseException1175== null) {
                    closeNodeScope(ForStatement23, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:176:1
    final public void TryStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "TryStatement";
        TryStatement TryStatement24= null;
        if (buildTree) {
            TryStatement24= new TryStatement();
            openNodeScope(TryStatement24);
        }
        ParseException parseException1227= null;
        int callStackSize1228= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:177:4
            consumeToken(TRY);
            // Code for RegexpStringLiteral specified at Python.javacc:177:10
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:177:14
            pushOntoCallStack("TryStatement", "Python.javacc", 177, 14);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
            if (nextTokenType()== FINALLY) {
                // Code for NonTerminal specified at Python.javacc:179:8
                pushOntoCallStack("TryStatement", "Python.javacc", 179, 8);
                try {
                    FinallyBlock();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== EXCEPT) {
                // Code for OneOrMore specified at Python.javacc:181:9
                while (true) {
                    // Code for NonTerminal specified at Python.javacc:181:10
                    pushOntoCallStack("TryStatement", "Python.javacc", 181, 10);
                    try {
                        ExceptBlock();
                    }
                    finally {
                        popCallStack();
                    }
                    if (!(nextTokenType()== EXCEPT)) break;
                }
                // Code for ZeroOrOne specified at Python.javacc:181:24
                if (nextTokenType()== ELSE) {
                    // Code for NonTerminal specified at Python.javacc:181:25
                    pushOntoCallStack("TryStatement", "Python.javacc", 181, 25);
                    try {
                        ElseBlock();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:181:36
                if (nextTokenType()== FINALLY) {
                    // Code for NonTerminal specified at Python.javacc:181:37
                    pushOntoCallStack("TryStatement", "Python.javacc", 181, 37);
                    try {
                        FinallyBlock();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            else  {
                pushOntoCallStack("TryStatement", "Python.javacc", 179, 8);
                throw new ParseException(this, first_set$Python_javacc$179$8, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1227= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1228);
            if (TryStatement24!=null) {
                if (parseException1227== null) {
                    closeNodeScope(TryStatement24, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:185:1
    final public void DelStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "DelStatement";
        DelStatement DelStatement25= null;
        if (buildTree) {
            DelStatement25= new DelStatement();
            openNodeScope(DelStatement25);
        }
        ParseException parseException1301= null;
        int callStackSize1302= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:185:16
            consumeToken(DEL);
            // Code for NonTerminal specified at Python.javacc:185:22
            pushOntoCallStack("DelStatement", "Python.javacc", 185, 22);
            try {
                PrimaryExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:185:40
            while (true) {
                if (!(scan$Python_javacc$185$41())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:185:48
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:185:52
                pushOntoCallStack("DelStatement", "Python.javacc", 185, 52);
                try {
                    PrimaryExpression();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:185:72
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:185:73
                consumeToken(COMMA);
            }
        }
        catch(ParseException e) {
            parseException1301= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1302);
            if (DelStatement25!=null) {
                if (parseException1301== null) {
                    closeNodeScope(DelStatement25, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:187:1
    final public void NamedExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "NamedExpression";
        NamedExpression NamedExpression26= null;
        if (buildTree) {
            NamedExpression26= new NamedExpression();
            openNodeScope(NamedExpression26);
        }
        ParseException parseException1341= null;
        int callStackSize1342= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:187:19
            if (scan$Python_javacc$187$21()) {
                // Code for RegexpRef specified at Python.javacc:187:24
                consumeToken(NAME);
                // Code for RegexpStringLiteral specified at Python.javacc:187:31
                consumeToken(COLONEQUALS);
            }
            // Code for NonTerminal specified at Python.javacc:187:38
            pushOntoCallStack("NamedExpression", "Python.javacc", 187, 38);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException1341= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1342);
            if (NamedExpression26!=null) {
                if (parseException1341== null) {
                    closeNodeScope(NamedExpression26, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:189:1
    final public void DottedName() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "DottedName";
        DottedName DottedName27= null;
        if (buildTree) {
            DottedName27= new DottedName();
            openNodeScope(DottedName27);
        }
        ParseException parseException1365= null;
        int callStackSize1366= parsingStack.size();
        try {
            // Code for RegexpRef specified at Python.javacc:189:14
            consumeToken(NAME);
            // Code for ZeroOrMore specified at Python.javacc:189:21
            while (true) {
                if (!(scan$Python_javacc$189$22())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:189:25
                consumeToken(DOT);
                // Code for RegexpRef specified at Python.javacc:189:29
                consumeToken(NAME);
            }
        }
        catch(ParseException e) {
            parseException1365= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1366);
            if (DottedName27!=null) {
                if (parseException1365== null) {
                    closeNodeScope(DottedName27, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> ImportStatement_FIRST_SET= tokenTypeSet(FROM, IMPORT);
    // Python.javacc:191:1
    final public void ImportStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ImportStatement";
        // Code for ExpansionChoice specified at Python.javacc:191:19
        ImportStatement ImportStatement28= null;
        if (buildTree) {
            ImportStatement28= new ImportStatement();
            openNodeScope(ImportStatement28);
        }
        ParseException parseException1389= null;
        int callStackSize1390= parsingStack.size();
        try {
            if (nextTokenType()== IMPORT) {
                // Code for NonTerminal specified at Python.javacc:191:19
                pushOntoCallStack("ImportStatement", "Python.javacc", 191, 19);
                try {
                    ImportName();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$191$32()) {
                // Code for NonTerminal specified at Python.javacc:191:32
                pushOntoCallStack("ImportStatement", "Python.javacc", 191, 32);
                try {
                    ImportFrom1();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$191$46()) {
                // Code for NonTerminal specified at Python.javacc:191:46
                pushOntoCallStack("ImportStatement", "Python.javacc", 191, 46);
                try {
                    ImportFrom2();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("ImportStatement", "Python.javacc", 191, 19);
                throw new ParseException(this, ImportStatement_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1389= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1390);
            if (ImportStatement28!=null) {
                if (parseException1389== null) {
                    closeNodeScope(ImportStatement28, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:193:1
    final public void ImportName() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ImportName";
        // Code for RegexpStringLiteral specified at Python.javacc:193:19
        consumeToken(IMPORT);
        // Code for NonTerminal specified at Python.javacc:193:28
        pushOntoCallStack("ImportName", "Python.javacc", 193, 28);
        try {
            DottedName();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrOne specified at Python.javacc:193:39
        if (nextTokenType()== AS) {
            // Code for RegexpStringLiteral specified at Python.javacc:193:40
            consumeToken(AS);
            // Code for RegexpRef specified at Python.javacc:193:45
            consumeToken(NAME);
        }
        // Code for ZeroOrMore specified at Python.javacc:193:53
        while (true) {
            if (!(nextTokenType()== COMMA)) break;
            // Code for RegexpStringLiteral specified at Python.javacc:193:54
            consumeToken(COMMA);
            // Code for NonTerminal specified at Python.javacc:193:58
            pushOntoCallStack("ImportName", "Python.javacc", 193, 58);
            try {
                DottedName();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Python.javacc:193:69
            if (nextTokenType()== AS) {
                // Code for RegexpStringLiteral specified at Python.javacc:193:70
                consumeToken(AS);
                // Code for RegexpRef specified at Python.javacc:193:75
                consumeToken(NAME);
            }
        }
    }

    // Python.javacc:195:1
    final public void ImportFrom1() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ImportFrom1";
        // Code for RegexpStringLiteral specified at Python.javacc:195:20
        consumeToken(FROM);
        // Code for ZeroOrMore specified at Python.javacc:195:27
        while (true) {
            // Code for ExpansionChoice specified at Python.javacc:195:28
            if (nextTokenType()== DOT) {
                // Code for RegexpStringLiteral specified at Python.javacc:195:28
                consumeToken(DOT);
            }
            else if (nextTokenType()== ELLIPSIS) {
                // Code for RegexpStringLiteral specified at Python.javacc:195:34
                consumeToken(ELLIPSIS);
            }
            else  {
                break;
            }
        }
        // Code for NonTerminal specified at Python.javacc:195:42
        pushOntoCallStack("ImportFrom1", "Python.javacc", 195, 42);
        try {
            DottedName();
        }
        finally {
            popCallStack();
        }
        // Code for RegexpStringLiteral specified at Python.javacc:195:58
        consumeToken(IMPORT);
        // Code for NonTerminal specified at Python.javacc:195:68
        pushOntoCallStack("ImportFrom1", "Python.javacc", 195, 68);
        try {
            ImportFromTargets();
        }
        finally {
            popCallStack();
        }
    }

    // Python.javacc:197:1
    final public void ImportFrom2() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ImportFrom2";
        // Code for RegexpStringLiteral specified at Python.javacc:197:20
        consumeToken(FROM);
        // Code for OneOrMore specified at Python.javacc:197:27
        boolean inFirst0= true;
        while (true) {
            // Code for ExpansionChoice specified at Python.javacc:197:28
            if (nextTokenType()== DOT) {
                // Code for RegexpStringLiteral specified at Python.javacc:197:28
                consumeToken(DOT);
            }
            else if (nextTokenType()== ELLIPSIS) {
                // Code for RegexpStringLiteral specified at Python.javacc:197:34
                consumeToken(ELLIPSIS);
            }
            else if (inFirst0) {
                pushOntoCallStack("ImportFrom2", "Python.javacc", 197, 28);
                throw new ParseException(this, first_set$Python_javacc$197$28, parsingStack);
            }
            else  {
                break;
            }
            inFirst0= false;
        }
        // Code for RegexpStringLiteral specified at Python.javacc:197:42
        consumeToken(IMPORT);
        // Code for NonTerminal specified at Python.javacc:197:56
        pushOntoCallStack("ImportFrom2", "Python.javacc", 197, 56);
        try {
            ImportFromTargets();
        }
        finally {
            popCallStack();
        }
    }

    static private final EnumSet<TokenType> ImportFromTargets_FIRST_SET= tokenTypeSet(LPAREN, STAR, NAME);
    // Python.javacc:199:1
    final public void ImportFromTargets() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ImportFromTargets";
        // Code for ExpansionChoice specified at Python.javacc:200:4
        ImportFromTargets ImportFromTargets29= null;
        if (buildTree) {
            ImportFromTargets29= new ImportFromTargets();
            openNodeScope(ImportFromTargets29);
        }
        ParseException parseException1561= null;
        int callStackSize1562= parsingStack.size();
        try {
            if (nextTokenType()== STAR) {
                // Code for RegexpStringLiteral specified at Python.javacc:200:4
                consumeToken(STAR);
            }
            else if (nextTokenType()== NAME) {
                // Code for RegexpRef specified at Python.javacc:202:4
                consumeToken(NAME);
                // Code for ZeroOrOne specified at Python.javacc:202:11
                if (nextTokenType()== AS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:202:12
                    consumeToken(AS);
                    // Code for RegexpRef specified at Python.javacc:202:17
                    consumeToken(NAME);
                }
                // Code for ZeroOrMore specified at Python.javacc:202:25
                while (true) {
                    if (!(scan$Python_javacc$202$26())) break;
                    // Code for RegexpStringLiteral specified at Python.javacc:202:26
                    consumeToken(COMMA);
                    // Code for RegexpRef specified at Python.javacc:202:30
                    consumeToken(NAME);
                    // Code for ZeroOrOne specified at Python.javacc:202:42
                    if (nextTokenType()== AS) {
                        // Code for RegexpStringLiteral specified at Python.javacc:202:43
                        consumeToken(AS);
                        // Code for RegexpRef specified at Python.javacc:202:48
                        consumeToken(NAME);
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:202:58
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:202:59
                    consumeToken(COMMA);
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpStringLiteral specified at Python.javacc:204:4
                consumeToken(LPAREN);
                // Code for RegexpRef specified at Python.javacc:204:8
                consumeToken(NAME);
                // Code for ZeroOrOne specified at Python.javacc:204:15
                if (nextTokenType()== AS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:204:16
                    consumeToken(AS);
                    // Code for RegexpRef specified at Python.javacc:204:21
                    consumeToken(NAME);
                }
                // Code for ZeroOrMore specified at Python.javacc:204:29
                while (true) {
                    if (!(scan$Python_javacc$204$30())) break;
                    // Code for RegexpStringLiteral specified at Python.javacc:204:30
                    consumeToken(COMMA);
                    // Code for RegexpRef specified at Python.javacc:204:34
                    consumeToken(NAME);
                    // Code for ZeroOrOne specified at Python.javacc:204:46
                    if (nextTokenType()== AS) {
                        // Code for RegexpStringLiteral specified at Python.javacc:204:47
                        consumeToken(AS);
                        // Code for RegexpRef specified at Python.javacc:204:52
                        consumeToken(NAME);
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:204:62
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:204:63
                    consumeToken(COMMA);
                }
                // Code for RegexpStringLiteral specified at Python.javacc:204:68
                consumeToken(RPAREN);
                // Code for ZeroOrOne specified at Python.javacc:204:72
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:204:73
                    consumeToken(COMMA);
                }
            }
            else  {
                pushOntoCallStack("ImportFromTargets", "Python.javacc", 200, 4);
                throw new ParseException(this, ImportFromTargets_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1561= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1562);
            if (ImportFromTargets29!=null) {
                if (parseException1561== null) {
                    closeNodeScope(ImportFromTargets29, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> StarNamedExpression_FIRST_SET= StarNamedExpression_FIRST_SET_init();
    static private EnumSet<TokenType> StarNamedExpression_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:207:1
    final public void StarNamedExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarNamedExpression";
        // Code for ExpansionChoice specified at Python.javacc:208:6
        StarNamedExpression StarNamedExpression30= null;
        if (buildTree) {
            StarNamedExpression30= new StarNamedExpression();
            openNodeScope(StarNamedExpression30);
        }
        ParseException parseException1729= null;
        int callStackSize1730= parsingStack.size();
        try {
            if (nextTokenType()== STAR) {
                // Code for RegexpStringLiteral specified at Python.javacc:208:6
                consumeToken(STAR);
                // Code for NonTerminal specified at Python.javacc:208:10
                pushOntoCallStack("StarNamedExpression", "Python.javacc", 208, 10);
                try {
                    BitwiseOr();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$210$6.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:210:6
                pushOntoCallStack("StarNamedExpression", "Python.javacc", 210, 6);
                try {
                    NamedExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("StarNamedExpression", "Python.javacc", 208, 6);
                throw new ParseException(this, StarNamedExpression_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1729= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1730);
            if (StarNamedExpression30!=null) {
                if (parseException1729== null) {
                    closeNodeScope(StarNamedExpression30, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> StarExpression_FIRST_SET= StarExpression_FIRST_SET_init();
    static private EnumSet<TokenType> StarExpression_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:213:1
    final public void StarExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarExpression";
        // Code for ExpansionChoice specified at Python.javacc:214:5
        StarExpression StarExpression31= null;
        if (buildTree) {
            StarExpression31= new StarExpression();
            openNodeScope(StarExpression31);
        }
        ParseException parseException1753= null;
        int callStackSize1754= parsingStack.size();
        try {
            if (nextTokenType()== STAR) {
                // Code for RegexpStringLiteral specified at Python.javacc:214:5
                consumeToken(STAR);
                // Code for NonTerminal specified at Python.javacc:214:9
                pushOntoCallStack("StarExpression", "Python.javacc", 214, 9);
                try {
                    BitwiseOr();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$216$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:216:5
                pushOntoCallStack("StarExpression", "Python.javacc", 216, 5);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("StarExpression", "Python.javacc", 214, 5);
                throw new ParseException(this, StarExpression_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException1753= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1754);
            if (StarExpression31!=null) {
                if (parseException1753== null) {
                    closeNodeScope(StarExpression31, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:219:1
    final public void StarExpressions() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarExpressions";
        StarExpressions StarExpressions32= null;
        if (buildTree) {
            StarExpressions32= new StarExpressions();
            openNodeScope(StarExpressions32);
        }
        ParseException parseException1777= null;
        int callStackSize1778= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:219:19
            pushOntoCallStack("StarExpressions", "Python.javacc", 219, 19);
            try {
                StarExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:219:34
            while (true) {
                if (!(scan$Python_javacc$219$35())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:219:35
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:219:45
                pushOntoCallStack("StarExpressions", "Python.javacc", 219, 45);
                try {
                    StarExpression();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:219:62
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:219:63
                consumeToken(COMMA);
            }
        }
        catch(ParseException e) {
            parseException1777= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1778);
            if (StarExpressions32!=null) {
                if (parseException1777== null) {
                    closeNodeScope(StarExpressions32, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:221:1
    final public void StarNamedExpressions() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarNamedExpressions";
        StarNamedExpressions StarNamedExpressions33= null;
        if (buildTree) {
            StarNamedExpressions33= new StarNamedExpressions();
            openNodeScope(StarNamedExpressions33);
        }
        ParseException parseException1813= null;
        int callStackSize1814= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:221:24
            pushOntoCallStack("StarNamedExpressions", "Python.javacc", 221, 24);
            try {
                StarNamedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:221:44
            while (true) {
                if (!(scan$Python_javacc$221$45())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:221:45
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:221:55
                pushOntoCallStack("StarNamedExpressions", "Python.javacc", 221, 55);
                try {
                    StarNamedExpression();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:221:77
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:221:78
                consumeToken(COMMA);
            }
        }
        catch(ParseException e) {
            parseException1813= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1814);
            if (StarNamedExpressions33!=null) {
                if (parseException1813== null) {
                    closeNodeScope(StarNamedExpressions33, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:223:1
    final public void BitwiseOr() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "BitwiseOr";
        BitwiseOr BitwiseOr34= null;
        if (buildTree) {
            BitwiseOr34= new BitwiseOr();
            openNodeScope(BitwiseOr34);
        }
        ParseException parseException1849= null;
        int callStackSize1850= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:223:13
            pushOntoCallStack("BitwiseOr", "Python.javacc", 223, 13);
            try {
                BitwiseXor();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:223:24
            while (true) {
                if (!(nextTokenType()== BIT_OR)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:223:25
                consumeToken(BIT_OR);
                // Code for NonTerminal specified at Python.javacc:223:29
                pushOntoCallStack("BitwiseOr", "Python.javacc", 223, 29);
                try {
                    BitwiseXor();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1849= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1850);
            if (BitwiseOr34!=null) {
                if (parseException1849== null) {
                    closeNodeScope(BitwiseOr34, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:225:1
    final public void BitwiseXor() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "BitwiseXor";
        BitwiseXor BitwiseXor35= null;
        if (buildTree) {
            BitwiseXor35= new BitwiseXor();
            openNodeScope(BitwiseXor35);
        }
        ParseException parseException1873= null;
        int callStackSize1874= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:225:14
            pushOntoCallStack("BitwiseXor", "Python.javacc", 225, 14);
            try {
                BitwiseAnd();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:225:25
            while (true) {
                if (!(nextTokenType()== XOR)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:225:26
                consumeToken(XOR);
                // Code for NonTerminal specified at Python.javacc:225:30
                pushOntoCallStack("BitwiseXor", "Python.javacc", 225, 30);
                try {
                    BitwiseAnd();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1873= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1874);
            if (BitwiseXor35!=null) {
                if (parseException1873== null) {
                    closeNodeScope(BitwiseXor35, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:227:1
    final public void BitwiseAnd() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "BitwiseAnd";
        BitwiseAnd BitwiseAnd36= null;
        if (buildTree) {
            BitwiseAnd36= new BitwiseAnd();
            openNodeScope(BitwiseAnd36);
        }
        ParseException parseException1897= null;
        int callStackSize1898= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:227:14
            pushOntoCallStack("BitwiseAnd", "Python.javacc", 227, 14);
            try {
                ShiftExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:227:30
            while (true) {
                if (!(nextTokenType()== BIT_AND)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:227:31
                consumeToken(BIT_AND);
                // Code for NonTerminal specified at Python.javacc:227:35
                pushOntoCallStack("BitwiseAnd", "Python.javacc", 227, 35);
                try {
                    ShiftExpression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1897= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1898);
            if (BitwiseAnd36!=null) {
                if (parseException1897== null) {
                    closeNodeScope(BitwiseAnd36, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:229:1
    final public void ShiftExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ShiftExpression";
        ShiftExpression ShiftExpression37= null;
        if (buildTree) {
            ShiftExpression37= new ShiftExpression();
            openNodeScope(ShiftExpression37);
        }
        ParseException parseException1921= null;
        int callStackSize1922= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:229:19
            pushOntoCallStack("ShiftExpression", "Python.javacc", 229, 19);
            try {
                AdditiveExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:229:38
            while (true) {
                if (!(nextTokenType()== LSHIFT||nextTokenType== RSHIFT)) break;
                if (nextTokenType()== LSHIFT) {
                    // Code for RegexpStringLiteral specified at Python.javacc:229:40
                    consumeToken(LSHIFT);
                }
                else if (nextTokenType()== RSHIFT) {
                    // Code for RegexpStringLiteral specified at Python.javacc:229:47
                    consumeToken(RSHIFT);
                }
                else  {
                    pushOntoCallStack("ShiftExpression", "Python.javacc", 229, 40);
                    throw new ParseException(this, first_set$Python_javacc$229$40, parsingStack);
                }
                // Code for NonTerminal specified at Python.javacc:229:53
                pushOntoCallStack("ShiftExpression", "Python.javacc", 229, 53);
                try {
                    AdditiveExpression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1921= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1922);
            if (ShiftExpression37!=null) {
                if (parseException1921== null) {
                    closeNodeScope(ShiftExpression37, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:231:1
    final public void AdditiveExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "AdditiveExpression";
        AdditiveExpression AdditiveExpression38= null;
        if (buildTree) {
            AdditiveExpression38= new AdditiveExpression();
            openNodeScope(AdditiveExpression38);
        }
        ParseException parseException1962= null;
        int callStackSize1963= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:231:22
            pushOntoCallStack("AdditiveExpression", "Python.javacc", 231, 22);
            try {
                MultiplicativeExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:231:47
            while (true) {
                if (!(nextTokenType()== MINUS||nextTokenType== PLUS)) break;
                if (nextTokenType()== PLUS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:231:49
                    consumeToken(PLUS);
                }
                else if (nextTokenType()== MINUS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:231:53
                    consumeToken(MINUS);
                }
                else  {
                    pushOntoCallStack("AdditiveExpression", "Python.javacc", 231, 49);
                    throw new ParseException(this, first_set$Python_javacc$231$49, parsingStack);
                }
                // Code for NonTerminal specified at Python.javacc:231:58
                pushOntoCallStack("AdditiveExpression", "Python.javacc", 231, 58);
                try {
                    MultiplicativeExpression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException1962= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize1963);
            if (AdditiveExpression38!=null) {
                if (parseException1962== null) {
                    closeNodeScope(AdditiveExpression38, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:233:1
    final public void MultiplicativeExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MultiplicativeExpression";
        MultiplicativeExpression MultiplicativeExpression39= null;
        if (buildTree) {
            MultiplicativeExpression39= new MultiplicativeExpression();
            openNodeScope(MultiplicativeExpression39);
        }
        ParseException parseException2003= null;
        int callStackSize2004= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:233:28
            pushOntoCallStack("MultiplicativeExpression", "Python.javacc", 233, 28);
            try {
                UnaryExpression();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:233:44
            while (true) {
                if (!(first_set$Python_javacc$233$45.contains(nextTokenType()))) break;
                if (nextTokenType()== STAR) {
                    // Code for RegexpStringLiteral specified at Python.javacc:233:46
                    consumeToken(STAR);
                }
                else if (nextTokenType()== SLASH) {
                    // Code for RegexpStringLiteral specified at Python.javacc:233:50
                    consumeToken(SLASH);
                }
                else if (nextTokenType()== _TOKEN_100) {
                    // Code for RegexpStringLiteral specified at Python.javacc:233:54
                    consumeToken(_TOKEN_100);
                }
                else if (nextTokenType()== PERCENT) {
                    // Code for RegexpStringLiteral specified at Python.javacc:233:59
                    consumeToken(PERCENT);
                }
                else if (nextTokenType()== AT) {
                    // Code for RegexpStringLiteral specified at Python.javacc:233:63
                    consumeToken(AT);
                }
                else  {
                    pushOntoCallStack("MultiplicativeExpression", "Python.javacc", 233, 46);
                    throw new ParseException(this, first_set$Python_javacc$233$46, parsingStack);
                }
                // Code for NonTerminal specified at Python.javacc:233:68
                pushOntoCallStack("MultiplicativeExpression", "Python.javacc", 233, 68);
                try {
                    UnaryExpression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException2003= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2004);
            if (MultiplicativeExpression39!=null) {
                if (parseException2003== null) {
                    closeNodeScope(MultiplicativeExpression39, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> UnaryExpression_FIRST_SET= UnaryExpression_FIRST_SET_init();
    static private EnumSet<TokenType> UnaryExpression_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, NONE, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:235:1
    final public void UnaryExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "UnaryExpression";
        // Code for ExpansionChoice specified at Python.javacc:235:19
        UnaryExpression UnaryExpression40= null;
        if (buildTree) {
            UnaryExpression40= new UnaryExpression();
            openNodeScope(UnaryExpression40);
        }
        ParseException parseException2068= null;
        int callStackSize2069= parsingStack.size();
        try {
            if (first_set$Python_javacc$235$19.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:235:19
                pushOntoCallStack("UnaryExpression", "Python.javacc", 235, 19);
                try {
                    Power();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== TILDE||nextTokenType== MINUS||nextTokenType== PLUS) {
                if (nextTokenType()== PLUS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:235:28
                    consumeToken(PLUS);
                }
                else if (nextTokenType()== MINUS) {
                    // Code for RegexpStringLiteral specified at Python.javacc:235:34
                    consumeToken(MINUS);
                }
                else if (nextTokenType()== TILDE) {
                    // Code for RegexpStringLiteral specified at Python.javacc:235:40
                    consumeToken(TILDE);
                }
                else  {
                    pushOntoCallStack("UnaryExpression", "Python.javacc", 235, 28);
                    throw new ParseException(this, first_set$Python_javacc$235$28, parsingStack);
                }
                // Code for NonTerminal specified at Python.javacc:235:45
                pushOntoCallStack("UnaryExpression", "Python.javacc", 235, 45);
                try {
                    UnaryExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("UnaryExpression", "Python.javacc", 235, 19);
                throw new ParseException(this, UnaryExpression_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException2068= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2069);
            if (UnaryExpression40!=null) {
                if (parseException2068== null) {
                    closeNodeScope(UnaryExpression40, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:237:1
    final public void Power() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Power";
        Power Power41= null;
        if (buildTree) {
            Power41= new Power();
            openNodeScope(Power41);
        }
        ParseException parseException2117= null;
        int callStackSize2118= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:237:9
            pushOntoCallStack("Power", "Python.javacc", 237, 9);
            try {
                AwaitPrimary();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Python.javacc:237:22
            if (nextTokenType()== STAR_STAR) {
                // Code for RegexpStringLiteral specified at Python.javacc:237:23
                consumeToken(STAR_STAR);
                // Code for NonTerminal specified at Python.javacc:237:28
                pushOntoCallStack("Power", "Python.javacc", 237, 28);
                try {
                    UnaryExpression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException2117= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2118);
            if (Power41!=null) {
                if (parseException2117== null) {
                    closeNodeScope(Power41, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:239:1
    final public void Tuple() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Tuple";
        Tuple Tuple42= null;
        if (buildTree) {
            Tuple42= new Tuple();
            openNodeScope(Tuple42);
        }
        ParseException parseException2141= null;
        int callStackSize2142= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:241:5
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Python.javacc:241:9
            if (first_set$Python_javacc$241$10.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:241:10
                pushOntoCallStack("Tuple", "Python.javacc", 241, 10);
                try {
                    StarNamedExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpStringLiteral specified at Python.javacc:241:30
                consumeToken(COMMA);
                // Code for ZeroOrOne specified at Python.javacc:241:34
                if (first_set$Python_javacc$241$35.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:241:35
                    pushOntoCallStack("Tuple", "Python.javacc", 241, 35);
                    try {
                        StarNamedExpressions();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:241:58
            consumeToken(RPAREN);
        }
        catch(ParseException e) {
            parseException2141= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2142);
            if (Tuple42!=null) {
                if (parseException2141== null) {
                    closeNodeScope(Tuple42, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:244:1
    final public void Group() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Group";
        Group Group43= null;
        if (buildTree) {
            Group43= new Group();
            openNodeScope(Group43);
        }
        ParseException parseException2181= null;
        int callStackSize2182= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:244:9
            consumeToken(LPAREN);
            if (nextTokenType()== YIELD) {
                // Code for NonTerminal specified at Python.javacc:244:14
                pushOntoCallStack("Group", "Python.javacc", 244, 14);
                try {
                    YieldExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$244$32.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:244:32
                pushOntoCallStack("Group", "Python.javacc", 244, 32);
                try {
                    NamedExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Group", "Python.javacc", 244, 14);
                throw new ParseException(this, first_set$Python_javacc$244$14, parsingStack);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:244:49
            consumeToken(RPAREN);
        }
        catch(ParseException e) {
            parseException2181= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2182);
            if (Group43!=null) {
                if (parseException2181== null) {
                    closeNodeScope(Group43, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:246:1
    final public void AwaitPrimary() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "AwaitPrimary";
        AwaitPrimary AwaitPrimary44= null;
        if (buildTree) {
            AwaitPrimary44= new AwaitPrimary();
            openNodeScope(AwaitPrimary44);
        }
        ParseException parseException2214= null;
        int callStackSize2215= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:246:16
            if (nextTokenType()== AWAIT) {
                // Code for RegexpStringLiteral specified at Python.javacc:246:17
                consumeToken(AWAIT);
            }
            // Code for NonTerminal specified at Python.javacc:246:26
            pushOntoCallStack("AwaitPrimary", "Python.javacc", 246, 26);
            try {
                PrimaryExpression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2214= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2215);
            if (AwaitPrimary44!=null) {
                if (parseException2214== null) {
                    closeNodeScope(AwaitPrimary44, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:248:1
    final public void PrimaryExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "PrimaryExpression";
        // Code for NonTerminal specified at Python.javacc:249:4
        pushOntoCallStack("PrimaryExpression", "Python.javacc", 249, 4);
        try {
            AtomicExpression();
        }
        finally {
            popCallStack();
        }
        // Code for ZeroOrMore specified at Python.javacc:250:4
        while (true) {
            // Code for ExpansionChoice specified at Python.javacc:251:8
            if (nextTokenType()== DOT) {
                // Code for RegexpStringLiteral specified at Python.javacc:251:8
                consumeToken(DOT);
                // Code for RegexpRef specified at Python.javacc:251:12
                DotName PrimaryExpression45= null;
                if (buildTree) {
                    PrimaryExpression45= new DotName();
                    openNodeScope(PrimaryExpression45);
                }
                ParseException parseException2258= null;
                int callStackSize2259= parsingStack.size();
                try {
                    consumeToken(NAME);
                }
                catch(ParseException e) {
                    parseException2258= e;
                    throw e;
                }
                finally {
                    restoreCallStack(callStackSize2259);
                    if (PrimaryExpression45!=null) {
                        if (parseException2258== null) {
                            closeNodeScope(PrimaryExpression45, 3);
                        }
                        else  {
                            clearNodeScope();
                        }
                    }
                    this.currentlyParsedProduction= prevProduction;
                }
            }
            else if (nextTokenType()== LBRACKET) {
                // Code for NonTerminal specified at Python.javacc:253:8
                SliceExpression PrimaryExpression46= null;
                if (buildTree) {
                    PrimaryExpression46= new SliceExpression();
                    openNodeScope(PrimaryExpression46);
                }
                ParseException parseException2266= null;
                int callStackSize2267= parsingStack.size();
                try {
                    pushOntoCallStack("PrimaryExpression", "Python.javacc", 253, 8);
                    try {
                        Slices();
                    }
                    finally {
                        popCallStack();
                    }
                }
                catch(ParseException e) {
                    parseException2266= e;
                    throw e;
                }
                finally {
                    restoreCallStack(callStackSize2267);
                    if (PrimaryExpression46!=null) {
                        if (parseException2266== null) {
                            closeNodeScope(PrimaryExpression46, 2);
                        }
                        else  {
                            clearNodeScope();
                        }
                    }
                    this.currentlyParsedProduction= prevProduction;
                }
            }
            else if (scan$Python_javacc$255$8()) {
                // Code for NonTerminal specified at Python.javacc:255:8
                GenExpression PrimaryExpression47= null;
                if (buildTree) {
                    PrimaryExpression47= new GenExpression();
                    openNodeScope(PrimaryExpression47);
                }
                ParseException parseException2274= null;
                int callStackSize2275= parsingStack.size();
                try {
                    pushOntoCallStack("PrimaryExpression", "Python.javacc", 255, 8);
                    try {
                        GenExp();
                    }
                    finally {
                        popCallStack();
                    }
                }
                catch(ParseException e) {
                    parseException2274= e;
                    throw e;
                }
                finally {
                    restoreCallStack(callStackSize2275);
                    if (PrimaryExpression47!=null) {
                        if (parseException2274== null) {
                            closeNodeScope(PrimaryExpression47, 2);
                        }
                        else  {
                            clearNodeScope();
                        }
                    }
                    this.currentlyParsedProduction= prevProduction;
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for NonTerminal specified at Python.javacc:257:8
                FunctionCall PrimaryExpression48= null;
                if (buildTree) {
                    PrimaryExpression48= new FunctionCall();
                    openNodeScope(PrimaryExpression48);
                }
                ParseException parseException2282= null;
                int callStackSize2283= parsingStack.size();
                try {
                    pushOntoCallStack("PrimaryExpression", "Python.javacc", 257, 8);
                    try {
                        InvocationArguments();
                    }
                    finally {
                        popCallStack();
                    }
                }
                catch(ParseException e) {
                    parseException2282= e;
                    throw e;
                }
                finally {
                    restoreCallStack(callStackSize2283);
                    if (PrimaryExpression48!=null) {
                        if (parseException2282== null) {
                            closeNodeScope(PrimaryExpression48, 2);
                        }
                        else  {
                            clearNodeScope();
                        }
                    }
                    this.currentlyParsedProduction= prevProduction;
                }
            }
            else  {
                break;
            }
        }
    }

    static private final EnumSet<TokenType> YieldExpression_FIRST_SET= tokenTypeSet(YIELD);
    // Python.javacc:261:1
    final public void YieldExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "YieldExpression";
        // Code for ExpansionChoice specified at Python.javacc:262:5
        YieldExpression YieldExpression49= null;
        if (buildTree) {
            YieldExpression49= new YieldExpression();
            openNodeScope(YieldExpression49);
        }
        ParseException parseException2286= null;
        int callStackSize2287= parsingStack.size();
        try {
            if (scan$Python_javacc$262$5()) {
                // Code for RegexpStringLiteral specified at Python.javacc:262:5
                consumeToken(YIELD);
                // Code for RegexpStringLiteral specified at Python.javacc:262:13
                consumeToken(FROM);
                // Code for NonTerminal specified at Python.javacc:262:25
                pushOntoCallStack("YieldExpression", "Python.javacc", 262, 25);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== YIELD) {
                // Code for RegexpStringLiteral specified at Python.javacc:264:5
                consumeToken(YIELD);
                // Code for ZeroOrOne specified at Python.javacc:264:13
                if (first_set$Python_javacc$264$14.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:264:14
                    pushOntoCallStack("YieldExpression", "Python.javacc", 264, 14);
                    try {
                        StarExpressions();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            else  {
                pushOntoCallStack("YieldExpression", "Python.javacc", 262, 5);
                throw new ParseException(this, YieldExpression_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException2286= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2287);
            if (YieldExpression49!=null) {
                if (parseException2286== null) {
                    closeNodeScope(YieldExpression49, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:267:1
    final public void YieldStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "YieldStatement";
        YieldStatement YieldStatement50= null;
        if (buildTree) {
            YieldStatement50= new YieldStatement();
            openNodeScope(YieldStatement50);
        }
        ParseException parseException2326= null;
        int callStackSize2327= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:267:19
            pushOntoCallStack("YieldStatement", "Python.javacc", 267, 19);
            try {
                YieldExpression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2326= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2327);
            if (YieldStatement50!=null) {
                if (parseException2326== null) {
                    closeNodeScope(YieldStatement50, true);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> AnnotatedRhs_FIRST_SET= AnnotatedRhs_FIRST_SET_init();
    static private EnumSet<TokenType> AnnotatedRhs_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:269:1
    final public void AnnotatedRhs() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "AnnotatedRhs";
        // Code for ExpansionChoice specified at Python.javacc:269:16
        AnnotatedRhs AnnotatedRhs51= null;
        if (buildTree) {
            AnnotatedRhs51= new AnnotatedRhs();
            openNodeScope(AnnotatedRhs51);
        }
        ParseException parseException2334= null;
        int callStackSize2335= parsingStack.size();
        try {
            if (nextTokenType()== YIELD) {
                // Code for NonTerminal specified at Python.javacc:269:16
                pushOntoCallStack("AnnotatedRhs", "Python.javacc", 269, 16);
                try {
                    YieldExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$269$34.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:269:34
                pushOntoCallStack("AnnotatedRhs", "Python.javacc", 269, 34);
                try {
                    StarExpressions();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("AnnotatedRhs", "Python.javacc", 269, 16);
                throw new ParseException(this, AnnotatedRhs_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException2334= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2335);
            if (AnnotatedRhs51!=null) {
                if (parseException2334== null) {
                    closeNodeScope(AnnotatedRhs51, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:271:1
    final public void Decorators() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Decorators";
        Decorators Decorators52= null;
        if (buildTree) {
            Decorators52= new Decorators();
            openNodeScope(Decorators52);
        }
        ParseException parseException2354= null;
        int callStackSize2355= parsingStack.size();
        try {
            // Code for OneOrMore specified at Python.javacc:271:14
            while (true) {
                // Code for RegexpStringLiteral specified at Python.javacc:271:15
                consumeToken(AT);
                // Code for NonTerminal specified at Python.javacc:271:19
                pushOntoCallStack("Decorators", "Python.javacc", 271, 19);
                try {
                    NamedExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpRef specified at Python.javacc:271:35
                consumeToken(NEWLINE);
                if (!(nextTokenType()== AT)) break;
            }
        }
        catch(ParseException e) {
            parseException2354= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2355);
            if (Decorators52!=null) {
                if (parseException2354== null) {
                    closeNodeScope(Decorators52, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:273:1
    final public void Annotation() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Annotation";
        Annotation Annotation53= null;
        if (buildTree) {
            Annotation53= new Annotation();
            openNodeScope(Annotation53);
        }
        ParseException parseException2378= null;
        int callStackSize2379= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:273:14
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:273:18
            pushOntoCallStack("Annotation", "Python.javacc", 273, 18);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2378= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2379);
            if (Annotation53!=null) {
                if (parseException2378== null) {
                    closeNodeScope(Annotation53, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:275:1
    final public void InvocationArguments() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "InvocationArguments";
        InvocationArguments InvocationArguments54= null;
        if (buildTree) {
            InvocationArguments54= new InvocationArguments();
            openNodeScope(InvocationArguments54);
        }
        ParseException parseException2390= null;
        int callStackSize2391= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:276:4
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Python.javacc:277:4
            if (first_set$Python_javacc$278$7.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:278:7
                pushOntoCallStack("InvocationArguments", "Python.javacc", 278, 7);
                try {
                    Argument(false, false);
                }
                finally {
                    popCallStack();
                }
                // Code for CodeBlock specified at Python.javacc:279:7
                // Variables to keep track of what we have seen,
                // and thus, what is permissible. These are 
                // defined locally so only apply when parsing, not
                // scanning ahead, so the lookahead is looser
                // than the parsing.
                boolean seenEquals= peekNode().firstChildOfType(TokenType.ASSIGN)!=null;
                boolean seenDoubleStar= peekNode().firstChildOfType(TokenType.STAR_STAR)!=null;
                // Code for ZeroOrMore specified at Python.javacc:288:7
                while (true) {
                    if (!(scan$Python_javacc$289$10())) break;
                    // Code for RegexpStringLiteral specified at Python.javacc:290:10
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Python.javacc:291:10
                    pushOntoCallStack("InvocationArguments", "Python.javacc", 291, 10);
                    try {
                        Argument(seenEquals, seenDoubleStar);
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at Python.javacc:292:10
                    seenEquals|=peekNode().firstChildOfType(TokenType.ASSIGN)!=null;
                    seenDoubleStar|=peekNode().firstChildOfType(TokenType.STAR_STAR)!=null;
                }
                // Code for ZeroOrOne specified at Python.javacc:297:7
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:297:8
                    consumeToken(COMMA);
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:299:4
            consumeToken(RPAREN);
        }
        catch(ParseException e) {
            parseException2390= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2391);
            if (InvocationArguments54!=null) {
                if (parseException2390== null) {
                    closeNodeScope(InvocationArguments54, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Argument_FIRST_SET= Argument_FIRST_SET_init();
    static private EnumSet<TokenType> Argument_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, STAR_STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:302:1
    final public void Argument(boolean seenEquals, boolean seenDoubleStar) {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Argument";
        // Code for ExpansionChoice specified at Python.javacc:303:4
        Argument Argument55= null;
        if (buildTree) {
            Argument55= new Argument();
            openNodeScope(Argument55);
        }
        ParseException parseException2450= null;
        int callStackSize2451= parsingStack.size();
        try {
            if (scan$Python_javacc$303$4()) {
                // Code for RegexpRef specified at Python.javacc:303:4
                consumeToken(NAME);
                if ((!seenEquals)&&scan$Python_javacc$305$7()) {
                    // Code for RegexpStringLiteral specified at Python.javacc:306:7
                    consumeToken(COLONEQUALS);
                }
                else if (nextTokenType()== ASSIGN) {
                    // Code for RegexpStringLiteral specified at Python.javacc:308:7
                    consumeToken(ASSIGN);
                }
                else  {
                    pushOntoCallStack("Argument", "Python.javacc", 305, 7);
                    throw new ParseException(this, first_set$Python_javacc$305$7, parsingStack);
                }
                // Code for NonTerminal specified at Python.javacc:311:4
                pushOntoCallStack("Argument", "Python.javacc", 311, 4);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$313$4.contains(nextTokenType())) {
                // Code for ZeroOrOne specified at Python.javacc:313:4
                // Code for ExpansionChoice specified at Python.javacc:314:7
                if ((!seenDoubleStar)&&scan$Python_javacc$314$7()) {
                    // Code for RegexpStringLiteral specified at Python.javacc:314:35
                    consumeToken(STAR);
                }
                else if (nextTokenType()== STAR_STAR) {
                    // Code for RegexpStringLiteral specified at Python.javacc:316:7
                    consumeToken(STAR_STAR);
                }
                // Code for NonTerminal specified at Python.javacc:318:4
                pushOntoCallStack("Argument", "Python.javacc", 318, 4);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Argument", "Python.javacc", 303, 4);
                throw new ParseException(this, Argument_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException2450= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2451);
            if (Argument55!=null) {
                if (parseException2450== null) {
                    closeNodeScope(Argument55, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:321:1
    final public void KeyValuePair() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "KeyValuePair";
        KeyValuePair KeyValuePair56= null;
        if (buildTree) {
            KeyValuePair56= new KeyValuePair();
            openNodeScope(KeyValuePair56);
        }
        ParseException parseException2519= null;
        int callStackSize2520= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:321:16
            pushOntoCallStack("KeyValuePair", "Python.javacc", 321, 16);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:321:27
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:321:31
            pushOntoCallStack("KeyValuePair", "Python.javacc", 321, 31);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2519= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2520);
            if (KeyValuePair56!=null) {
                if (parseException2519== null) {
                    closeNodeScope(KeyValuePair56, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> DoubleStarredKeyValuePair_FIRST_SET= DoubleStarredKeyValuePair_FIRST_SET_init();
    static private EnumSet<TokenType> DoubleStarredKeyValuePair_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR_STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:323:1
    final public void DoubleStarredKeyValuePair() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "DoubleStarredKeyValuePair";
        // Code for ExpansionChoice specified at Python.javacc:324:5
        DoubleStarredKeyValuePair DoubleStarredKeyValuePair57= null;
        if (buildTree) {
            DoubleStarredKeyValuePair57= new DoubleStarredKeyValuePair();
            openNodeScope(DoubleStarredKeyValuePair57);
        }
        ParseException parseException2535= null;
        int callStackSize2536= parsingStack.size();
        try {
            if (nextTokenType()== STAR_STAR) {
                // Code for RegexpStringLiteral specified at Python.javacc:324:5
                consumeToken(STAR_STAR);
                // Code for NonTerminal specified at Python.javacc:324:10
                pushOntoCallStack("DoubleStarredKeyValuePair", "Python.javacc", 324, 10);
                try {
                    BitwiseOr();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$326$5.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:326:5
                pushOntoCallStack("DoubleStarredKeyValuePair", "Python.javacc", 326, 5);
                try {
                    KeyValuePair();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("DoubleStarredKeyValuePair", "Python.javacc", 324, 5);
                throw new ParseException(this, DoubleStarredKeyValuePair_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException2535= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2536);
            if (DoubleStarredKeyValuePair57!=null) {
                if (parseException2535== null) {
                    closeNodeScope(DoubleStarredKeyValuePair57, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:329:1
    final public void DoubleStarredKeyValuePairs() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "DoubleStarredKeyValuePairs";
        DoubleStarredKeyValuePairs DoubleStarredKeyValuePairs58= null;
        if (buildTree) {
            DoubleStarredKeyValuePairs58= new DoubleStarredKeyValuePairs();
            openNodeScope(DoubleStarredKeyValuePairs58);
        }
        ParseException parseException2559= null;
        int callStackSize2560= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:329:30
            pushOntoCallStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 30);
            try {
                DoubleStarredKeyValuePair();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:329:56
            while (true) {
                if (!(scan$Python_javacc$329$57())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:329:57
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:329:67
                pushOntoCallStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 67);
                try {
                    DoubleStarredKeyValuePair();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:329:95
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:329:96
                consumeToken(COMMA);
            }
        }
        catch(ParseException e) {
            parseException2559= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2560);
            if (DoubleStarredKeyValuePairs58!=null) {
                if (parseException2559== null) {
                    closeNodeScope(DoubleStarredKeyValuePairs58, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:331:1
    final public void Dict() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Dict";
        Dict Dict59= null;
        if (buildTree) {
            Dict59= new Dict();
            openNodeScope(Dict59);
        }
        ParseException parseException2595= null;
        int callStackSize2596= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:334:5
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at Python.javacc:335:5
            if (first_set$Python_javacc$335$6.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:335:6
                pushOntoCallStack("Dict", "Python.javacc", 335, 6);
                try {
                    DoubleStarredKeyValuePairs();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:336:5
            consumeToken(RBRACE);
        }
        catch(ParseException e) {
            parseException2595= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2596);
            if (Dict59!=null) {
                if (parseException2595== null) {
                    closeNodeScope(Dict59, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:340:1
    final public void DictComp() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "DictComp";
        DictComp DictComp60= null;
        if (buildTree) {
            DictComp60= new DictComp();
            openNodeScope(DictComp60);
        }
        ParseException parseException2624= null;
        int callStackSize2625= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:340:12
            consumeToken(LBRACE);
            // Code for NonTerminal specified at Python.javacc:340:16
            pushOntoCallStack("DictComp", "Python.javacc", 340, 16);
            try {
                KeyValuePair();
            }
            finally {
                popCallStack();
            }
            // Code for OneOrMore specified at Python.javacc:340:35
            while (true) {
                // Code for NonTerminal specified at Python.javacc:340:36
                pushOntoCallStack("DictComp", "Python.javacc", 340, 36);
                try {
                    ForIfClause();
                }
                finally {
                    popCallStack();
                }
                if (!(nextTokenType()== ASYNC||nextTokenType== FOR)) break;
            }
            // Code for RegexpStringLiteral specified at Python.javacc:340:50
            consumeToken(RBRACE);
        }
        catch(ParseException e) {
            parseException2624= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2625);
            if (DictComp60!=null) {
                if (parseException2624== null) {
                    closeNodeScope(DictComp60, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:342:1
    final public void Set() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Set";
        Set Set61= null;
        if (buildTree) {
            Set61= new Set();
            openNodeScope(Set61);
        }
        ParseException parseException2652= null;
        int callStackSize2653= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:342:7
            consumeToken(LBRACE);
            // Code for NonTerminal specified at Python.javacc:342:11
            pushOntoCallStack("Set", "Python.javacc", 342, 11);
            try {
                StarNamedExpressions();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:342:32
            consumeToken(RBRACE);
        }
        catch(ParseException e) {
            parseException2652= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2653);
            if (Set61!=null) {
                if (parseException2652== null) {
                    closeNodeScope(Set61, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:344:1
    final public void SetComp() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SetComp";
        SetComp SetComp62= null;
        if (buildTree) {
            SetComp62= new SetComp();
            openNodeScope(SetComp62);
        }
        ParseException parseException2668= null;
        int callStackSize2669= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:344:11
            consumeToken(LBRACE);
            // Code for NonTerminal specified at Python.javacc:344:15
            pushOntoCallStack("SetComp", "Python.javacc", 344, 15);
            try {
                NamedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for OneOrMore specified at Python.javacc:344:37
            while (true) {
                // Code for NonTerminal specified at Python.javacc:344:38
                pushOntoCallStack("SetComp", "Python.javacc", 344, 38);
                try {
                    ForIfClause();
                }
                finally {
                    popCallStack();
                }
                if (!(nextTokenType()== ASYNC||nextTokenType== FOR)) break;
            }
            // Code for RegexpStringLiteral specified at Python.javacc:344:52
            consumeToken(RBRACE);
        }
        catch(ParseException e) {
            parseException2668= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2669);
            if (SetComp62!=null) {
                if (parseException2668== null) {
                    closeNodeScope(SetComp62, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:346:1
    final public void ClassDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ClassDefinition";
        ClassDefinition ClassDefinition63= null;
        if (buildTree) {
            ClassDefinition63= new ClassDefinition();
            openNodeScope(ClassDefinition63);
        }
        ParseException parseException2696= null;
        int callStackSize2697= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:347:5
            if (nextTokenType()== AT) {
                // Code for NonTerminal specified at Python.javacc:347:6
                pushOntoCallStack("ClassDefinition", "Python.javacc", 347, 6);
                try {
                    Decorators();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:347:18
            consumeToken(CLASS);
            // Code for RegexpRef specified at Python.javacc:348:5
            consumeToken(NAME);
            // Code for ZeroOrOne specified at Python.javacc:348:12
            if (nextTokenType()== LPAREN) {
                // Code for NonTerminal specified at Python.javacc:348:13
                pushOntoCallStack("ClassDefinition", "Python.javacc", 348, 13);
                try {
                    InvocationArguments();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:349:5
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:350:5
            pushOntoCallStack("ClassDefinition", "Python.javacc", 350, 5);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2696= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2697);
            if (ClassDefinition63!=null) {
                if (parseException2696== null) {
                    closeNodeScope(ClassDefinition63, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:353:1
    final public void FunctionDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "FunctionDefinition";
        FunctionDefinition FunctionDefinition64= null;
        if (buildTree) {
            FunctionDefinition64= new FunctionDefinition();
            openNodeScope(FunctionDefinition64);
        }
        ParseException parseException2740= null;
        int callStackSize2741= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:354:5
            if (nextTokenType()== AT) {
                // Code for NonTerminal specified at Python.javacc:354:6
                pushOntoCallStack("FunctionDefinition", "Python.javacc", 354, 6);
                try {
                    Decorators();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:355:5
            if (nextTokenType()== ASYNC) {
                // Code for RegexpStringLiteral specified at Python.javacc:355:6
                consumeToken(ASYNC);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:356:5
            consumeToken(DEF);
            // Code for RegexpRef specified at Python.javacc:357:5
            consumeToken(NAME);
            // Code for RegexpStringLiteral specified at Python.javacc:358:5
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Python.javacc:359:5
            pushOntoCallStack("FunctionDefinition", "Python.javacc", 359, 5);
            try {
                Parameters();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:360:5
            consumeToken(RPAREN);
            // Code for ZeroOrOne specified at Python.javacc:361:5
            if (nextTokenType()== RARROW) {
                // Code for RegexpStringLiteral specified at Python.javacc:361:6
                consumeToken(RARROW);
                // Code for NonTerminal specified at Python.javacc:361:11
                pushOntoCallStack("FunctionDefinition", "Python.javacc", 361, 11);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:362:5
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:362:9
            pushOntoCallStack("FunctionDefinition", "Python.javacc", 362, 9);
            try {
                Block();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2740= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2741);
            if (FunctionDefinition64!=null) {
                if (parseException2740== null) {
                    closeNodeScope(FunctionDefinition64, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:365:1
    final public void LambdaDefinition() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "LambdaDefinition";
        LambdaDefinition LambdaDefinition65= null;
        if (buildTree) {
            LambdaDefinition65= new LambdaDefinition();
            openNodeScope(LambdaDefinition65);
        }
        ParseException parseException2812= null;
        int callStackSize2813= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:365:20
            consumeToken(LAMBDA);
            // Code for NonTerminal specified at Python.javacc:365:29
            pushOntoCallStack("LambdaDefinition", "Python.javacc", 365, 29);
            try {
                Parameters();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:365:40
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:365:44
            pushOntoCallStack("LambdaDefinition", "Python.javacc", 365, 44);
            try {
                Expression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2812= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2813);
            if (LambdaDefinition65!=null) {
                if (parseException2812== null) {
                    closeNodeScope(LambdaDefinition65, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Expression_FIRST_SET= Expression_FIRST_SET_init();
    static private EnumSet<TokenType> Expression_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:371:1
    final public void Expression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Expression";
        // Code for ExpansionChoice specified at Python.javacc:371:14
        Expression Expression66= null;
        if (buildTree) {
            Expression66= new Expression();
            openNodeScope(Expression66);
        }
        ParseException parseException2832= null;
        int callStackSize2833= parsingStack.size();
        try {
            if (first_set$Python_javacc$371$14.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:371:14
                pushOntoCallStack("Expression", "Python.javacc", 371, 14);
                try {
                    Disjunction();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:371:26
                if (nextTokenType()== IF) {
                    // Code for RegexpStringLiteral specified at Python.javacc:371:27
                    consumeToken(IF);
                    // Code for NonTerminal specified at Python.javacc:371:32
                    pushOntoCallStack("Expression", "Python.javacc", 371, 32);
                    try {
                        Disjunction();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for RegexpStringLiteral specified at Python.javacc:371:44
                    consumeToken(ELSE);
                    // Code for NonTerminal specified at Python.javacc:371:51
                    pushOntoCallStack("Expression", "Python.javacc", 371, 51);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            else if (nextTokenType()== LAMBDA) {
                // Code for NonTerminal specified at Python.javacc:371:65
                pushOntoCallStack("Expression", "Python.javacc", 371, 65);
                try {
                    LambdaDefinition();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Expression", "Python.javacc", 371, 14);
                throw new ParseException(this, Expression_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException2832= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2833);
            if (Expression66!=null) {
                if (parseException2832== null) {
                    closeNodeScope(Expression66, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:373:1
    final public void Disjunction() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Disjunction";
        Disjunction Disjunction67= null;
        if (buildTree) {
            Disjunction67= new Disjunction();
            openNodeScope(Disjunction67);
        }
        ParseException parseException2876= null;
        int callStackSize2877= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:373:15
            pushOntoCallStack("Disjunction", "Python.javacc", 373, 15);
            try {
                Conjunction();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:373:27
            while (true) {
                if (!(nextTokenType()== OR)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:373:28
                consumeToken(OR);
                // Code for NonTerminal specified at Python.javacc:373:33
                pushOntoCallStack("Disjunction", "Python.javacc", 373, 33);
                try {
                    Conjunction();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException2876= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2877);
            if (Disjunction67!=null) {
                if (parseException2876== null) {
                    closeNodeScope(Disjunction67, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:375:1
    final public void Conjunction() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Conjunction";
        Conjunction Conjunction68= null;
        if (buildTree) {
            Conjunction68= new Conjunction();
            openNodeScope(Conjunction68);
        }
        ParseException parseException2900= null;
        int callStackSize2901= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:375:15
            pushOntoCallStack("Conjunction", "Python.javacc", 375, 15);
            try {
                Inversion();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:375:25
            while (true) {
                if (!(nextTokenType()== AND)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:375:26
                consumeToken(AND);
                // Code for NonTerminal specified at Python.javacc:375:32
                pushOntoCallStack("Conjunction", "Python.javacc", 375, 32);
                try {
                    Inversion();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException2900= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2901);
            if (Conjunction68!=null) {
                if (parseException2900== null) {
                    closeNodeScope(Conjunction68, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:377:1
    final public void Inversion() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Inversion";
        Inversion Inversion69= null;
        if (buildTree) {
            Inversion69= new Inversion();
            openNodeScope(Inversion69);
        }
        ParseException parseException2924= null;
        int callStackSize2925= parsingStack.size();
        try {
            // Code for ZeroOrMore specified at Python.javacc:377:13
            while (true) {
                if (!(nextTokenType()== NOT)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:377:14
                consumeToken(NOT);
            }
            // Code for NonTerminal specified at Python.javacc:377:22
            pushOntoCallStack("Inversion", "Python.javacc", 377, 22);
            try {
                Comparison();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException2924= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2925);
            if (Inversion69!=null) {
                if (parseException2924== null) {
                    closeNodeScope(Inversion69, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:379:1
    final public void Comparison() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Comparison";
        Comparison Comparison70= null;
        if (buildTree) {
            Comparison70= new Comparison();
            openNodeScope(Comparison70);
        }
        ParseException parseException2944= null;
        int callStackSize2945= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:379:14
            pushOntoCallStack("Comparison", "Python.javacc", 379, 14);
            try {
                BitwiseOr();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:379:24
            while (true) {
                if (!(first_set$Python_javacc$379$25.contains(nextTokenType()))) break;
                // Code for NonTerminal specified at Python.javacc:379:25
                pushOntoCallStack("Comparison", "Python.javacc", 379, 25);
                try {
                    ComparisonOperator();
                }
                finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Python.javacc:379:44
                pushOntoCallStack("Comparison", "Python.javacc", 379, 44);
                try {
                    BitwiseOr();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException2944= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize2945);
            if (Comparison70!=null) {
                if (parseException2944== null) {
                    closeNodeScope(Comparison70, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> ComparisonOperator_FIRST_SET= ComparisonOperator_FIRST_SET_init();
    static private EnumSet<TokenType> ComparisonOperator_FIRST_SET_init() {
        return tokenTypeSet(EQ, LE, GE, NE, GT, LT, IN, IS, NOT);
    }

    // Python.javacc:381:1
    final public void ComparisonOperator() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ComparisonOperator";
        // Code for ExpansionChoice specified at Python.javacc:382:4
        if (nextTokenType()== LT) {
            // Code for RegexpStringLiteral specified at Python.javacc:382:4
            consumeToken(LT);
        }
        else if (nextTokenType()== GT) {
            // Code for RegexpStringLiteral specified at Python.javacc:382:10
            consumeToken(GT);
        }
        else if (nextTokenType()== EQ) {
            // Code for RegexpStringLiteral specified at Python.javacc:382:16
            consumeToken(EQ);
        }
        else if (nextTokenType()== GE) {
            // Code for RegexpStringLiteral specified at Python.javacc:382:23
            consumeToken(GE);
        }
        else if (nextTokenType()== LE) {
            // Code for RegexpStringLiteral specified at Python.javacc:382:30
            consumeToken(LE);
        }
        else if (nextTokenType()== NE) {
            // Code for RegexpStringLiteral specified at Python.javacc:382:37
            consumeToken(NE);
        }
        else if (nextTokenType()== IN||nextTokenType== NOT) {
            // Code for ZeroOrOne specified at Python.javacc:384:4
            if (nextTokenType()== NOT) {
                // Code for RegexpStringLiteral specified at Python.javacc:384:5
                consumeToken(NOT);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:384:12
            consumeToken(IN);
        }
        else if (nextTokenType()== IS) {
            // Code for RegexpStringLiteral specified at Python.javacc:386:4
            consumeToken(IS);
            // Code for ZeroOrOne specified at Python.javacc:386:9
            if (nextTokenType()== NOT) {
                // Code for RegexpStringLiteral specified at Python.javacc:386:10
                consumeToken(NOT);
            }
        }
        else  {
            pushOntoCallStack("ComparisonOperator", "Python.javacc", 382, 4);
            throw new ParseException(this, ComparisonOperator_FIRST_SET, parsingStack);
        }
    }

    // Python.javacc:389:1
    final public void StarTarget() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarTarget";
        StarTarget StarTarget71= null;
        if (buildTree) {
            StarTarget71= new StarTarget();
            openNodeScope(StarTarget71);
        }
        ParseException parseException3060= null;
        int callStackSize3061= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:389:14
            if (nextTokenType()== STAR) {
                // Code for RegexpStringLiteral specified at Python.javacc:389:15
                consumeToken(STAR);
            }
            // Code for NonTerminal specified at Python.javacc:389:20
            pushOntoCallStack("StarTarget", "Python.javacc", 389, 20);
            try {
                PrimaryExpression();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException3060= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3061);
            if (StarTarget71!=null) {
                if (parseException3060== null) {
                    closeNodeScope(StarTarget71, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:391:1
    final public void StarTargets() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarTargets";
        StarTargets StarTargets72= null;
        if (buildTree) {
            StarTargets72= new StarTargets();
            openNodeScope(StarTargets72);
        }
        ParseException parseException3080= null;
        int callStackSize3081= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:391:15
            pushOntoCallStack("StarTargets", "Python.javacc", 391, 15);
            try {
                StarTarget();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:391:26
            while (true) {
                if (!(scan$Python_javacc$391$27())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:391:27
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:391:37
                pushOntoCallStack("StarTargets", "Python.javacc", 391, 37);
                try {
                    StarTarget();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:391:50
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:391:51
                consumeToken(COMMA);
            }
        }
        catch(ParseException e) {
            parseException3080= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3081);
            if (StarTargets72!=null) {
                if (parseException3080== null) {
                    closeNodeScope(StarTargets72, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:393:1
    final public void ForIfClause() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ForIfClause";
        ForIfClause ForIfClause73= null;
        if (buildTree) {
            ForIfClause73= new ForIfClause();
            openNodeScope(ForIfClause73);
        }
        ParseException parseException3116= null;
        int callStackSize3117= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:393:15
            if (nextTokenType()== ASYNC) {
                // Code for RegexpStringLiteral specified at Python.javacc:393:16
                consumeToken(ASYNC);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:393:25
            consumeToken(FOR);
            // Code for NonTerminal specified at Python.javacc:393:31
            pushOntoCallStack("ForIfClause", "Python.javacc", 393, 31);
            try {
                StarTargets();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:393:43
            consumeToken(IN);
            // Code for NonTerminal specified at Python.javacc:393:48
            pushOntoCallStack("ForIfClause", "Python.javacc", 393, 48);
            try {
                Disjunction();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:393:60
            while (true) {
                if (!(nextTokenType()== IF)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:393:61
                consumeToken(IF);
                // Code for NonTerminal specified at Python.javacc:393:66
                pushOntoCallStack("ForIfClause", "Python.javacc", 393, 66);
                try {
                    Disjunction();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException3116= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3117);
            if (ForIfClause73!=null) {
                if (parseException3116== null) {
                    closeNodeScope(ForIfClause73, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:395:1
    final public void GenExp() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "GenExp";
        GenExp GenExp74= null;
        if (buildTree) {
            GenExp74= new GenExp();
            openNodeScope(GenExp74);
        }
        ParseException parseException3164= null;
        int callStackSize3165= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:395:10
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Python.javacc:395:14
            pushOntoCallStack("GenExp", "Python.javacc", 395, 14);
            try {
                NamedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for OneOrMore specified at Python.javacc:395:36
            while (true) {
                // Code for NonTerminal specified at Python.javacc:395:37
                pushOntoCallStack("GenExp", "Python.javacc", 395, 37);
                try {
                    ForIfClause();
                }
                finally {
                    popCallStack();
                }
                if (!(nextTokenType()== ASYNC||nextTokenType== FOR)) break;
            }
            // Code for RegexpStringLiteral specified at Python.javacc:395:51
            consumeToken(RPAREN);
        }
        catch(ParseException e) {
            parseException3164= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3165);
            if (GenExp74!=null) {
                if (parseException3164== null) {
                    closeNodeScope(GenExp74, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:397:1
    final public void List() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "List";
        List List75= null;
        if (buildTree) {
            List75= new List();
            openNodeScope(List75);
        }
        ParseException parseException3192= null;
        int callStackSize3193= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:397:8
            consumeToken(LBRACKET);
            // Code for ZeroOrOne specified at Python.javacc:397:12
            if (first_set$Python_javacc$397$13.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:397:13
                pushOntoCallStack("List", "Python.javacc", 397, 13);
                try {
                    StarNamedExpressions();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:397:35
            consumeToken(RBRACKET);
        }
        catch(ParseException e) {
            parseException3192= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3193);
            if (List75!=null) {
                if (parseException3192== null) {
                    closeNodeScope(List75, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:399:1
    final public void ListComp() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ListComp";
        ListComp ListComp76= null;
        if (buildTree) {
            ListComp76= new ListComp();
            openNodeScope(ListComp76);
        }
        ParseException parseException3216= null;
        int callStackSize3217= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:399:12
            consumeToken(LBRACKET);
            // Code for NonTerminal specified at Python.javacc:399:16
            pushOntoCallStack("ListComp", "Python.javacc", 399, 16);
            try {
                NamedExpression();
            }
            finally {
                popCallStack();
            }
            // Code for OneOrMore specified at Python.javacc:399:38
            while (true) {
                // Code for NonTerminal specified at Python.javacc:399:39
                pushOntoCallStack("ListComp", "Python.javacc", 399, 39);
                try {
                    ForIfClause();
                }
                finally {
                    popCallStack();
                }
                if (!(nextTokenType()== ASYNC||nextTokenType== FOR)) break;
            }
            // Code for RegexpStringLiteral specified at Python.javacc:399:53
            consumeToken(RBRACKET);
        }
        catch(ParseException e) {
            parseException3216= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3217);
            if (ListComp76!=null) {
                if (parseException3216== null) {
                    closeNodeScope(ListComp76, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> StarEtc_FIRST_SET= tokenTypeSet(STAR, STAR_STAR);
    // Python.javacc:401:1
    final public void StarEtc() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarEtc";
        // Code for ExpansionChoice specified at Python.javacc:402:4
        StarEtc StarEtc77= null;
        if (buildTree) {
            StarEtc77= new StarEtc();
            openNodeScope(StarEtc77);
        }
        ParseException parseException3244= null;
        int callStackSize3245= parsingStack.size();
        try {
            if (nextTokenType()== STAR_STAR) {
                // Code for NonTerminal specified at Python.javacc:402:4
                pushOntoCallStack("StarEtc", "Python.javacc", 402, 4);
                try {
                    KeyWords();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$404$4()) {
                // Code for RegexpStringLiteral specified at Python.javacc:404:4
                consumeToken(STAR);
                // Code for RegexpStringLiteral specified at Python.javacc:404:8
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:404:17
                pushOntoCallStack("StarEtc", "Python.javacc", 404, 17);
                try {
                    ParamMaybeDefault();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrMore specified at Python.javacc:404:35
                while (true) {
                    if (!(scan$Python_javacc$404$36())) break;
                    // Code for RegexpStringLiteral specified at Python.javacc:404:36
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Python.javacc:404:46
                    pushOntoCallStack("StarEtc", "Python.javacc", 404, 46);
                    try {
                        ParamMaybeDefault();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:404:66
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:404:67
                    consumeToken(COMMA);
                    // Code for ZeroOrOne specified at Python.javacc:404:71
                    if (nextTokenType()== STAR_STAR) {
                        // Code for NonTerminal specified at Python.javacc:404:72
                        pushOntoCallStack("StarEtc", "Python.javacc", 404, 72);
                        try {
                            KeyWords();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                }
            }
            else if (nextTokenType()== STAR) {
                // Code for RegexpStringLiteral specified at Python.javacc:406:4
                consumeToken(STAR);
                // Code for RegexpRef specified at Python.javacc:406:8
                consumeToken(NAME);
                // Code for ZeroOrOne specified at Python.javacc:406:15
                if (scan$Python_javacc$406$16()) {
                    // Code for RegexpStringLiteral specified at Python.javacc:406:48
                    consumeToken(COLON);
                    // Code for NonTerminal specified at Python.javacc:406:52
                    pushOntoCallStack("StarEtc", "Python.javacc", 406, 52);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrMore specified at Python.javacc:406:64
                while (true) {
                    if (!(scan$Python_javacc$406$65())) break;
                    // Code for RegexpStringLiteral specified at Python.javacc:406:65
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Python.javacc:406:75
                    pushOntoCallStack("StarEtc", "Python.javacc", 406, 75);
                    try {
                        ParamMaybeDefault();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:406:95
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:406:96
                    consumeToken(COMMA);
                    // Code for ZeroOrOne specified at Python.javacc:406:100
                    if (nextTokenType()== STAR_STAR) {
                        // Code for NonTerminal specified at Python.javacc:406:101
                        pushOntoCallStack("StarEtc", "Python.javacc", 406, 101);
                        try {
                            KeyWords();
                        }
                        finally {
                            popCallStack();
                        }
                    }
                }
            }
            else  {
                pushOntoCallStack("StarEtc", "Python.javacc", 402, 4);
                throw new ParseException(this, StarEtc_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException3244= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3245);
            if (StarEtc77!=null) {
                if (parseException3244== null) {
                    closeNodeScope(StarEtc77, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:409:1
    final public void ParamMaybeDefault() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ParamMaybeDefault";
        ParamMaybeDefault ParamMaybeDefault78= null;
        if (buildTree) {
            ParamMaybeDefault78= new ParamMaybeDefault();
            openNodeScope(ParamMaybeDefault78);
        }
        ParseException parseException3380= null;
        int callStackSize3381= parsingStack.size();
        try {
            // Code for RegexpRef specified at Python.javacc:409:21
            consumeToken(NAME);
            // Code for ZeroOrOne specified at Python.javacc:409:28
            if (nextTokenType()== COLON) {
                // Code for RegexpStringLiteral specified at Python.javacc:409:29
                consumeToken(COLON);
                // Code for NonTerminal specified at Python.javacc:409:33
                pushOntoCallStack("ParamMaybeDefault", "Python.javacc", 409, 33);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:409:45
            if (nextTokenType()== ASSIGN) {
                // Code for RegexpStringLiteral specified at Python.javacc:409:46
                consumeToken(ASSIGN);
                // Code for NonTerminal specified at Python.javacc:409:50
                pushOntoCallStack("ParamMaybeDefault", "Python.javacc", 409, 50);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException3380= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3381);
            if (ParamMaybeDefault78!=null) {
                if (parseException3380== null) {
                    closeNodeScope(ParamMaybeDefault78, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:411:1
    final public void KeyWords() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "KeyWords";
        KeyWords KeyWords79= null;
        if (buildTree) {
            KeyWords79= new KeyWords();
            openNodeScope(KeyWords79);
        }
        ParseException parseException3420= null;
        int callStackSize3421= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:412:4
            consumeToken(STAR_STAR);
            // Code for RegexpRef specified at Python.javacc:412:9
            consumeToken(NAME);
            // Code for ZeroOrOne specified at Python.javacc:413:4
            if (scan$Python_javacc$414$8()) {
                // Code for RegexpStringLiteral specified at Python.javacc:415:8
                consumeToken(COLON);
                // Code for NonTerminal specified at Python.javacc:415:12
                pushOntoCallStack("KeyWords", "Python.javacc", 415, 12);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException3420= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3421);
            if (KeyWords79!=null) {
                if (parseException3420== null) {
                    closeNodeScope(KeyWords79, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:419:1
    final public void Parameters() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Parameters";
        Parameters Parameters80= null;
        if (buildTree) {
            Parameters80= new Parameters();
            openNodeScope(Parameters80);
        }
        boolean seenDefault= false, seenSlash= false;
        ParseException parseException3448= null;
        int callStackSize3449= parsingStack.size();
        try {
            // Code for ZeroOrOne specified at Python.javacc:421:5
            if (nextTokenType()== NAME) {
                // Code for RegexpRef specified at Python.javacc:422:7
                consumeToken(NAME);
                // Code for ZeroOrOne specified at Python.javacc:425:7
                if (scan$Python_javacc$425$8()) {
                    // Code for RegexpStringLiteral specified at Python.javacc:425:38
                    consumeToken(COLON);
                    // Code for NonTerminal specified at Python.javacc:425:42
                    pushOntoCallStack("Parameters", "Python.javacc", 425, 42);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:426:7
                if (nextTokenType()== ASSIGN) {
                    // Code for RegexpStringLiteral specified at Python.javacc:426:8
                    consumeToken(ASSIGN);
                    // Code for NonTerminal specified at Python.javacc:426:12
                    pushOntoCallStack("Parameters", "Python.javacc", 426, 12);
                    try {
                        Expression();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for CodeBlock specified at Python.javacc:426:23
                    seenDefault= true;
                }
                // Code for ZeroOrMore specified at Python.javacc:427:7
                while (true) {
                    if (!(scan$Python_javacc$427$8())) break;
                    // Code for RegexpStringLiteral specified at Python.javacc:427:8
                    consumeToken(COMMA);
                    if ((!seenSlash)&&scan$Python_javacc$430$11()) {
                        // Code for RegexpStringLiteral specified at Python.javacc:431:11
                        consumeToken(SLASH);
                        // Code for CodeBlock specified at Python.javacc:431:15
                        seenSlash= true;
                    }
                    else if (nextTokenType()== NAME) {
                        // Code for RegexpRef specified at Python.javacc:433:11
                        consumeToken(NAME);
                        // Code for ZeroOrOne specified at Python.javacc:433:18
                        if (scan$Python_javacc$433$19()) {
                            // Code for RegexpStringLiteral specified at Python.javacc:433:49
                            consumeToken(COLON);
                            // Code for NonTerminal specified at Python.javacc:433:53
                            pushOntoCallStack("Parameters", "Python.javacc", 433, 53);
                            try {
                                Expression();
                            }
                            finally {
                                popCallStack();
                            }
                        }
                        // Code for ZeroOrOne specified at Python.javacc:434:11
                        if ((seenDefault||getToken(1).getType()== TokenType.ASSIGN)&&scan$Python_javacc$437$14()) {
                            // Code for RegexpStringLiteral specified at Python.javacc:438:17
                            consumeToken(ASSIGN);
                            // Code for NonTerminal specified at Python.javacc:438:21
                            pushOntoCallStack("Parameters", "Python.javacc", 438, 21);
                            try {
                                Expression();
                            }
                            finally {
                                popCallStack();
                            }
                            // Code for CodeBlock specified at Python.javacc:438:32
                            seenDefault= true;
                        }
                    }
                    else  {
                        pushOntoCallStack("Parameters", "Python.javacc", 430, 11);
                        throw new ParseException(this, first_set$Python_javacc$430$11, parsingStack);
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:442:7
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:442:9
                    consumeToken(COMMA);
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:444:5
            if (scan$Python_javacc$445$7()) {
                // Code for NonTerminal specified at Python.javacc:445:26
                pushOntoCallStack("Parameters", "Python.javacc", 445, 26);
                try {
                    StarEtc();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:447:5
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:447:6
                consumeToken(COMMA);
            }
        }
        catch(ParseException e) {
            parseException3448= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3449);
            if (Parameters80!=null) {
                if (parseException3448== null) {
                    closeNodeScope(Parameters80, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> AugAssign_FIRST_SET= AugAssign_FIRST_SET_init();
    static private EnumSet<TokenType> AugAssign_FIRST_SET_init() {
        return tokenTypeSet(MINUSASSIGN, PLUSASSIGN, STARASSIGN, ATASSIGN, SLASHASSIGN, REMASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, LSHIFTASSIGN, RSHIFTASSIGN, STARSTARASSIGN, SLASHSLASHASSIGN);
    }

    // Python.javacc:450:1
    final public void AugAssign() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "AugAssign";
        // Code for ExpansionChoice specified at Python.javacc:451:5
        if (nextTokenType()== PLUSASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:5
            consumeToken(PLUSASSIGN);
        }
        else if (nextTokenType()== MINUSASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:12
            consumeToken(MINUSASSIGN);
        }
        else if (nextTokenType()== STARASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:19
            consumeToken(STARASSIGN);
        }
        else if (nextTokenType()== ATASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:26
            consumeToken(ATASSIGN);
        }
        else if (nextTokenType()== SLASHASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:33
            consumeToken(SLASHASSIGN);
        }
        else if (nextTokenType()== REMASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:40
            consumeToken(REMASSIGN);
        }
        else if (nextTokenType()== ANDASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:47
            consumeToken(ANDASSIGN);
        }
        else if (nextTokenType()== ORASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:54
            consumeToken(ORASSIGN);
        }
        else if (nextTokenType()== XORASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:61
            consumeToken(XORASSIGN);
        }
        else if (nextTokenType()== LSHIFTASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:451:68
            consumeToken(LSHIFTASSIGN);
        }
        else if (nextTokenType()== RSHIFTASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:452:7
            consumeToken(RSHIFTASSIGN);
        }
        else if (nextTokenType()== STARSTARASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:452:15
            consumeToken(STARSTARASSIGN);
        }
        else if (nextTokenType()== SLASHSLASHASSIGN) {
            // Code for RegexpStringLiteral specified at Python.javacc:452:23
            consumeToken(SLASHSLASHASSIGN);
        }
        else  {
            pushOntoCallStack("AugAssign", "Python.javacc", 451, 5);
            throw new ParseException(this, AugAssign_FIRST_SET, parsingStack);
        }
    }

    static private final EnumSet<TokenType> SimpleAssignTarget_FIRST_SET= SimpleAssignTarget_FIRST_SET_init();
    static private EnumSet<TokenType> SimpleAssignTarget_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, ELLIPSIS, FALSE, NONE, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:455:1
    final public void SimpleAssignTarget() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SimpleAssignTarget";
        // Code for ExpansionChoice specified at Python.javacc:456:4
        SimpleAssignTarget SimpleAssignTarget81= null;
        if (buildTree) {
            SimpleAssignTarget81= new SimpleAssignTarget();
            openNodeScope(SimpleAssignTarget81);
        }
        ParseException parseException3717= null;
        int callStackSize3718= parsingStack.size();
        try {
            if (first_set$Python_javacc$456$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:456:4
                pushOntoCallStack("SimpleAssignTarget", "Python.javacc", 456, 4);
                try {
                    PrimaryExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpStringLiteral specified at Python.javacc:458:4
                consumeToken(LPAREN);
                // Code for NonTerminal specified at Python.javacc:458:8
                pushOntoCallStack("SimpleAssignTarget", "Python.javacc", 458, 8);
                try {
                    SimpleAssignTarget();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpStringLiteral specified at Python.javacc:458:27
                consumeToken(RPAREN);
            }
            else  {
                pushOntoCallStack("SimpleAssignTarget", "Python.javacc", 456, 4);
                throw new ParseException(this, SimpleAssignTarget_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException3717= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3718);
            if (SimpleAssignTarget81!=null) {
                if (parseException3717== null) {
                    closeNodeScope(SimpleAssignTarget81, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:461:1
    final public void Assignment() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Assignment";
        Assignment Assignment82= null;
        if (buildTree) {
            Assignment82= new Assignment();
            openNodeScope(Assignment82);
        }
        ParseException parseException3745= null;
        int callStackSize3746= parsingStack.size();
        try {
            if (scan$Python_javacc$464$3()) {
                // Code for NonTerminal specified at Python.javacc:464:3
                pushOntoCallStack("Assignment", "Python.javacc", 464, 3);
                try {
                    SimpleAssignTarget();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpStringLiteral specified at Python.javacc:464:22
                consumeToken(COLON);
                // Code for NonTerminal specified at Python.javacc:464:31
                pushOntoCallStack("Assignment", "Python.javacc", 464, 31);
                try {
                    Expression();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:464:42
                if (nextTokenType()== ASSIGN) {
                    // Code for RegexpStringLiteral specified at Python.javacc:464:43
                    consumeToken(ASSIGN);
                    // Code for NonTerminal specified at Python.javacc:464:47
                    pushOntoCallStack("Assignment", "Python.javacc", 464, 47);
                    try {
                        AnnotatedRhs();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            else if (scan$Python_javacc$466$3()) {
                // Code for NonTerminal specified at Python.javacc:466:3
                pushOntoCallStack("Assignment", "Python.javacc", 466, 3);
                try {
                    SimpleAssignTarget();
                }
                finally {
                    popCallStack();
                }
                // Code for NonTerminal specified at Python.javacc:466:22
                pushOntoCallStack("Assignment", "Python.javacc", 466, 22);
                try {
                    AugAssign();
                }
                finally {
                    popCallStack();
                }
                if (nextTokenType()== YIELD) {
                    // Code for NonTerminal specified at Python.javacc:466:38
                    pushOntoCallStack("Assignment", "Python.javacc", 466, 38);
                    try {
                        YieldExpression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else if (first_set$Python_javacc$466$56.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:466:56
                    pushOntoCallStack("Assignment", "Python.javacc", 466, 56);
                    try {
                        StarExpressions();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else  {
                    pushOntoCallStack("Assignment", "Python.javacc", 466, 38);
                    throw new ParseException(this, first_set$Python_javacc$466$38, parsingStack);
                }
            }
            else if (first_set$Python_javacc$468$3.contains(nextTokenType())) {
                // Code for OneOrMore specified at Python.javacc:468:3
                while (true) {
                    // Code for NonTerminal specified at Python.javacc:468:4
                    pushOntoCallStack("Assignment", "Python.javacc", 468, 4);
                    try {
                        StarTargets();
                    }
                    finally {
                        popCallStack();
                    }
                    // Code for RegexpStringLiteral specified at Python.javacc:468:16
                    consumeToken(ASSIGN);
                    if (!(scan$Python_javacc$468$4())) break;
                }
                if (nextTokenType()== YIELD) {
                    // Code for NonTerminal specified at Python.javacc:468:28
                    pushOntoCallStack("Assignment", "Python.javacc", 468, 28);
                    try {
                        YieldExpression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else if (first_set$Python_javacc$468$46.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:468:46
                    pushOntoCallStack("Assignment", "Python.javacc", 468, 46);
                    try {
                        StarExpressions();
                    }
                    finally {
                        popCallStack();
                    }
                }
                else  {
                    pushOntoCallStack("Assignment", "Python.javacc", 468, 28);
                    throw new ParseException(this, first_set$Python_javacc$468$28, parsingStack);
                }
            }
            else  {
                pushOntoCallStack("Assignment", "Python.javacc", 464, 3);
                throw new ParseException(this, first_set$Python_javacc$464$3, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException3745= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3746);
            if (Assignment82!=null) {
                if (parseException3745== null) {
                    closeNodeScope(Assignment82, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:484:1
    final public void MatchStatement() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MatchStatement";
        MatchStatement MatchStatement83= null;
        if (buildTree) {
            MatchStatement83= new MatchStatement();
            openNodeScope(MatchStatement83);
        }
        ParseException parseException3860= null;
        int callStackSize3861= parsingStack.size();
        try {
            EnumSet<TokenType> previousActives3864= EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged3865= false;
            somethingChanged3865= activateTokenTypes(MATCH);
            try {
                // Code for RegexpStringLiteral specified at Python.javacc:486:27
                consumeToken(MATCH);
            }
            finally {
                token_source.activeTokenTypes= previousActives3864;
                if (somethingChanged3865) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType= null;
                }
            }
            // Code for NonTerminal specified at Python.javacc:487:4
            pushOntoCallStack("MatchStatement", "Python.javacc", 487, 4);
            try {
                SubjectExpression();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:488:4
            consumeToken(COLON);
            // Code for RegexpRef specified at Python.javacc:489:4
            consumeToken(NEWLINE);
            // Code for RegexpRef specified at Python.javacc:490:4
            consumeToken(INDENT);
            // Code for OneOrMore specified at Python.javacc:491:25
            EnumSet<TokenType> previousActives3891= EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged3892= false;
            somethingChanged3892= activateTokenTypes(CASE);
            try {
                while (true) {
                    // Code for NonTerminal specified at Python.javacc:491:26
                    pushOntoCallStack("MatchStatement", "Python.javacc", 491, 26);
                    try {
                        CaseBlock();
                    }
                    finally {
                        popCallStack();
                    }
                    if (!(nextTokenType()== CASE)) break;
                }
            }
            finally {
                token_source.activeTokenTypes= previousActives3891;
                if (somethingChanged3892) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType= null;
                }
            }
            // Code for RegexpRef specified at Python.javacc:492:4
            consumeToken(DEDENT);
        }
        catch(ParseException e) {
            parseException3860= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3861);
            if (MatchStatement83!=null) {
                if (parseException3860== null) {
                    closeNodeScope(MatchStatement83, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:495:1
    final public void CaseBlock() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "CaseBlock";
        CaseBlock CaseBlock84= null;
        if (buildTree) {
            CaseBlock84= new CaseBlock();
            openNodeScope(CaseBlock84);
        }
        ParseException parseException3909= null;
        int callStackSize3910= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:496:5
            consumeToken(CASE);
            EnumSet<TokenType> previousActives3917= EnumSet.copyOf(token_source.activeTokenTypes);
            boolean somethingChanged3918= false;
            somethingChanged3918= somethingChanged3918|=deactivateTokenTypes(CASE);
            try {
                // Code for NonTerminal specified at Python.javacc:499:7
                pushOntoCallStack("CaseBlock", "Python.javacc", 499, 7);
                try {
                    Patterns();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:500:7
                if (nextTokenType()== IF) {
                    // Code for RegexpStringLiteral specified at Python.javacc:500:8
                    consumeToken(IF);
                    // Code for NonTerminal specified at Python.javacc:500:13
                    pushOntoCallStack("CaseBlock", "Python.javacc", 500, 13);
                    try {
                        NamedExpression();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpStringLiteral specified at Python.javacc:501:7
                consumeToken(COLON);
                // Code for NonTerminal specified at Python.javacc:502:7
                pushOntoCallStack("CaseBlock", "Python.javacc", 502, 7);
                try {
                    Block();
                }
                finally {
                    popCallStack();
                }
            }
            finally {
                token_source.activeTokenTypes= previousActives3917;
                if (somethingChanged3918) {
                    token_source.reset(lastConsumedToken);
                    nextTokenType= null;
                }
            }
        }
        catch(ParseException e) {
            parseException3909= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3910);
            if (CaseBlock84!=null) {
                if (parseException3909== null) {
                    closeNodeScope(CaseBlock84, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> Patterns_FIRST_SET= Patterns_FIRST_SET_init();
    static private EnumSet<TokenType> Patterns_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:507:1
    final public void Patterns() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Patterns";
        // Code for ExpansionChoice specified at Python.javacc:508:4
        Patterns Patterns85= null;
        if (buildTree) {
            Patterns85= new Patterns();
            openNodeScope(Patterns85);
        }
        ParseException parseException3952= null;
        int callStackSize3953= parsingStack.size();
        try {
            if (scan$Python_javacc$508$4()) {
                // Code for NonTerminal specified at Python.javacc:508:4
                pushOntoCallStack("Patterns", "Python.javacc", 508, 4);
                try {
                    OpenSequencePattern();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$510$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:510:4
                pushOntoCallStack("Patterns", "Python.javacc", 510, 4);
                try {
                    Pattern();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("Patterns", "Python.javacc", 508, 4);
                throw new ParseException(this, Patterns_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException3952= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3953);
            if (Patterns85!=null) {
                if (parseException3952== null) {
                    closeNodeScope(Patterns85, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:513:1
    final public void StarPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "StarPattern";
        StarPattern StarPattern86= null;
        if (buildTree) {
            StarPattern86= new StarPattern();
            openNodeScope(StarPattern86);
        }
        ParseException parseException3972= null;
        int callStackSize3973= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:514:4
            consumeToken(STAR);
            // Code for RegexpRef specified at Python.javacc:514:8
            consumeToken(NAME);
        }
        catch(ParseException e) {
            parseException3972= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize3973);
            if (StarPattern86!=null) {
                if (parseException3972== null) {
                    closeNodeScope(StarPattern86, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> MaybeStarPattern_FIRST_SET= MaybeStarPattern_FIRST_SET_init();
    static private EnumSet<TokenType> MaybeStarPattern_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:517:1
    final public void MaybeStarPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MaybeStarPattern";
        // Code for ExpansionChoice specified at Python.javacc:517:25
        if (nextTokenType()== STAR) {
            // Code for NonTerminal specified at Python.javacc:517:25
            pushOntoCallStack("MaybeStarPattern", "Python.javacc", 517, 25);
            try {
                StarPattern();
            }
            finally {
                popCallStack();
            }
        }
        else if (first_set$Python_javacc$517$39.contains(nextTokenType())) {
            // Code for NonTerminal specified at Python.javacc:517:39
            pushOntoCallStack("MaybeStarPattern", "Python.javacc", 517, 39);
            try {
                Pattern();
            }
            finally {
                popCallStack();
            }
        }
        else  {
            pushOntoCallStack("MaybeStarPattern", "Python.javacc", 517, 25);
            throw new ParseException(this, MaybeStarPattern_FIRST_SET, parsingStack);
        }
    }

    static private final EnumSet<TokenType> ClosedPattern_FIRST_SET= ClosedPattern_FIRST_SET_init();
    static private EnumSet<TokenType> ClosedPattern_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:519:1
    final public void ClosedPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ClosedPattern";
        // Code for ExpansionChoice specified at Python.javacc:520:4
        ClosedPattern ClosedPattern87= null;
        if (buildTree) {
            ClosedPattern87= new ClosedPattern();
            openNodeScope(ClosedPattern87);
        }
        ParseException parseException4004= null;
        int callStackSize4005= parsingStack.size();
        try {
            if (scan$Python_javacc$520$4()) {
                // Code for NonTerminal specified at Python.javacc:520:4
                pushOntoCallStack("ClosedPattern", "Python.javacc", 520, 4);
                try {
                    ClassPattern();
                }
                finally {
                    popCallStack();
                }
            }
            else if (first_set$Python_javacc$522$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:522:4
                pushOntoCallStack("ClosedPattern", "Python.javacc", 522, 4);
                try {
                    LiteralPattern();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== NAME) {
                // Code for NonTerminal specified at Python.javacc:524:4
                pushOntoCallStack("ClosedPattern", "Python.javacc", 524, 4);
                try {
                    NameOrAttribute();
                }
                finally {
                    popCallStack();
                }
            }
            else if (scan$Python_javacc$526$4()) {
                // Code for NonTerminal specified at Python.javacc:526:6
                pushOntoCallStack("ClosedPattern", "Python.javacc", 526, 6);
                try {
                    GroupPattern();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LBRACKET||nextTokenType== LPAREN) {
                // Code for NonTerminal specified at Python.javacc:528:4
                pushOntoCallStack("ClosedPattern", "Python.javacc", 528, 4);
                try {
                    SequencePattern();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== LBRACE) {
                // Code for NonTerminal specified at Python.javacc:530:4
                pushOntoCallStack("ClosedPattern", "Python.javacc", 530, 4);
                try {
                    MappingPattern();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("ClosedPattern", "Python.javacc", 520, 4);
                throw new ParseException(this, ClosedPattern_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException4004= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4005);
            if (ClosedPattern87!=null) {
                if (parseException4004== null) {
                    closeNodeScope(ClosedPattern87, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:533:1
    final public void GroupPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "GroupPattern";
        GroupPattern GroupPattern88= null;
        if (buildTree) {
            GroupPattern88= new GroupPattern();
            openNodeScope(GroupPattern88);
        }
        ParseException parseException4056= null;
        int callStackSize4057= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:533:16
            consumeToken(LPAREN);
            // Code for NonTerminal specified at Python.javacc:533:20
            pushOntoCallStack("GroupPattern", "Python.javacc", 533, 20);
            try {
                Pattern();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:533:28
            consumeToken(RPAREN);
        }
        catch(ParseException e) {
            parseException4056= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4057);
            if (GroupPattern88!=null) {
                if (parseException4056== null) {
                    closeNodeScope(GroupPattern88, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:535:1
    final public void KeyValuePattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "KeyValuePattern";
        KeyValuePattern KeyValuePattern89= null;
        if (buildTree) {
            KeyValuePattern89= new KeyValuePattern();
            openNodeScope(KeyValuePattern89);
        }
        ParseException parseException4072= null;
        int callStackSize4073= parsingStack.size();
        try {
            if (first_set$Python_javacc$535$19.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:535:19
                pushOntoCallStack("KeyValuePattern", "Python.javacc", 535, 19);
                try {
                    LiteralPattern();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== NAME) {
                // Code for NonTerminal specified at Python.javacc:535:36
                pushOntoCallStack("KeyValuePattern", "Python.javacc", 535, 36);
                try {
                    Attribute();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("KeyValuePattern", "Python.javacc", 535, 19);
                throw new ParseException(this, first_set$Python_javacc$535$19$, parsingStack);
            }
            // Code for RegexpStringLiteral specified at Python.javacc:535:47
            consumeToken(COLON);
            // Code for NonTerminal specified at Python.javacc:535:51
            pushOntoCallStack("KeyValuePattern", "Python.javacc", 535, 51);
            try {
                Pattern();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException4072= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4073);
            if (KeyValuePattern89!=null) {
                if (parseException4072== null) {
                    closeNodeScope(KeyValuePattern89, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:537:1
    final public void ItemsPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ItemsPattern";
        ItemsPattern ItemsPattern90= null;
        if (buildTree) {
            ItemsPattern90= new ItemsPattern();
            openNodeScope(ItemsPattern90);
        }
        ParseException parseException4105= null;
        int callStackSize4106= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:537:16
            pushOntoCallStack("ItemsPattern", "Python.javacc", 537, 16);
            try {
                KeyValuePattern();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:537:32
            while (true) {
                if (!(scan$Python_javacc$537$33())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:537:33
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:537:43
                pushOntoCallStack("ItemsPattern", "Python.javacc", 537, 43);
                try {
                    KeyValuePattern();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException4105= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4106);
            if (ItemsPattern90!=null) {
                if (parseException4105== null) {
                    closeNodeScope(ItemsPattern90, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:539:1
    final public void MappingPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MappingPattern";
        MappingPattern MappingPattern91= null;
        if (buildTree) {
            MappingPattern91= new MappingPattern();
            openNodeScope(MappingPattern91);
        }
        ParseException parseException4129= null;
        int callStackSize4130= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:540:3
            consumeToken(LBRACE);
            // Code for ZeroOrOne specified at Python.javacc:541:6
            // Code for ExpansionChoice specified at Python.javacc:542:10
            if (first_set$Python_javacc$542$10.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:542:10
                pushOntoCallStack("MappingPattern", "Python.javacc", 542, 10);
                try {
                    ItemsPattern();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:542:23
                if (scan$Python_javacc$542$24()) {
                    // Code for RegexpStringLiteral specified at Python.javacc:542:24
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Python.javacc:542:34
                    pushOntoCallStack("MappingPattern", "Python.javacc", 542, 34);
                    try {
                        DoubleStarPattern();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:542:53
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:542:54
                    consumeToken(COMMA);
                }
            }
            else if (nextTokenType()== STAR_STAR) {
                // Code for NonTerminal specified at Python.javacc:544:10
                pushOntoCallStack("MappingPattern", "Python.javacc", 544, 10);
                try {
                    DoubleStarPattern();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:544:28
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:544:29
                    consumeToken(COMMA);
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:546:3
            consumeToken(RBRACE);
        }
        catch(ParseException e) {
            parseException4129= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4130);
            if (MappingPattern91!=null) {
                if (parseException4129== null) {
                    closeNodeScope(MappingPattern91, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:549:1
    final public void DoubleStarPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "DoubleStarPattern";
        DoubleStarPattern DoubleStarPattern92= null;
        if (buildTree) {
            DoubleStarPattern92= new DoubleStarPattern();
            openNodeScope(DoubleStarPattern92);
        }
        ParseException parseException4205= null;
        int callStackSize4206= parsingStack.size();
        try {
            // Code for RegexpStringLiteral specified at Python.javacc:549:21
            consumeToken(STAR_STAR);
            // Code for RegexpRef specified at Python.javacc:549:26
            consumeToken(NAME);
        }
        catch(ParseException e) {
            parseException4205= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4206);
            if (DoubleStarPattern92!=null) {
                if (parseException4205== null) {
                    closeNodeScope(DoubleStarPattern92, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> LiteralPattern_FIRST_SET= LiteralPattern_FIRST_SET_init();
    static private EnumSet<TokenType> LiteralPattern_FIRST_SET_init() {
        return tokenTypeSet(MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL);
    }

    // Python.javacc:551:1
    final public void LiteralPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "LiteralPattern";
        // Code for ExpansionChoice specified at Python.javacc:552:4
        LiteralPattern LiteralPattern93= null;
        if (buildTree) {
            LiteralPattern93= new LiteralPattern();
            openNodeScope(LiteralPattern93);
        }
        ParseException parseException4217= null;
        int callStackSize4218= parsingStack.size();
        try {
            if (nextTokenType()== NONE) {
                // Code for RegexpStringLiteral specified at Python.javacc:552:4
                consumeToken(NONE);
            }
            else if (nextTokenType()== TRUE) {
                // Code for RegexpStringLiteral specified at Python.javacc:554:4
                consumeToken(TRUE);
            }
            else if (nextTokenType()== FALSE) {
                // Code for RegexpStringLiteral specified at Python.javacc:556:4
                consumeToken(FALSE);
            }
            else if (first_set$Python_javacc$558$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:558:4
                pushOntoCallStack("LiteralPattern", "Python.javacc", 558, 4);
                try {
                    SignedNumber();
                }
                finally {
                    popCallStack();
                }
            }
            else if (nextTokenType()== STRING_LITERAL) {
                // Code for NonTerminal specified at Python.javacc:560:4
                pushOntoCallStack("LiteralPattern", "Python.javacc", 560, 4);
                try {
                    Strings();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("LiteralPattern", "Python.javacc", 552, 4);
                throw new ParseException(this, LiteralPattern_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException4217= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4218);
            if (LiteralPattern93!=null) {
                if (parseException4217== null) {
                    closeNodeScope(LiteralPattern93, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:563:1
    final public void MaybeSequencePattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "MaybeSequencePattern";
        MaybeSequencePattern MaybeSequencePattern94= null;
        if (buildTree) {
            MaybeSequencePattern94= new MaybeSequencePattern();
            openNodeScope(MaybeSequencePattern94);
        }
        ParseException parseException4261= null;
        int callStackSize4262= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:564:4
            pushOntoCallStack("MaybeSequencePattern", "Python.javacc", 564, 4);
            try {
                MaybeStarPattern();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:564:21
            while (true) {
                if (!(scan$Python_javacc$564$22())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:564:22
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:564:32
                pushOntoCallStack("MaybeSequencePattern", "Python.javacc", 564, 32);
                try {
                    MaybeStarPattern();
                }
                finally {
                    popCallStack();
                }
            }
            // Code for ZeroOrOne specified at Python.javacc:564:51
            if (nextTokenType()== COMMA) {
                // Code for RegexpStringLiteral specified at Python.javacc:564:52
                consumeToken(COMMA);
            }
        }
        catch(ParseException e) {
            parseException4261= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4262);
            if (MaybeSequencePattern94!=null) {
                if (parseException4261== null) {
                    closeNodeScope(MaybeSequencePattern94, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:567:1
    final public void OpenSequencePattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "OpenSequencePattern";
        OpenSequencePattern OpenSequencePattern95= null;
        if (buildTree) {
            OpenSequencePattern95= new OpenSequencePattern();
            openNodeScope(OpenSequencePattern95);
        }
        ParseException parseException4297= null;
        int callStackSize4298= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:568:4
            pushOntoCallStack("OpenSequencePattern", "Python.javacc", 568, 4);
            try {
                MaybeStarPattern();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:568:21
            consumeToken(COMMA);
            // Code for ZeroOrOne specified at Python.javacc:568:30
            if (first_set$Python_javacc$568$31.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:568:31
                pushOntoCallStack("OpenSequencePattern", "Python.javacc", 568, 31);
                try {
                    MaybeSequencePattern();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException4297= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4298);
            if (OpenSequencePattern95!=null) {
                if (parseException4297== null) {
                    closeNodeScope(OpenSequencePattern95, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> SequencePattern_FIRST_SET= tokenTypeSet(LBRACKET, LPAREN);
    // Python.javacc:571:1
    final public void SequencePattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SequencePattern";
        // Code for ExpansionChoice specified at Python.javacc:572:5
        SequencePattern SequencePattern96= null;
        if (buildTree) {
            SequencePattern96= new SequencePattern();
            openNodeScope(SequencePattern96);
        }
        ParseException parseException4321= null;
        int callStackSize4322= parsingStack.size();
        try {
            if (nextTokenType()== LBRACKET) {
                // Code for RegexpStringLiteral specified at Python.javacc:572:5
                consumeToken(LBRACKET);
                // Code for ZeroOrOne specified at Python.javacc:572:9
                if (first_set$Python_javacc$572$10.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:572:10
                    pushOntoCallStack("SequencePattern", "Python.javacc", 572, 10);
                    try {
                        MaybeSequencePattern();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpStringLiteral specified at Python.javacc:572:32
                consumeToken(RBRACKET);
            }
            else if (nextTokenType()== LPAREN) {
                // Code for RegexpStringLiteral specified at Python.javacc:574:5
                consumeToken(LPAREN);
                // Code for ZeroOrOne specified at Python.javacc:574:9
                if (scan$Python_javacc$574$10()) {
                    // Code for NonTerminal specified at Python.javacc:574:10
                    pushOntoCallStack("SequencePattern", "Python.javacc", 574, 10);
                    try {
                        OpenSequencePattern();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for RegexpStringLiteral specified at Python.javacc:574:31
                consumeToken(RPAREN);
            }
            else  {
                pushOntoCallStack("SequencePattern", "Python.javacc", 572, 5);
                throw new ParseException(this, SequencePattern_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException4321= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4322);
            if (SequencePattern96!=null) {
                if (parseException4321== null) {
                    closeNodeScope(SequencePattern96, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:577:1
    final public void ClassPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "ClassPattern";
        ClassPattern ClassPattern97= null;
        if (buildTree) {
            ClassPattern97= new ClassPattern();
            openNodeScope(ClassPattern97);
        }
        ParseException parseException4373= null;
        int callStackSize4374= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:578:4
            pushOntoCallStack("ClassPattern", "Python.javacc", 578, 4);
            try {
                NameOrAttribute();
            }
            finally {
                popCallStack();
            }
            // Code for RegexpStringLiteral specified at Python.javacc:579:4
            consumeToken(LPAREN);
            // Code for ZeroOrOne specified at Python.javacc:581:7
            // Code for ExpansionChoice specified at Python.javacc:582:11
            if (scan$Python_javacc$582$11()) {
                // Code for NonTerminal specified at Python.javacc:583:11
                pushOntoCallStack("ClassPattern", "Python.javacc", 583, 11);
                try {
                    KeywordPatterns();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:583:27
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:583:28
                    consumeToken(COMMA);
                }
            }
            else if (first_set$Python_javacc$585$11.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:585:11
                pushOntoCallStack("ClassPattern", "Python.javacc", 585, 11);
                try {
                    PositionalPatterns();
                }
                finally {
                    popCallStack();
                }
                // Code for ZeroOrOne specified at Python.javacc:585:30
                if (scan$Python_javacc$585$31()) {
                    // Code for RegexpStringLiteral specified at Python.javacc:585:31
                    consumeToken(COMMA);
                    // Code for NonTerminal specified at Python.javacc:585:41
                    pushOntoCallStack("ClassPattern", "Python.javacc", 585, 41);
                    try {
                        KeywordPatterns();
                    }
                    finally {
                        popCallStack();
                    }
                }
                // Code for ZeroOrOne specified at Python.javacc:585:58
                if (nextTokenType()== COMMA) {
                    // Code for RegexpStringLiteral specified at Python.javacc:585:59
                    consumeToken(COMMA);
                }
            }
            // Code for RegexpStringLiteral specified at Python.javacc:587:4
            consumeToken(RPAREN);
        }
        catch(ParseException e) {
            parseException4373= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4374);
            if (ClassPattern97!=null) {
                if (parseException4373== null) {
                    closeNodeScope(ClassPattern97, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:590:1
    final public void PositionalPatterns() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "PositionalPatterns";
        PositionalPatterns PositionalPatterns98= null;
        if (buildTree) {
            PositionalPatterns98= new PositionalPatterns();
            openNodeScope(PositionalPatterns98);
        }
        ParseException parseException4453= null;
        int callStackSize4454= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:591:4
            pushOntoCallStack("PositionalPatterns", "Python.javacc", 591, 4);
            try {
                Pattern();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:592:4
            while (true) {
                if (!(scan$Python_javacc$595$8())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:596:11
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:596:15
                pushOntoCallStack("PositionalPatterns", "Python.javacc", 596, 15);
                try {
                    Pattern();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException4453= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4454);
            if (PositionalPatterns98!=null) {
                if (parseException4453== null) {
                    closeNodeScope(PositionalPatterns98, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:600:1
    final public void KeywordPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "KeywordPattern";
        KeywordPattern KeywordPattern99= null;
        if (buildTree) {
            KeywordPattern99= new KeywordPattern();
            openNodeScope(KeywordPattern99);
        }
        ParseException parseException4477= null;
        int callStackSize4478= parsingStack.size();
        try {
            // Code for RegexpRef specified at Python.javacc:600:18
            consumeToken(NAME);
            // Code for RegexpStringLiteral specified at Python.javacc:600:25
            consumeToken(ASSIGN);
            // Code for NonTerminal specified at Python.javacc:600:29
            pushOntoCallStack("KeywordPattern", "Python.javacc", 600, 29);
            try {
                Pattern();
            }
            finally {
                popCallStack();
            }
        }
        catch(ParseException e) {
            parseException4477= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4478);
            if (KeywordPattern99!=null) {
                if (parseException4477== null) {
                    closeNodeScope(KeywordPattern99, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:602:1
    final public void KeywordPatterns() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "KeywordPatterns";
        KeywordPatterns KeywordPatterns100= null;
        if (buildTree) {
            KeywordPatterns100= new KeywordPatterns();
            openNodeScope(KeywordPatterns100);
        }
        ParseException parseException4493= null;
        int callStackSize4494= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:602:19
            pushOntoCallStack("KeywordPatterns", "Python.javacc", 602, 19);
            try {
                KeywordPattern();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:602:34
            while (true) {
                if (!(scan$Python_javacc$602$35())) break;
                // Code for RegexpStringLiteral specified at Python.javacc:602:35
                consumeToken(COMMA);
                // Code for NonTerminal specified at Python.javacc:602:45
                pushOntoCallStack("KeywordPatterns", "Python.javacc", 602, 45);
                try {
                    KeywordPattern();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException4493= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4494);
            if (KeywordPatterns100!=null) {
                if (parseException4493== null) {
                    closeNodeScope(KeywordPatterns100, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:604:1
    final public void OrPattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "OrPattern";
        OrPattern OrPattern101= null;
        if (buildTree) {
            OrPattern101= new OrPattern();
            openNodeScope(OrPattern101);
        }
        ParseException parseException4517= null;
        int callStackSize4518= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:604:13
            pushOntoCallStack("OrPattern", "Python.javacc", 604, 13);
            try {
                ClosedPattern();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrMore specified at Python.javacc:604:27
            while (true) {
                if (!(nextTokenType()== BIT_OR)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:604:28
                consumeToken(BIT_OR);
                // Code for NonTerminal specified at Python.javacc:604:32
                pushOntoCallStack("OrPattern", "Python.javacc", 604, 32);
                try {
                    ClosedPattern();
                }
                finally {
                    popCallStack();
                }
            }
        }
        catch(ParseException e) {
            parseException4517= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4518);
            if (OrPattern101!=null) {
                if (parseException4517== null) {
                    closeNodeScope(OrPattern101, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:606:1
    final public void Pattern() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Pattern";
        Pattern Pattern102= null;
        if (buildTree) {
            Pattern102= new Pattern();
            openNodeScope(Pattern102);
        }
        ParseException parseException4541= null;
        int callStackSize4542= parsingStack.size();
        try {
            // Code for NonTerminal specified at Python.javacc:606:11
            pushOntoCallStack("Pattern", "Python.javacc", 606, 11);
            try {
                OrPattern();
            }
            finally {
                popCallStack();
            }
            // Code for ZeroOrOne specified at Python.javacc:606:21
            if (nextTokenType()== AS) {
                // Code for RegexpStringLiteral specified at Python.javacc:606:22
                consumeToken(AS);
                // Code for RegexpRef specified at Python.javacc:606:27
                consumeToken(NAME);
            }
        }
        catch(ParseException e) {
            parseException4541= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4542);
            if (Pattern102!=null) {
                if (parseException4541== null) {
                    closeNodeScope(Pattern102, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> SubjectExpression_FIRST_SET= SubjectExpression_FIRST_SET_init();
    static private EnumSet<TokenType> SubjectExpression_FIRST_SET_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    // Python.javacc:608:1
    final public void SubjectExpression() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "SubjectExpression";
        // Code for ExpansionChoice specified at Python.javacc:609:4
        SubjectExpression SubjectExpression103= null;
        if (buildTree) {
            SubjectExpression103= new SubjectExpression();
            openNodeScope(SubjectExpression103);
        }
        ParseException parseException4565= null;
        int callStackSize4566= parsingStack.size();
        try {
            if (scan$Python_javacc$609$4()) {
                // Code for NonTerminal specified at Python.javacc:609:4
                pushOntoCallStack("SubjectExpression", "Python.javacc", 609, 4);
                try {
                    StarNamedExpression();
                }
                finally {
                    popCallStack();
                }
                // Code for RegexpStringLiteral specified at Python.javacc:609:24
                consumeToken(COMMA);
                // Code for ZeroOrOne specified at Python.javacc:609:33
                if (first_set$Python_javacc$609$34.contains(nextTokenType())) {
                    // Code for NonTerminal specified at Python.javacc:609:34
                    pushOntoCallStack("SubjectExpression", "Python.javacc", 609, 34);
                    try {
                        StarNamedExpressions();
                    }
                    finally {
                        popCallStack();
                    }
                }
            }
            else if (first_set$Python_javacc$611$4.contains(nextTokenType())) {
                // Code for NonTerminal specified at Python.javacc:611:4
                pushOntoCallStack("SubjectExpression", "Python.javacc", 611, 4);
                try {
                    NamedExpression();
                }
                finally {
                    popCallStack();
                }
            }
            else  {
                pushOntoCallStack("SubjectExpression", "Python.javacc", 609, 4);
                throw new ParseException(this, SubjectExpression_FIRST_SET, parsingStack);
            }
        }
        catch(ParseException e) {
            parseException4565= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4566);
            if (SubjectExpression103!=null) {
                if (parseException4565== null) {
                    closeNodeScope(SubjectExpression103, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:614:1
    final public void Attribute() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "Attribute";
        Attribute Attribute104= null;
        if (buildTree) {
            Attribute104= new Attribute();
            openNodeScope(Attribute104);
        }
        ParseException parseException4601= null;
        int callStackSize4602= parsingStack.size();
        try {
            // Code for RegexpRef specified at Python.javacc:614:13
            consumeToken(NAME);
            // Code for OneOrMore specified at Python.javacc:614:20
            while (true) {
                // Code for RegexpStringLiteral specified at Python.javacc:614:21
                consumeToken(DOT);
                // Code for RegexpRef specified at Python.javacc:614:25
                consumeToken(NAME);
                if (!(nextTokenType()== DOT)) break;
            }
        }
        catch(ParseException e) {
            parseException4601= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4602);
            if (Attribute104!=null) {
                if (parseException4601== null) {
                    closeNodeScope(Attribute104, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    // Python.javacc:616:1
    final public void NameOrAttribute() {
        if (cancelled) throw new CancellationException();
        String prevProduction= currentlyParsedProduction;
        this.currentlyParsedProduction= "NameOrAttribute";
        Attribute NameOrAttribute105= null;
        if (buildTree) {
            NameOrAttribute105= new Attribute();
            openNodeScope(NameOrAttribute105);
        }
        ParseException parseException4625= null;
        int callStackSize4626= parsingStack.size();
        try {
            // Code for RegexpRef specified at Python.javacc:616:34
            consumeToken(NAME);
            // Code for ZeroOrMore specified at Python.javacc:616:41
            while (true) {
                if (!(nextTokenType()== DOT)) break;
                // Code for RegexpStringLiteral specified at Python.javacc:616:42
                consumeToken(DOT);
                // Code for RegexpRef specified at Python.javacc:616:46
                consumeToken(NAME);
            }
        }
        catch(ParseException e) {
            parseException4625= e;
            throw e;
        }
        finally {
            restoreCallStack(callStackSize4626);
            if (NameOrAttribute105!=null) {
                if (parseException4625== null) {
                    closeNodeScope(NameOrAttribute105, nodeArity()> 1);
                }
                else  {
                    clearNodeScope();
                }
            }
            this.currentlyParsedProduction= prevProduction;
        }
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$23$5= first_set$Python_javacc$23$5_init();
    static private EnumSet<TokenType> first_set$Python_javacc$23$5_init() {
        return tokenTypeSet(AT, LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, _ASSERT, ASYNC, AWAIT, BREAK, CLASS, CONTINUE, DEF, DEL, FOR, FROM, GLOBAL, IF, FALSE, IMPORT, LAMBDA, MATCH, NONLOCAL, NONE, NOT, PASS, PEG_PARSER, RAISE, RETURN, TRUE, TRY, WHILE, WITH, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$34$3= tokenTypeSet(DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX);
    static private final EnumSet<TokenType> first_set$Python_javacc$35$5= tokenTypeSet(MINUS, PLUS);
    static private final EnumSet<TokenType> first_set$Python_javacc$43$5= tokenTypeSet(DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX);
    static private final EnumSet<TokenType> first_set$Python_javacc$55$6= tokenTypeSet(LPAREN);
    static private final EnumSet<TokenType> first_set$Python_javacc$57$6= tokenTypeSet(LBRACKET);
    static private final EnumSet<TokenType> first_set$Python_javacc$59$6= tokenTypeSet(LBRACE);
    static private final EnumSet<TokenType> first_set$Python_javacc$65$6= first_set$Python_javacc$65$6_init();
    static private EnumSet<TokenType> first_set$Python_javacc$65$6_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$65$28= first_set$Python_javacc$65$28_init();
    static private EnumSet<TokenType> first_set$Python_javacc$65$28_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$65$46= first_set$Python_javacc$65$46_init();
    static private EnumSet<TokenType> first_set$Python_javacc$65$46_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$67$5= first_set$Python_javacc$67$5_init();
    static private EnumSet<TokenType> first_set$Python_javacc$67$5_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$75$4= first_set$Python_javacc$75$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$75$4_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, _ASSERT, AWAIT, BREAK, CONTINUE, DEL, FROM, GLOBAL, FALSE, IMPORT, LAMBDA, NONLOCAL, NONE, NOT, PASS, PEG_PARSER, RAISE, RETURN, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$77$4= first_set$Python_javacc$77$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$77$4_init() {
        return tokenTypeSet(AT, ASYNC, CLASS, DEF, FOR, IF, TRY, WHILE, WITH);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$85$4= first_set$Python_javacc$85$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$85$4_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$126$29= first_set$Python_javacc$126$29_init();
    static private EnumSet<TokenType> first_set$Python_javacc$126$29_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$134$28= first_set$Python_javacc$134$28_init();
    static private EnumSet<TokenType> first_set$Python_javacc$134$28_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$137$5= first_set$Python_javacc$137$5_init();
    static private EnumSet<TokenType> first_set$Python_javacc$137$5_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, _ASSERT, AWAIT, BREAK, CONTINUE, DEL, FROM, GLOBAL, FALSE, IMPORT, LAMBDA, NONLOCAL, NONE, NOT, PASS, PEG_PARSER, RAISE, RETURN, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$139$23= first_set$Python_javacc$139$23_init();
    static private EnumSet<TokenType> first_set$Python_javacc$139$23_init() {
        return tokenTypeSet(AT, LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, _ASSERT, ASYNC, AWAIT, BREAK, CLASS, CONTINUE, DEF, DEL, FOR, FROM, GLOBAL, IF, FALSE, IMPORT, LAMBDA, MATCH, NONLOCAL, NONE, NOT, PASS, PEG_PARSER, RAISE, RETURN, TRUE, TRY, WHILE, WITH, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$144$26= first_set$Python_javacc$144$26_init();
    static private EnumSet<TokenType> first_set$Python_javacc$144$26_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$159$9= first_set$Python_javacc$159$9_init();
    static private EnumSet<TokenType> first_set$Python_javacc$159$9_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$161$9= first_set$Python_javacc$161$9_init();
    static private EnumSet<TokenType> first_set$Python_javacc$161$9_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$179$8= tokenTypeSet(EXCEPT, FINALLY);
    static private final EnumSet<TokenType> first_set$Python_javacc$197$28= tokenTypeSet(DOT, ELLIPSIS);
    static private final EnumSet<TokenType> first_set$Python_javacc$210$6= first_set$Python_javacc$210$6_init();
    static private EnumSet<TokenType> first_set$Python_javacc$210$6_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$216$5= first_set$Python_javacc$216$5_init();
    static private EnumSet<TokenType> first_set$Python_javacc$216$5_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$229$40= tokenTypeSet(LSHIFT, RSHIFT);
    static private final EnumSet<TokenType> first_set$Python_javacc$231$49= tokenTypeSet(MINUS, PLUS);
    static private final EnumSet<TokenType> first_set$Python_javacc$233$45= tokenTypeSet(AT, STAR, SLASH, PERCENT, _TOKEN_100);
    static private final EnumSet<TokenType> first_set$Python_javacc$233$46= tokenTypeSet(AT, STAR, SLASH, PERCENT, _TOKEN_100);
    static private final EnumSet<TokenType> first_set$Python_javacc$235$19= first_set$Python_javacc$235$19_init();
    static private EnumSet<TokenType> first_set$Python_javacc$235$19_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, ELLIPSIS, AWAIT, FALSE, NONE, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$235$28= tokenTypeSet(TILDE, MINUS, PLUS);
    static private final EnumSet<TokenType> first_set$Python_javacc$241$10= first_set$Python_javacc$241$10_init();
    static private EnumSet<TokenType> first_set$Python_javacc$241$10_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$241$35= first_set$Python_javacc$241$35_init();
    static private EnumSet<TokenType> first_set$Python_javacc$241$35_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$244$14= first_set$Python_javacc$244$14_init();
    static private EnumSet<TokenType> first_set$Python_javacc$244$14_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$244$32= first_set$Python_javacc$244$32_init();
    static private EnumSet<TokenType> first_set$Python_javacc$244$32_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$264$14= first_set$Python_javacc$264$14_init();
    static private EnumSet<TokenType> first_set$Python_javacc$264$14_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$269$34= first_set$Python_javacc$269$34_init();
    static private EnumSet<TokenType> first_set$Python_javacc$269$34_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$278$7= first_set$Python_javacc$278$7_init();
    static private EnumSet<TokenType> first_set$Python_javacc$278$7_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, STAR_STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$305$7= tokenTypeSet(ASSIGN, COLONEQUALS);
    static private final EnumSet<TokenType> first_set$Python_javacc$313$4= first_set$Python_javacc$313$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$313$4_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, STAR_STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$326$5= first_set$Python_javacc$326$5_init();
    static private EnumSet<TokenType> first_set$Python_javacc$326$5_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$335$6= first_set$Python_javacc$335$6_init();
    static private EnumSet<TokenType> first_set$Python_javacc$335$6_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR_STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$371$14= first_set$Python_javacc$371$14_init();
    static private EnumSet<TokenType> first_set$Python_javacc$371$14_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$379$25= first_set$Python_javacc$379$25_init();
    static private EnumSet<TokenType> first_set$Python_javacc$379$25_init() {
        return tokenTypeSet(EQ, LE, GE, NE, GT, LT, IN, IS, NOT);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$397$13= first_set$Python_javacc$397$13_init();
    static private EnumSet<TokenType> first_set$Python_javacc$397$13_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$430$11= tokenTypeSet(SLASH, NAME);
    static private final EnumSet<TokenType> first_set$Python_javacc$456$4= first_set$Python_javacc$456$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$456$4_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, ELLIPSIS, FALSE, NONE, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$462$27= first_set$Python_javacc$462$27_init();
    static private EnumSet<TokenType> first_set$Python_javacc$462$27_init() {
        return tokenTypeSet(COLON, MINUSASSIGN, PLUSASSIGN, STARASSIGN, ATASSIGN, SLASHASSIGN, REMASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, LSHIFTASSIGN, RSHIFTASSIGN, STARSTARASSIGN, SLASHSLASHASSIGN);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$464$3= first_set$Python_javacc$464$3_init();
    static private EnumSet<TokenType> first_set$Python_javacc$464$3_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, ELLIPSIS, FALSE, NONE, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$466$22= first_set$Python_javacc$466$22_init();
    static private EnumSet<TokenType> first_set$Python_javacc$466$22_init() {
        return tokenTypeSet(MINUSASSIGN, PLUSASSIGN, STARASSIGN, ATASSIGN, SLASHASSIGN, REMASSIGN, ANDASSIGN, ORASSIGN, XORASSIGN, LSHIFTASSIGN, RSHIFTASSIGN, STARSTARASSIGN, SLASHSLASHASSIGN);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$466$38= first_set$Python_javacc$466$38_init();
    static private EnumSet<TokenType> first_set$Python_javacc$466$38_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$466$56= first_set$Python_javacc$466$56_init();
    static private EnumSet<TokenType> first_set$Python_javacc$466$56_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$468$3= first_set$Python_javacc$468$3_init();
    static private EnumSet<TokenType> first_set$Python_javacc$468$3_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, ELLIPSIS, FALSE, NONE, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$468$28= first_set$Python_javacc$468$28_init();
    static private EnumSet<TokenType> first_set$Python_javacc$468$28_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, YIELD, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$468$46= first_set$Python_javacc$468$46_init();
    static private EnumSet<TokenType> first_set$Python_javacc$468$46_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$510$4= first_set$Python_javacc$510$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$510$4_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$517$39= first_set$Python_javacc$517$39_init();
    static private EnumSet<TokenType> first_set$Python_javacc$517$39_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$522$4= first_set$Python_javacc$522$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$522$4_init() {
        return tokenTypeSet(MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$535$19$= first_set$Python_javacc$535$19$_init();
    static private EnumSet<TokenType> first_set$Python_javacc$535$19$_init() {
        return tokenTypeSet(MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$535$19= first_set$Python_javacc$535$19_init();
    static private EnumSet<TokenType> first_set$Python_javacc$535$19_init() {
        return tokenTypeSet(MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$542$10= first_set$Python_javacc$542$10_init();
    static private EnumSet<TokenType> first_set$Python_javacc$542$10_init() {
        return tokenTypeSet(MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$558$4= tokenTypeSet(MINUS, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX);
    static private final EnumSet<TokenType> first_set$Python_javacc$568$31= first_set$Python_javacc$568$31_init();
    static private EnumSet<TokenType> first_set$Python_javacc$568$31_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$572$10= first_set$Python_javacc$572$10_init();
    static private EnumSet<TokenType> first_set$Python_javacc$572$10_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$585$11= first_set$Python_javacc$585$11_init();
    static private EnumSet<TokenType> first_set$Python_javacc$585$11_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, MINUS, FALSE, NONE, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$609$34= first_set$Python_javacc$609$34_init();
    static private EnumSet<TokenType> first_set$Python_javacc$609$34_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, STAR, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    static private final EnumSet<TokenType> first_set$Python_javacc$611$4= first_set$Python_javacc$611$4_init();
    static private EnumSet<TokenType> first_set$Python_javacc$611$4_init() {
        return tokenTypeSet(LBRACE, LBRACKET, LPAREN, TILDE, ELLIPSIS, MINUS, PLUS, AWAIT, FALSE, LAMBDA, NONE, NOT, PEG_PARSER, TRUE, DECNUMBER, HEXNUMBER, OCTNUMBER, BINNUMBER, FLOAT, COMPLEX, STRING_LITERAL, NAME);
    }

    private final boolean scanToken(TokenType expectedType, TokenType...additionalTypes) {
        Token peekedToken= nextToken(currentLookaheadToken);
        TokenType type= peekedToken.getType();
        if (type!=expectedType) {
            boolean matched= false;
            for (TokenType tt : additionalTypes) {
                if (type== tt) {
                    matched= true;
                    break;
                }
            }
            if (!matched) return false;
        }
        --remainingLookahead;
        currentLookaheadToken= peekedToken;
        return true;
    }

    private final boolean scanToken(EnumSet<TokenType> types) {
        Token peekedToken= nextToken(currentLookaheadToken);
        TokenType type= peekedToken.getType();
        if (!types.contains(type)) return false;
        --remainingLookahead;
        currentLookaheadToken= peekedToken;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:35:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$35$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:35:5
            if (!scanToken(MINUS, PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:35:14
            if (!scanToken(COMPLEX)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:45:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$45$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:45:5
            // NonTerminal Strings at Python.javacc:45:5
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 45, 5);
            currentLookaheadProduction= "Strings";
            try {
                if (!check$Strings(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:55:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$55$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:55:6
            Token token4659= currentLookaheadToken;
            int remainingLookahead4659= remainingLookahead;
            boolean hitFailure4659= hitFailure, passedPredicate4659= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$55$6(false)) {
                    currentLookaheadToken= token4659;
                    remainingLookahead= remainingLookahead4659;
                    hitFailure= hitFailure4659;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$55$14(false)) {
                        currentLookaheadToken= token4659;
                        remainingLookahead= remainingLookahead4659;
                        hitFailure= hitFailure4659;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!check$Python_javacc$55$23(false)) {
                            currentLookaheadToken= token4659;
                            remainingLookahead= remainingLookahead4659;
                            hitFailure= hitFailure4659;
                            return false;
                        }
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4659;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:55:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$55$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$240$9(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:55:6
            // NonTerminal Tuple at Python.javacc:55:6
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 55, 6);
            currentLookaheadProduction= "Tuple";
            try {
                if (!check$Tuple(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:55:14
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$55$14(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:55:14
            // NonTerminal GenExp at Python.javacc:55:14
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 55, 14);
            currentLookaheadProduction= "GenExp";
            try {
                if (!check$GenExp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:55:23
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$55$23(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:55:23
            // NonTerminal Group at Python.javacc:55:23
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 55, 23);
            currentLookaheadProduction= "Group";
            try {
                if (!check$Group(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:57:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$57$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:57:6
            Token token4671= currentLookaheadToken;
            int remainingLookahead4671= remainingLookahead;
            boolean hitFailure4671= hitFailure, passedPredicate4671= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$57$6(false)) {
                    currentLookaheadToken= token4671;
                    remainingLookahead= remainingLookahead4671;
                    hitFailure= hitFailure4671;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$57$17(false)) {
                        currentLookaheadToken= token4671;
                        remainingLookahead= remainingLookahead4671;
                        hitFailure= hitFailure4671;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4671;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:57:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$57$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:57:6
            // NonTerminal ListComp at Python.javacc:57:6
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 57, 6);
            currentLookaheadProduction= "ListComp";
            try {
                if (!check$ListComp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:57:17
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$57$17(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:57:17
            // NonTerminal List at Python.javacc:57:17
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 57, 17);
            currentLookaheadProduction= "List";
            try {
                if (!check$List(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:59:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$59$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:59:6
            Token token4681= currentLookaheadToken;
            int remainingLookahead4681= remainingLookahead;
            boolean hitFailure4681= hitFailure, passedPredicate4681= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$59$6(false)) {
                    currentLookaheadToken= token4681;
                    remainingLookahead= remainingLookahead4681;
                    hitFailure= hitFailure4681;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$59$16(false)) {
                        currentLookaheadToken= token4681;
                        remainingLookahead= remainingLookahead4681;
                        hitFailure= hitFailure4681;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!check$Python_javacc$59$27(false)) {
                            currentLookaheadToken= token4681;
                            remainingLookahead= remainingLookahead4681;
                            hitFailure= hitFailure4681;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!check$Python_javacc$59$34(false)) {
                                currentLookaheadToken= token4681;
                                remainingLookahead= remainingLookahead4681;
                                hitFailure= hitFailure4681;
                                return false;
                            }
                        }
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4681;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:59:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$59$6(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:59:6
            // NonTerminal SetComp at Python.javacc:59:6
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 59, 6);
            currentLookaheadProduction= "SetComp";
            try {
                if (!check$SetComp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:59:16
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$59$16(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:59:16
            // NonTerminal DictComp at Python.javacc:59:16
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 59, 16);
            currentLookaheadProduction= "DictComp";
            try {
                if (!check$DictComp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:59:27
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$59$27(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$332$8(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:59:27
            // NonTerminal Dict at Python.javacc:59:27
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 59, 27);
            currentLookaheadProduction= "Dict";
            try {
                if (!check$Dict(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:59:34
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$59$34(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:59:34
            // NonTerminal Set at Python.javacc:59:34
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 59, 34);
            currentLookaheadProduction= "Set";
            try {
                if (!check$Set(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:65:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$65$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:65:5
            Token token4694= currentLookaheadToken;
            boolean passedPredicate4694= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$65$6(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4694;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4694;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:65:18
            if (!scanToken(COLON)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:65:27
            Token token4697= currentLookaheadToken;
            boolean passedPredicate4697= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$65$28(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4697;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4697;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:65:40
            Token token4699= currentLookaheadToken;
            boolean passedPredicate4699= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$65$41(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4699;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4699;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:65:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$65$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:65:6
            // NonTerminal Expression at Python.javacc:65:6
            pushOntoLookaheadStack("Slice", "Python.javacc", 65, 6);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:65:28
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$65$28(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:65:28
            // NonTerminal Expression at Python.javacc:65:28
            pushOntoLookaheadStack("Slice", "Python.javacc", 65, 28);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:65:41
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$65$41(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:65:41
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:65:45
            Token token4707= currentLookaheadToken;
            boolean passedPredicate4707= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$65$46(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4707;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4707;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:65:46
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$65$46(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:65:46
            // NonTerminal Expression at Python.javacc:65:46
            pushOntoLookaheadStack("Slice", "Python.javacc", 65, 46);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:67:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$67$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:67:5
            Token token4712= currentLookaheadToken;
            boolean passedPredicate4712= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$67$6(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4712;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4712;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:67:22
            // NonTerminal Expression at Python.javacc:67:22
            pushOntoLookaheadStack("Slice", "Python.javacc", 67, 22);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:67:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$67$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:67:9
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:67:16
            if (!scanToken(COLONEQUALS)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:70:21
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$70$21(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:70:21
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:70:31
            // NonTerminal Slice at Python.javacc:70:31
            pushOntoLookaheadStack("Slices", "Python.javacc", 70, 31);
            currentLookaheadProduction= "Slice";
            try {
                if (!check$Slice(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:73:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$73$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$485$8(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:73:4
            // NonTerminal MatchStatement at Python.javacc:73:4
            pushOntoLookaheadStack("Statement", "Python.javacc", 73, 4);
            currentLookaheadProduction= "MatchStatement";
            try {
                if (!check$MatchStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:75:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$75$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:75:4
            // NonTerminal SimpleStatement at Python.javacc:75:4
            pushOntoLookaheadStack("Statement", "Python.javacc", 75, 4);
            currentLookaheadProduction= "SimpleStatement";
            try {
                if (!check$SimpleStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:77:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$77$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:77:4
            // NonTerminal CompoundStatement at Python.javacc:77:4
            pushOntoLookaheadStack("Statement", "Python.javacc", 77, 4);
            currentLookaheadProduction= "CompoundStatement";
            try {
                if (!check$CompoundStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:80:40
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$80$40(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:80:40
            if (!scanToken(SEMICOLON)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:80:50
            // NonTerminal SmallStatement at Python.javacc:80:50
            pushOntoLookaheadStack("SimpleStatement", "Python.javacc", 80, 50);
            currentLookaheadProduction= "SmallStatement";
            try {
                if (!check$SmallStatement(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:83:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$83$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$462$7(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:83:4
            // NonTerminal Assignment at Python.javacc:83:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 83, 4);
            currentLookaheadProduction= "Assignment";
            try {
                if (!check$Assignment(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:85:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$85$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:85:4
            // NonTerminal StarExpressions at Python.javacc:85:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 85, 4);
            currentLookaheadProduction= "StarExpressions";
            try {
                if (!check$StarExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:87:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$87$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:87:4
            // NonTerminal ReturnStatement at Python.javacc:87:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 87, 4);
            currentLookaheadProduction= "ReturnStatement";
            try {
                if (!check$ReturnStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:89:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$89$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:89:4
            // NonTerminal ImportStatement at Python.javacc:89:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 89, 4);
            currentLookaheadProduction= "ImportStatement";
            try {
                if (!check$ImportStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:91:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$91$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:91:4
            // NonTerminal GlobalStatement at Python.javacc:91:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 91, 4);
            currentLookaheadProduction= "GlobalStatement";
            try {
                if (!check$GlobalStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:93:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$93$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:93:4
            // NonTerminal NonlocalStatement at Python.javacc:93:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 93, 4);
            currentLookaheadProduction= "NonlocalStatement";
            try {
                if (!check$NonlocalStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:101:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$101$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:101:4
            // NonTerminal DelStatement at Python.javacc:101:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 101, 4);
            currentLookaheadProduction= "DelStatement";
            try {
                if (!check$DelStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:103:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$103$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:103:4
            // NonTerminal AssertStatement at Python.javacc:103:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 103, 4);
            currentLookaheadProduction= "AssertStatement";
            try {
                if (!check$AssertStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:105:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$105$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:105:4
            // NonTerminal RaiseStatement at Python.javacc:105:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 105, 4);
            currentLookaheadProduction= "RaiseStatement";
            try {
                if (!check$RaiseStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:107:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$107$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:107:4
            // NonTerminal YieldStatement at Python.javacc:107:4
            pushOntoLookaheadStack("SmallStatement", "Python.javacc", 107, 4);
            currentLookaheadProduction= "YieldStatement";
            try {
                if (!check$YieldStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:111:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$111$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:111:5
            // NonTerminal FunctionDefinition at Python.javacc:111:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 111, 5);
            currentLookaheadProduction= "FunctionDefinition";
            try {
                if (!check$FunctionDefinition(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:113:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$113$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:113:5
            // NonTerminal IfStatement at Python.javacc:113:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 113, 5);
            currentLookaheadProduction= "IfStatement";
            try {
                if (!check$IfStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:115:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$115$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:115:5
            // NonTerminal ClassDefinition at Python.javacc:115:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 115, 5);
            currentLookaheadProduction= "ClassDefinition";
            try {
                if (!check$ClassDefinition(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:117:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$117$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:117:5
            // NonTerminal WithStatement at Python.javacc:117:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 117, 5);
            currentLookaheadProduction= "WithStatement";
            try {
                if (!check$WithStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:119:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$119$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:119:5
            // NonTerminal WhileStatement at Python.javacc:119:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 119, 5);
            currentLookaheadProduction= "WhileStatement";
            try {
                if (!check$WhileStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:121:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$121$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:121:5
            // NonTerminal ForStatement at Python.javacc:121:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 121, 5);
            currentLookaheadProduction= "ForStatement";
            try {
                if (!check$ForStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:123:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$123$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:123:5
            // NonTerminal TryStatement at Python.javacc:123:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 123, 5);
            currentLookaheadProduction= "TryStatement";
            try {
                if (!check$TryStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:126:29
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$126$29(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:126:29
            // NonTerminal StarExpressions at Python.javacc:126:29
            pushOntoLookaheadStack("ReturnStatement", "Python.javacc", 126, 29);
            currentLookaheadProduction= "StarExpressions";
            try {
                if (!check$StarExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:128:36
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$128$36(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:128:36
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:128:40
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:130:40
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$130$40(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:130:40
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:130:44
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:132:40
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$132$40(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:132:40
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:132:44
            // NonTerminal Expression at Python.javacc:132:44
            pushOntoLookaheadStack("AssertStatement", "Python.javacc", 132, 44);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:134:28
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$134$28(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:134:28
            // NonTerminal Expression at Python.javacc:134:28
            pushOntoLookaheadStack("RaiseStatement", "Python.javacc", 134, 28);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:134:39
            Token token4777= currentLookaheadToken;
            boolean passedPredicate4777= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$134$40(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4777;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4777;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:134:40
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$134$40(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:134:40
            if (!scanToken(FROM)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:134:47
            // NonTerminal Expression at Python.javacc:134:47
            pushOntoLookaheadStack("RaiseStatement", "Python.javacc", 134, 47);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:137:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$137$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:137:5
            // NonTerminal SimpleStatement at Python.javacc:137:5
            pushOntoLookaheadStack("Block", "Python.javacc", 137, 5);
            currentLookaheadProduction= "SimpleStatement";
            try {
                if (!check$SimpleStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:139:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$139$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:139:5
            if (!scanToken(NEWLINE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:139:14
            if (!scanToken(INDENT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:139:22
            if (!check$Python_javacc$139$23(false)) {
                return false;
            }
            boolean passedPredicate4787= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token4788= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$139$23(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token4788;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4787;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:139:34
            if (!scanToken(DEDENT)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:139:23
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$139$23(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:139:23
            // NonTerminal Statement at Python.javacc:139:23
            pushOntoLookaheadStack("Block", "Python.javacc", 139, 23);
            currentLookaheadProduction= "Statement";
            try {
                if (!check$Statement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:144:26
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$144$26(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:144:26
            Token token4794= currentLookaheadToken;
            boolean passedPredicate4794= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(STAR)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4794;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4794;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:144:32
            // NonTerminal Expression at Python.javacc:144:32
            pushOntoLookaheadStack("ExceptBlock", "Python.javacc", 144, 32);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:144:43
            Token token4797= currentLookaheadToken;
            boolean passedPredicate4797= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$144$44(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4797;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4797;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:144:44
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$144$44(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:144:44
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:144:49
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:148:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$148$7(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:148:7
            if (!scanToken(ELIF)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:148:14
            // NonTerminal NamedExpression at Python.javacc:148:14
            pushOntoLookaheadStack("IfStatement", "Python.javacc", 148, 14);
            currentLookaheadProduction= "NamedExpression";
            try {
                if (!check$NamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:148:30
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:148:34
            // NonTerminal Block at Python.javacc:148:34
            pushOntoLookaheadStack("IfStatement", "Python.javacc", 148, 34);
            currentLookaheadProduction= "Block";
            try {
                if (!check$Block(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:149:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$149$7(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:149:7
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:149:14
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:149:18
            // NonTerminal Block at Python.javacc:149:18
            pushOntoLookaheadStack("IfStatement", "Python.javacc", 149, 18);
            currentLookaheadProduction= "Block";
            try {
                if (!check$Block(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:154:53
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$154$53(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:154:53
            // NonTerminal ElseBlock at Python.javacc:154:53
            pushOntoLookaheadStack("WhileStatement", "Python.javacc", 154, 53);
            currentLookaheadProduction= "ElseBlock";
            try {
                if (!check$ElseBlock(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:159:9
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$159$9(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$159$14(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:159:44
            // NonTerminal WithItemsInParentheses at Python.javacc:159:44
            pushOntoLookaheadStack("WithStatement", "Python.javacc", 159, 44);
            currentLookaheadProduction= "WithItemsInParentheses";
            try {
                if (!check$WithItemsInParentheses(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:161:9
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$161$9(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:161:9
            // NonTerminal WithItem at Python.javacc:161:9
            pushOntoLookaheadStack("WithStatement", "Python.javacc", 161, 9);
            currentLookaheadProduction= "WithItem";
            try {
                if (!check$WithItem(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:161:18
            boolean passedPredicate4817= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token4818= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$161$19(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token4818;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4817;
            }
            hitFailure= false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:161:19
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$161$19(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:161:19
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:161:23
            // NonTerminal WithItem at Python.javacc:161:23
            pushOntoLookaheadStack("WithStatement", "Python.javacc", 161, 23);
            currentLookaheadProduction= "WithItem";
            try {
                if (!check$WithItem(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:166:45
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$166$45(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:166:52
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:166:56
            // NonTerminal WithItem at Python.javacc:166:56
            pushOntoLookaheadStack("WithItemsInParentheses", "Python.javacc", 166, 56);
            currentLookaheadProduction= "WithItem";
            try {
                if (!check$WithItem(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:168:24
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$168$24(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:168:24
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:168:29
            // NonTerminal StarTarget at Python.javacc:168:29
            pushOntoLookaheadStack("WithItem", "Python.javacc", 168, 29);
            currentLookaheadProduction= "StarTarget";
            try {
                if (!check$StarTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:173:11
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$173$11(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:173:11
            // NonTerminal ElseBlock at Python.javacc:173:11
            pushOntoLookaheadStack("ForStatement", "Python.javacc", 173, 11);
            currentLookaheadProduction= "ElseBlock";
            try {
                if (!check$ElseBlock(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:179:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$179$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:179:8
            // NonTerminal FinallyBlock at Python.javacc:179:8
            pushOntoLookaheadStack("TryStatement", "Python.javacc", 179, 8);
            currentLookaheadProduction= "FinallyBlock";
            try {
                if (!check$FinallyBlock(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:181:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$181$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:181:9
            if (!check$Python_javacc$181$10(false)) {
                return false;
            }
            boolean passedPredicate4836= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token4837= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$181$10(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token4837;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4836;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:181:24
            Token token4839= currentLookaheadToken;
            boolean passedPredicate4839= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$181$25(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4839;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4839;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:181:36
            Token token4841= currentLookaheadToken;
            boolean passedPredicate4841= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$181$37(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4841;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4841;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:181:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$181$10(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:181:10
            // NonTerminal ExceptBlock at Python.javacc:181:10
            pushOntoLookaheadStack("TryStatement", "Python.javacc", 181, 10);
            currentLookaheadProduction= "ExceptBlock";
            try {
                if (!check$ExceptBlock(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:181:25
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$181$25(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:181:25
            // NonTerminal ElseBlock at Python.javacc:181:25
            pushOntoLookaheadStack("TryStatement", "Python.javacc", 181, 25);
            currentLookaheadProduction= "ElseBlock";
            try {
                if (!check$ElseBlock(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:181:37
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$181$37(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:181:37
            // NonTerminal FinallyBlock at Python.javacc:181:37
            pushOntoLookaheadStack("TryStatement", "Python.javacc", 181, 37);
            currentLookaheadProduction= "FinallyBlock";
            try {
                if (!check$FinallyBlock(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:185:41
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$185$41(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:185:48
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:185:52
            // NonTerminal PrimaryExpression at Python.javacc:185:52
            pushOntoLookaheadStack("DelStatement", "Python.javacc", 185, 52);
            currentLookaheadProduction= "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:187:21
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$187$21(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:187:24
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:187:31
            if (!scanToken(COLONEQUALS)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:189:22
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$189$22(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:189:25
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:189:29
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:191:19
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$191$19(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:191:19
            // NonTerminal ImportName at Python.javacc:191:19
            pushOntoLookaheadStack("ImportStatement", "Python.javacc", 191, 19);
            currentLookaheadProduction= "ImportName";
            try {
                if (!check$ImportName(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:191:32
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$191$32(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:191:32
            // NonTerminal ImportFrom1 at Python.javacc:191:32
            pushOntoLookaheadStack("ImportStatement", "Python.javacc", 191, 32);
            currentLookaheadProduction= "ImportFrom1";
            try {
                if (!check$ImportFrom1(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:191:46
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$191$46(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:191:46
            // NonTerminal ImportFrom2 at Python.javacc:191:46
            pushOntoLookaheadStack("ImportStatement", "Python.javacc", 191, 46);
            currentLookaheadProduction= "ImportFrom2";
            try {
                if (!check$ImportFrom2(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:193:40
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$193$40(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:193:40
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:193:45
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:193:54
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$193$54(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:193:54
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:193:58
            // NonTerminal DottedName at Python.javacc:193:58
            pushOntoLookaheadStack("ImportName", "Python.javacc", 193, 58);
            currentLookaheadProduction= "DottedName";
            try {
                if (!check$DottedName(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:193:69
            Token token4878= currentLookaheadToken;
            boolean passedPredicate4878= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$193$70(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4878;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4878;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:193:70
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$193$70(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:193:70
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:193:75
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:202:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$202$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:202:4
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:202:11
            Token token4885= currentLookaheadToken;
            boolean passedPredicate4885= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$202$12(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4885;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4885;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:202:25
            boolean passedPredicate4887= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token4888= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$202$26(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token4888;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4887;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:202:58
            Token token4890= currentLookaheadToken;
            boolean passedPredicate4890= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4890;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4890;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:202:12
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$202$12(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:202:12
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:202:17
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:202:26
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$202$26(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:202:26
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:202:30
            if (!scanToken(NAME)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:202:42
            Token token4898= currentLookaheadToken;
            boolean passedPredicate4898= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$202$43(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4898;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4898;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:202:43
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$202$43(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:202:43
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:202:48
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:204:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$204$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:204:4
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:204:8
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:204:15
            Token token4906= currentLookaheadToken;
            boolean passedPredicate4906= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$204$16(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4906;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4906;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:204:29
            boolean passedPredicate4908= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token4909= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$204$30(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token4909;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4908;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:204:62
            Token token4911= currentLookaheadToken;
            boolean passedPredicate4911= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4911;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4911;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:204:68
            if (!scanToken(RPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:204:72
            Token token4914= currentLookaheadToken;
            boolean passedPredicate4914= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4914;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4914;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:204:16
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$204$16(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:204:16
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:204:21
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:204:30
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$204$30(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:204:30
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:204:34
            if (!scanToken(NAME)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:204:46
            Token token4922= currentLookaheadToken;
            boolean passedPredicate4922= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$204$47(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4922;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4922;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:204:47
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$204$47(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:204:47
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:204:52
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:208:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$208$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:208:6
            if (!scanToken(STAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:208:10
            // NonTerminal BitwiseOr at Python.javacc:208:10
            pushOntoLookaheadStack("StarNamedExpression", "Python.javacc", 208, 10);
            currentLookaheadProduction= "BitwiseOr";
            try {
                if (!check$BitwiseOr(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:210:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$210$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:210:6
            // NonTerminal NamedExpression at Python.javacc:210:6
            pushOntoLookaheadStack("StarNamedExpression", "Python.javacc", 210, 6);
            currentLookaheadProduction= "NamedExpression";
            try {
                if (!check$NamedExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:214:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$214$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:214:5
            if (!scanToken(STAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:214:9
            // NonTerminal BitwiseOr at Python.javacc:214:9
            pushOntoLookaheadStack("StarExpression", "Python.javacc", 214, 9);
            currentLookaheadProduction= "BitwiseOr";
            try {
                if (!check$BitwiseOr(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:216:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$216$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:216:5
            // NonTerminal Expression at Python.javacc:216:5
            pushOntoLookaheadStack("StarExpression", "Python.javacc", 216, 5);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:219:35
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$219$35(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:219:35
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:219:45
            // NonTerminal StarExpression at Python.javacc:219:45
            pushOntoLookaheadStack("StarExpressions", "Python.javacc", 219, 45);
            currentLookaheadProduction= "StarExpression";
            try {
                if (!check$StarExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:221:45
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$221$45(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:221:45
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:221:55
            // NonTerminal StarNamedExpression at Python.javacc:221:55
            pushOntoLookaheadStack("StarNamedExpressions", "Python.javacc", 221, 55);
            currentLookaheadProduction= "StarNamedExpression";
            try {
                if (!check$StarNamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:223:25
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$223$25(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:223:25
            if (!scanToken(BIT_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:223:29
            // NonTerminal BitwiseXor at Python.javacc:223:29
            pushOntoLookaheadStack("BitwiseOr", "Python.javacc", 223, 29);
            currentLookaheadProduction= "BitwiseXor";
            try {
                if (!check$BitwiseXor(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:225:26
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$225$26(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:225:26
            if (!scanToken(XOR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:225:30
            // NonTerminal BitwiseAnd at Python.javacc:225:30
            pushOntoLookaheadStack("BitwiseXor", "Python.javacc", 225, 30);
            currentLookaheadProduction= "BitwiseAnd";
            try {
                if (!check$BitwiseAnd(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:227:31
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$227$31(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:227:31
            if (!scanToken(BIT_AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:227:35
            // NonTerminal ShiftExpression at Python.javacc:227:35
            pushOntoLookaheadStack("BitwiseAnd", "Python.javacc", 227, 35);
            currentLookaheadProduction= "ShiftExpression";
            try {
                if (!check$ShiftExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:229:39
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$229$39(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:229:40
            if (!scanToken(LSHIFT, RSHIFT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:229:53
            // NonTerminal AdditiveExpression at Python.javacc:229:53
            pushOntoLookaheadStack("ShiftExpression", "Python.javacc", 229, 53);
            currentLookaheadProduction= "AdditiveExpression";
            try {
                if (!check$AdditiveExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:231:48
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$231$48(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:231:49
            if (!scanToken(MINUS, PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:231:58
            // NonTerminal MultiplicativeExpression at Python.javacc:231:58
            pushOntoLookaheadStack("AdditiveExpression", "Python.javacc", 231, 58);
            currentLookaheadProduction= "MultiplicativeExpression";
            try {
                if (!check$MultiplicativeExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:233:45
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$233$45(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:233:46
            if (!scanToken(first_set$Python_javacc$233$46)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:233:68
            // NonTerminal UnaryExpression at Python.javacc:233:68
            pushOntoLookaheadStack("MultiplicativeExpression", "Python.javacc", 233, 68);
            currentLookaheadProduction= "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:235:19
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$235$19(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:235:19
            // NonTerminal Power at Python.javacc:235:19
            pushOntoLookaheadStack("UnaryExpression", "Python.javacc", 235, 19);
            currentLookaheadProduction= "Power";
            try {
                if (!check$Power(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:235:27
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$235$27(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:235:28
            if (!scanToken(TILDE, MINUS, PLUS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:235:45
            // NonTerminal UnaryExpression at Python.javacc:235:45
            pushOntoLookaheadStack("UnaryExpression", "Python.javacc", 235, 45);
            currentLookaheadProduction= "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:237:23
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$237$23(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:237:23
            if (!scanToken(STAR_STAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:237:28
            // NonTerminal UnaryExpression at Python.javacc:237:28
            pushOntoLookaheadStack("Power", "Python.javacc", 237, 28);
            currentLookaheadProduction= "UnaryExpression";
            try {
                if (!check$UnaryExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:240:20
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$240$20(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:240:20
            // NonTerminal StarNamedExpression at Python.javacc:240:20
            pushOntoLookaheadStack("Tuple", "Python.javacc", 240, 20);
            currentLookaheadProduction= "StarNamedExpression";
            try {
                if (!check$StarNamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:240:40
            if (!scanToken(COMMA)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:241:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$241$10(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:241:10
            // NonTerminal StarNamedExpression at Python.javacc:241:10
            pushOntoLookaheadStack("Tuple", "Python.javacc", 241, 10);
            currentLookaheadProduction= "StarNamedExpression";
            try {
                if (!check$StarNamedExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:241:30
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:241:34
            Token token4979= currentLookaheadToken;
            boolean passedPredicate4979= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$241$35(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token4979;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate4979;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:241:35
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$241$35(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:241:35
            // NonTerminal StarNamedExpressions at Python.javacc:241:35
            pushOntoLookaheadStack("Tuple", "Python.javacc", 241, 35);
            currentLookaheadProduction= "StarNamedExpressions";
            try {
                if (!check$StarNamedExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:244:14
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$244$14(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:244:14
            // NonTerminal YieldExpression at Python.javacc:244:14
            pushOntoLookaheadStack("Group", "Python.javacc", 244, 14);
            currentLookaheadProduction= "YieldExpression";
            try {
                if (!check$YieldExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:244:32
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$244$32(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:244:32
            // NonTerminal NamedExpression at Python.javacc:244:32
            pushOntoLookaheadStack("Group", "Python.javacc", 244, 32);
            currentLookaheadProduction= "NamedExpression";
            try {
                if (!check$NamedExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:251:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$251$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:251:8
            Token token4987= currentLookaheadToken;
            int remainingLookahead4987= remainingLookahead;
            boolean hitFailure4987= hitFailure, passedPredicate4987= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$251$8$(false)) {
                    currentLookaheadToken= token4987;
                    remainingLookahead= remainingLookahead4987;
                    hitFailure= hitFailure4987;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$253$8(false)) {
                        currentLookaheadToken= token4987;
                        remainingLookahead= remainingLookahead4987;
                        hitFailure= hitFailure4987;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!check$Python_javacc$255$8(false)) {
                            currentLookaheadToken= token4987;
                            remainingLookahead= remainingLookahead4987;
                            hitFailure= hitFailure4987;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!check$Python_javacc$257$8(false)) {
                                currentLookaheadToken= token4987;
                                remainingLookahead= remainingLookahead4987;
                                hitFailure= hitFailure4987;
                                return false;
                            }
                        }
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate4987;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:251:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$251$8$(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:251:8
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:251:12
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:253:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$253$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:253:8
            // NonTerminal Slices at Python.javacc:253:8
            pushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 253, 8);
            currentLookaheadProduction= "Slices";
            try {
                if (!check$Slices(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:255:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$255$8(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:255:8
            // NonTerminal GenExp at Python.javacc:255:8
            pushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 255, 8);
            currentLookaheadProduction= "GenExp";
            try {
                if (!check$GenExp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:257:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$257$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:257:8
            // NonTerminal InvocationArguments at Python.javacc:257:8
            pushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 257, 8);
            currentLookaheadProduction= "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:262:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$262$5(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:262:5
            if (!scanToken(YIELD)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:262:13
            if (!scanToken(FROM)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:262:25
            // NonTerminal Expression at Python.javacc:262:25
            pushOntoLookaheadStack("YieldExpression", "Python.javacc", 262, 25);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:264:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$264$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:264:5
            if (!scanToken(YIELD)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:264:13
            Token token5004= currentLookaheadToken;
            boolean passedPredicate5004= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$264$14(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5004;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5004;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:264:14
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$264$14(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:264:14
            // NonTerminal StarExpressions at Python.javacc:264:14
            pushOntoLookaheadStack("YieldExpression", "Python.javacc", 264, 14);
            currentLookaheadProduction= "StarExpressions";
            try {
                if (!check$StarExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:269:16
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$269$16(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:269:16
            // NonTerminal YieldExpression at Python.javacc:269:16
            pushOntoLookaheadStack("AnnotatedRhs", "Python.javacc", 269, 16);
            currentLookaheadProduction= "YieldExpression";
            try {
                if (!check$YieldExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:269:34
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$269$34(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:269:34
            // NonTerminal StarExpressions at Python.javacc:269:34
            pushOntoLookaheadStack("AnnotatedRhs", "Python.javacc", 269, 34);
            currentLookaheadProduction= "StarExpressions";
            try {
                if (!check$StarExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:271:15
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$271$15(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:271:15
            if (!scanToken(AT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:271:19
            // NonTerminal NamedExpression at Python.javacc:271:19
            pushOntoLookaheadStack("Decorators", "Python.javacc", 271, 19);
            currentLookaheadProduction= "NamedExpression";
            try {
                if (!check$NamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:271:35
            if (!scanToken(NEWLINE)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:278:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$278$7(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:278:7
            // NonTerminal Argument at Python.javacc:278:7
            pushOntoLookaheadStack("InvocationArguments", "Python.javacc", 278, 7);
            currentLookaheadProduction= "Argument";
            try {
                if (!check$Argument(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:279:7
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:288:7
            boolean passedPredicate5019= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token5020= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$289$10(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token5020;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5019;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:297:7
            Token token5022= currentLookaheadToken;
            boolean passedPredicate5022= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5022;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5022;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:289:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$289$10(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-3;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:290:10
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:291:10
            // NonTerminal Argument at Python.javacc:291:10
            pushOntoLookaheadStack("InvocationArguments", "Python.javacc", 291, 10);
            currentLookaheadProduction= "Argument";
            try {
                if (!check$Argument(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:292:10
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:303:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$303$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:303:4
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:305:7
            Token token5031= currentLookaheadToken;
            int remainingLookahead5031= remainingLookahead;
            boolean hitFailure5031= hitFailure, passedPredicate5031= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$305$7(false)) {
                    currentLookaheadToken= token5031;
                    remainingLookahead= remainingLookahead5031;
                    hitFailure= hitFailure5031;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!scanToken(ASSIGN)) {
                        currentLookaheadToken= token5031;
                        remainingLookahead= remainingLookahead5031;
                        hitFailure= hitFailure5031;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5031;
            }
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:311:4
            // NonTerminal Expression at Python.javacc:311:4
            pushOntoLookaheadStack("Argument", "Python.javacc", 311, 4);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:305:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$305$7(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:306:7
            if (!scanToken(COLONEQUALS)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:313:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$313$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:313:4
            Token token5037= currentLookaheadToken;
            boolean passedPredicate5037= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$314$7$(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5037;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5037;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:318:4
            // NonTerminal Expression at Python.javacc:318:4
            pushOntoLookaheadStack("Argument", "Python.javacc", 318, 4);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:314:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$314$7$(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:314:7
            Token token5040= currentLookaheadToken;
            int remainingLookahead5040= remainingLookahead;
            boolean hitFailure5040= hitFailure, passedPredicate5040= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$314$7(false)) {
                    currentLookaheadToken= token5040;
                    remainingLookahead= remainingLookahead5040;
                    hitFailure= hitFailure5040;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!scanToken(STAR_STAR)) {
                        currentLookaheadToken= token5040;
                        remainingLookahead= remainingLookahead5040;
                        hitFailure= hitFailure5040;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5040;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:314:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$314$7(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:314:35
            if (!scanToken(STAR)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:324:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$324$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:324:5
            if (!scanToken(STAR_STAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:324:10
            // NonTerminal BitwiseOr at Python.javacc:324:10
            pushOntoLookaheadStack("DoubleStarredKeyValuePair", "Python.javacc", 324, 10);
            currentLookaheadProduction= "BitwiseOr";
            try {
                if (!check$BitwiseOr(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:326:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$326$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:326:5
            // NonTerminal KeyValuePair at Python.javacc:326:5
            pushOntoLookaheadStack("DoubleStarredKeyValuePair", "Python.javacc", 326, 5);
            currentLookaheadProduction= "KeyValuePair";
            try {
                if (!check$KeyValuePair(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:329:57
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$329$57(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:329:57
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:329:67
            // NonTerminal DoubleStarredKeyValuePair at Python.javacc:329:67
            pushOntoLookaheadStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 67);
            currentLookaheadProduction= "DoubleStarredKeyValuePair";
            try {
                if (!check$DoubleStarredKeyValuePair(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:332:19
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$332$19(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:332:19
            // NonTerminal DoubleStarredKeyValuePair at Python.javacc:332:19
            pushOntoLookaheadStack("Dict", "Python.javacc", 332, 19);
            currentLookaheadProduction= "DoubleStarredKeyValuePair";
            try {
                if (!check$DoubleStarredKeyValuePair(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:335:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$335$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:335:6
            // NonTerminal DoubleStarredKeyValuePairs at Python.javacc:335:6
            pushOntoLookaheadStack("Dict", "Python.javacc", 335, 6);
            currentLookaheadProduction= "DoubleStarredKeyValuePairs";
            try {
                if (!check$DoubleStarredKeyValuePairs(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:340:36
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$340$36(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:340:36
            // NonTerminal ForIfClause at Python.javacc:340:36
            pushOntoLookaheadStack("DictComp", "Python.javacc", 340, 36);
            currentLookaheadProduction= "ForIfClause";
            try {
                if (!check$ForIfClause(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:344:38
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$344$38(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:344:38
            // NonTerminal ForIfClause at Python.javacc:344:38
            pushOntoLookaheadStack("SetComp", "Python.javacc", 344, 38);
            currentLookaheadProduction= "ForIfClause";
            try {
                if (!check$ForIfClause(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:347:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$347$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:347:6
            // NonTerminal Decorators at Python.javacc:347:6
            pushOntoLookaheadStack("ClassDefinition", "Python.javacc", 347, 6);
            currentLookaheadProduction= "Decorators";
            try {
                if (!check$Decorators(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:348:13
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$348$13(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:348:13
            // NonTerminal InvocationArguments at Python.javacc:348:13
            pushOntoLookaheadStack("ClassDefinition", "Python.javacc", 348, 13);
            currentLookaheadProduction= "InvocationArguments";
            try {
                if (!check$InvocationArguments(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:354:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$354$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:354:6
            // NonTerminal Decorators at Python.javacc:354:6
            pushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 354, 6);
            currentLookaheadProduction= "Decorators";
            try {
                if (!check$Decorators(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:361:6
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$361$6(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:361:6
            if (!scanToken(RARROW)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:361:11
            // NonTerminal Expression at Python.javacc:361:11
            pushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 361, 11);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:371:14
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$371$14(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:14
            // NonTerminal Disjunction at Python.javacc:371:14
            pushOntoLookaheadStack("Expression", "Python.javacc", 371, 14);
            currentLookaheadProduction= "Disjunction";
            try {
                if (!check$Disjunction(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:371:26
            Token token5076= currentLookaheadToken;
            boolean passedPredicate5076= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$371$27(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5076;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5076;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:371:27
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$371$27(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:371:27
            if (!scanToken(IF)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:32
            // NonTerminal Disjunction at Python.javacc:371:32
            pushOntoLookaheadStack("Expression", "Python.javacc", 371, 32);
            currentLookaheadProduction= "Disjunction";
            try {
                if (!check$Disjunction(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:371:44
            if (!scanToken(ELSE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:51
            // NonTerminal Expression at Python.javacc:371:51
            pushOntoLookaheadStack("Expression", "Python.javacc", 371, 51);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:371:65
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$371$65(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:371:65
            // NonTerminal LambdaDefinition at Python.javacc:371:65
            pushOntoLookaheadStack("Expression", "Python.javacc", 371, 65);
            currentLookaheadProduction= "LambdaDefinition";
            try {
                if (!check$LambdaDefinition(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:373:28
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$373$28(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:373:28
            if (!scanToken(OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:373:33
            // NonTerminal Conjunction at Python.javacc:373:33
            pushOntoLookaheadStack("Disjunction", "Python.javacc", 373, 33);
            currentLookaheadProduction= "Conjunction";
            try {
                if (!check$Conjunction(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:375:26
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$375$26(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:375:26
            if (!scanToken(AND)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:375:32
            // NonTerminal Inversion at Python.javacc:375:32
            pushOntoLookaheadStack("Conjunction", "Python.javacc", 375, 32);
            currentLookaheadProduction= "Inversion";
            try {
                if (!check$Inversion(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:379:25
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$379$25(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:379:25
            // NonTerminal ComparisonOperator at Python.javacc:379:25
            pushOntoLookaheadStack("Comparison", "Python.javacc", 379, 25);
            currentLookaheadProduction= "ComparisonOperator";
            try {
                if (!check$ComparisonOperator(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:379:44
            // NonTerminal BitwiseOr at Python.javacc:379:44
            pushOntoLookaheadStack("Comparison", "Python.javacc", 379, 44);
            currentLookaheadProduction= "BitwiseOr";
            try {
                if (!check$BitwiseOr(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:384:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$384$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:384:4
            Token token5095= currentLookaheadToken;
            boolean passedPredicate5095= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(NOT)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5095;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5095;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:384:12
            if (!scanToken(IN)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:386:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$386$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:386:4
            if (!scanToken(IS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:386:9
            Token token5100= currentLookaheadToken;
            boolean passedPredicate5100= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(NOT)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5100;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5100;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:391:27
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$391$27(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:391:27
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:391:37
            // NonTerminal StarTarget at Python.javacc:391:37
            pushOntoLookaheadStack("StarTargets", "Python.javacc", 391, 37);
            currentLookaheadProduction= "StarTarget";
            try {
                if (!check$StarTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:393:61
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$393$61(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:393:61
            if (!scanToken(IF)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:393:66
            // NonTerminal Disjunction at Python.javacc:393:66
            pushOntoLookaheadStack("ForIfClause", "Python.javacc", 393, 66);
            currentLookaheadProduction= "Disjunction";
            try {
                if (!check$Disjunction(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:395:37
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$395$37(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:395:37
            // NonTerminal ForIfClause at Python.javacc:395:37
            pushOntoLookaheadStack("GenExp", "Python.javacc", 395, 37);
            currentLookaheadProduction= "ForIfClause";
            try {
                if (!check$ForIfClause(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:397:13
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$397$13(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:397:13
            // NonTerminal StarNamedExpressions at Python.javacc:397:13
            pushOntoLookaheadStack("List", "Python.javacc", 397, 13);
            currentLookaheadProduction= "StarNamedExpressions";
            try {
                if (!check$StarNamedExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:399:39
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$399$39(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:399:39
            // NonTerminal ForIfClause at Python.javacc:399:39
            pushOntoLookaheadStack("ListComp", "Python.javacc", 399, 39);
            currentLookaheadProduction= "ForIfClause";
            try {
                if (!check$ForIfClause(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:402:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$402$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:402:4
            // NonTerminal KeyWords at Python.javacc:402:4
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 402, 4);
            currentLookaheadProduction= "KeyWords";
            try {
                if (!check$KeyWords(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:404:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$404$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:4
            if (!scanToken(STAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:8
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:17
            // NonTerminal ParamMaybeDefault at Python.javacc:404:17
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 17);
            currentLookaheadProduction= "ParamMaybeDefault";
            try {
                if (!check$ParamMaybeDefault(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:404:35
            boolean passedPredicate5120= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token5121= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$404$36(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token5121;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5120;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:404:66
            Token token5123= currentLookaheadToken;
            boolean passedPredicate5123= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$404$67(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5123;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5123;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:404:36
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$404$36(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:36
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:46
            // NonTerminal ParamMaybeDefault at Python.javacc:404:46
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 46);
            currentLookaheadProduction= "ParamMaybeDefault";
            try {
                if (!check$ParamMaybeDefault(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:404:67
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$404$67(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:67
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:404:71
            Token token5130= currentLookaheadToken;
            boolean passedPredicate5130= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$404$72(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5130;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5130;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:404:72
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$404$72(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:72
            // NonTerminal KeyWords at Python.javacc:404:72
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 72);
            currentLookaheadProduction= "KeyWords";
            try {
                if (!check$KeyWords(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:406:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$406$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:4
            if (!scanToken(STAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:406:8
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:406:15
            Token token5137= currentLookaheadToken;
            boolean passedPredicate5137= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$406$16(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5137;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5137;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:406:64
            boolean passedPredicate5139= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token5140= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$406$65(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token5140;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5139;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:406:95
            Token token5142= currentLookaheadToken;
            boolean passedPredicate5142= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$406$96(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5142;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5142;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:406:16
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$406$16(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Python_javacc$406$23()) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:48
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:52
            // NonTerminal Expression at Python.javacc:406:52
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 52);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:406:65
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$406$65(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:65
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:75
            // NonTerminal ParamMaybeDefault at Python.javacc:406:75
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 75);
            currentLookaheadProduction= "ParamMaybeDefault";
            try {
                if (!check$ParamMaybeDefault(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:406:96
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$406$96(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:96
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:406:100
            Token token5152= currentLookaheadToken;
            boolean passedPredicate5152= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$406$101(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5152;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5152;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:406:101
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$406$101(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:101
            // NonTerminal KeyWords at Python.javacc:406:101
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 101);
            currentLookaheadProduction= "KeyWords";
            try {
                if (!check$KeyWords(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:409:29
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$409$29(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:409:29
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:409:33
            // NonTerminal Expression at Python.javacc:409:33
            pushOntoLookaheadStack("ParamMaybeDefault", "Python.javacc", 409, 33);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:409:46
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$409$46(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:409:46
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:409:50
            // NonTerminal Expression at Python.javacc:409:50
            pushOntoLookaheadStack("ParamMaybeDefault", "Python.javacc", 409, 50);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:414:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$414$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (backscan$Python_javacc$414$15()) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:415:8
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:415:12
            // NonTerminal Expression at Python.javacc:415:12
            pushOntoLookaheadStack("KeyWords", "Python.javacc", 415, 12);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:422:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$422$7(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:422:7
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:425:7
            Token token5167= currentLookaheadToken;
            boolean passedPredicate5167= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$425$8(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5167;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5167;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:426:7
            Token token5169= currentLookaheadToken;
            boolean passedPredicate5169= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$426$8(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5169;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5169;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:427:7
            boolean passedPredicate5171= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token5172= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$427$8(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token5172;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5171;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:442:7
            Token token5174= currentLookaheadToken;
            boolean passedPredicate5174= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5174;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5174;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:425:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$425$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Python_javacc$425$15()) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:425:38
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:425:42
            // NonTerminal Expression at Python.javacc:425:42
            pushOntoLookaheadStack("Parameters", "Python.javacc", 425, 42);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:426:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$426$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:426:8
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:426:12
            // NonTerminal Expression at Python.javacc:426:12
            pushOntoLookaheadStack("Parameters", "Python.javacc", 426, 12);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:426:23
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:427:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$427$8(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:427:8
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:430:11
            Token token5186= currentLookaheadToken;
            int remainingLookahead5186= remainingLookahead;
            boolean hitFailure5186= hitFailure, passedPredicate5186= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$430$11(false)) {
                    currentLookaheadToken= token5186;
                    remainingLookahead= remainingLookahead5186;
                    hitFailure= hitFailure5186;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$433$11(false)) {
                        currentLookaheadToken= token5186;
                        remainingLookahead= remainingLookahead5186;
                        hitFailure= hitFailure5186;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5186;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:430:11
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$430$11(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:431:11
            if (!scanToken(SLASH)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:431:15
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:433:11
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$433$11(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:433:11
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:433:18
            Token token5193= currentLookaheadToken;
            boolean passedPredicate5193= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$433$19(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5193;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5193;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:434:11
            Token token5195= currentLookaheadToken;
            boolean passedPredicate5195= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$437$14(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5195;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5195;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:433:19
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$433$19(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!backscan$Python_javacc$433$26()) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:433:49
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:433:53
            // NonTerminal Expression at Python.javacc:433:53
            pushOntoLookaheadStack("Parameters", "Python.javacc", 433, 53);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:437:14
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$437$14(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            passedPredicate= true;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:438:17
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:438:21
            // NonTerminal Expression at Python.javacc:438:21
            pushOntoLookaheadStack("Parameters", "Python.javacc", 438, 21);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:438:32
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:445:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$445$7(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (check$Python_javacc$445$13(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:445:26
            // NonTerminal StarEtc at Python.javacc:445:26
            pushOntoLookaheadStack("Parameters", "Python.javacc", 445, 26);
            currentLookaheadProduction= "StarEtc";
            try {
                if (!check$StarEtc(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:456:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$456$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:456:4
            // NonTerminal PrimaryExpression at Python.javacc:456:4
            pushOntoLookaheadStack("SimpleAssignTarget", "Python.javacc", 456, 4);
            currentLookaheadProduction= "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:458:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$458$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:458:4
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:458:8
            // NonTerminal SimpleAssignTarget at Python.javacc:458:8
            pushOntoLookaheadStack("SimpleAssignTarget", "Python.javacc", 458, 8);
            currentLookaheadProduction= "SimpleAssignTarget";
            try {
                if (!check$SimpleAssignTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:458:27
            if (!scanToken(RPAREN)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:462:7
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$462$7$(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:462:7
            // NonTerminal SimpleAssignTarget at Python.javacc:462:7
            pushOntoLookaheadStack("Assignment", "Python.javacc", 462, 7);
            currentLookaheadProduction= "SimpleAssignTarget";
            try {
                if (!check$SimpleAssignTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:462:27
            if (!scanToken(first_set$Python_javacc$462$27)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:462:51
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$462$51(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:462:51
            // NonTerminal StarTargets at Python.javacc:462:51
            pushOntoLookaheadStack("Assignment", "Python.javacc", 462, 51);
            currentLookaheadProduction= "StarTargets";
            try {
                if (!check$StarTargets(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:462:63
            if (!scanToken(ASSIGN)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:464:3
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$464$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:3
            // NonTerminal SimpleAssignTarget at Python.javacc:464:3
            pushOntoLookaheadStack("Assignment", "Python.javacc", 464, 3);
            currentLookaheadProduction= "SimpleAssignTarget";
            try {
                if (!check$SimpleAssignTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:464:22
            if (!scanToken(COLON)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:31
            // NonTerminal Expression at Python.javacc:464:31
            pushOntoLookaheadStack("Assignment", "Python.javacc", 464, 31);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:464:42
            Token token5225= currentLookaheadToken;
            boolean passedPredicate5225= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$464$43(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5225;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5225;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:464:43
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$464$43(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:464:43
            if (!scanToken(ASSIGN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:47
            // NonTerminal AnnotatedRhs at Python.javacc:464:47
            pushOntoLookaheadStack("Assignment", "Python.javacc", 464, 47);
            currentLookaheadProduction= "AnnotatedRhs";
            try {
                if (!check$AnnotatedRhs(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:466:3
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$466$3(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:3
            // NonTerminal SimpleAssignTarget at Python.javacc:466:3
            pushOntoLookaheadStack("Assignment", "Python.javacc", 466, 3);
            currentLookaheadProduction= "SimpleAssignTarget";
            try {
                if (!check$SimpleAssignTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:22
            if (!scanToken(first_set$Python_javacc$466$22)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:466:38
            Token token5234= currentLookaheadToken;
            int remainingLookahead5234= remainingLookahead;
            boolean hitFailure5234= hitFailure, passedPredicate5234= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$466$38(false)) {
                    currentLookaheadToken= token5234;
                    remainingLookahead= remainingLookahead5234;
                    hitFailure= hitFailure5234;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$466$56(false)) {
                        currentLookaheadToken= token5234;
                        remainingLookahead= remainingLookahead5234;
                        hitFailure= hitFailure5234;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5234;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:466:38
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$466$38(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:38
            // NonTerminal YieldExpression at Python.javacc:466:38
            pushOntoLookaheadStack("Assignment", "Python.javacc", 466, 38);
            currentLookaheadProduction= "YieldExpression";
            try {
                if (!check$YieldExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:466:56
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$466$56(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:56
            // NonTerminal StarExpressions at Python.javacc:466:56
            pushOntoLookaheadStack("Assignment", "Python.javacc", 466, 56);
            currentLookaheadProduction= "StarExpressions";
            try {
                if (!check$StarExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:468:3
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$468$3(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for OneOrMore specified at Python.javacc:468:3
            if (!check$Python_javacc$468$4(false)) {
                return false;
            }
            boolean passedPredicate5241= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token5242= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$468$4(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token5242;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5241;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:468:28
            Token token5245= currentLookaheadToken;
            int remainingLookahead5245= remainingLookahead;
            boolean hitFailure5245= hitFailure, passedPredicate5245= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$468$28(false)) {
                    currentLookaheadToken= token5245;
                    remainingLookahead= remainingLookahead5245;
                    hitFailure= hitFailure5245;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$468$46(false)) {
                        currentLookaheadToken= token5245;
                        remainingLookahead= remainingLookahead5245;
                        hitFailure= hitFailure5245;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5245;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:468:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$468$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:4
            // NonTerminal StarTargets at Python.javacc:468:4
            pushOntoLookaheadStack("Assignment", "Python.javacc", 468, 4);
            currentLookaheadProduction= "StarTargets";
            try {
                if (!check$StarTargets(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:468:16
            if (!scanToken(ASSIGN)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:468:28
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$468$28(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:28
            // NonTerminal YieldExpression at Python.javacc:468:28
            pushOntoLookaheadStack("Assignment", "Python.javacc", 468, 28);
            currentLookaheadProduction= "YieldExpression";
            try {
                if (!check$YieldExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:468:46
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$468$46(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:46
            // NonTerminal StarExpressions at Python.javacc:468:46
            pushOntoLookaheadStack("Assignment", "Python.javacc", 468, 46);
            currentLookaheadProduction= "StarExpressions";
            try {
                if (!check$StarExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:478:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$478$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:478:4
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for Assertion specified at Python.javacc:479:4
            if (!(getToken(0).getImage().equals("match"))) {
                hitFailure= true;
                return false;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:480:4
            // NonTerminal SubjectExpression at Python.javacc:480:4
            pushOntoLookaheadStack("MatchStatementLA", "Python.javacc", 480, 4);
            currentLookaheadProduction= "SubjectExpression";
            try {
                if (!check$SubjectExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:481:4
            if (!scanToken(COLON)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:491:26
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$491$26(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:491:26
            // NonTerminal CaseBlock at Python.javacc:491:26
            pushOntoLookaheadStack("MatchStatement", "Python.javacc", 491, 26);
            currentLookaheadProduction= "CaseBlock";
            try {
                if (!check$CaseBlock(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:500:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$500$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:500:8
            if (!scanToken(IF)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:500:13
            // NonTerminal NamedExpression at Python.javacc:500:13
            pushOntoLookaheadStack("CaseBlock", "Python.javacc", 500, 13);
            currentLookaheadProduction= "NamedExpression";
            try {
                if (!check$NamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:508:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$508$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:508:4
            // NonTerminal OpenSequencePattern at Python.javacc:508:4
            pushOntoLookaheadStack("Patterns", "Python.javacc", 508, 4);
            currentLookaheadProduction= "OpenSequencePattern";
            try {
                if (!check$OpenSequencePattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:510:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$510$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:510:4
            // NonTerminal Pattern at Python.javacc:510:4
            pushOntoLookaheadStack("Patterns", "Python.javacc", 510, 4);
            currentLookaheadProduction= "Pattern";
            try {
                if (!check$Pattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:517:25
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$517$25(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:517:25
            // NonTerminal StarPattern at Python.javacc:517:25
            pushOntoLookaheadStack("MaybeStarPattern", "Python.javacc", 517, 25);
            currentLookaheadProduction= "StarPattern";
            try {
                if (!check$StarPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:517:39
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$517$39(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:517:39
            // NonTerminal Pattern at Python.javacc:517:39
            pushOntoLookaheadStack("MaybeStarPattern", "Python.javacc", 517, 39);
            currentLookaheadProduction= "Pattern";
            try {
                if (!check$Pattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:520:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$520$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:520:4
            // NonTerminal ClassPattern at Python.javacc:520:4
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 520, 4);
            currentLookaheadProduction= "ClassPattern";
            try {
                if (!check$ClassPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:522:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$522$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:522:4
            // NonTerminal LiteralPattern at Python.javacc:522:4
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 522, 4);
            currentLookaheadProduction= "LiteralPattern";
            try {
                if (!check$LiteralPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:524:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$524$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:524:4
            // NonTerminal NameOrAttribute at Python.javacc:524:4
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 524, 4);
            currentLookaheadProduction= "NameOrAttribute";
            try {
                if (!check$NameOrAttribute(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:526:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$526$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:526:6
            // NonTerminal GroupPattern at Python.javacc:526:6
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 526, 6);
            currentLookaheadProduction= "GroupPattern";
            try {
                if (!check$GroupPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:528:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$528$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:528:4
            // NonTerminal SequencePattern at Python.javacc:528:4
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 528, 4);
            currentLookaheadProduction= "SequencePattern";
            try {
                if (!check$SequencePattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:530:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$530$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:530:4
            // NonTerminal MappingPattern at Python.javacc:530:4
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 530, 4);
            currentLookaheadProduction= "MappingPattern";
            try {
                if (!check$MappingPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:535:19
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$535$19$(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:535:19
            // NonTerminal LiteralPattern at Python.javacc:535:19
            pushOntoLookaheadStack("KeyValuePattern", "Python.javacc", 535, 19);
            currentLookaheadProduction= "LiteralPattern";
            try {
                if (!check$LiteralPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:535:36
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$535$36(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:535:36
            // NonTerminal Attribute at Python.javacc:535:36
            pushOntoLookaheadStack("KeyValuePattern", "Python.javacc", 535, 36);
            currentLookaheadProduction= "Attribute";
            try {
                if (!check$Attribute(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:537:33
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$537$33(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:537:33
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:537:43
            // NonTerminal KeyValuePattern at Python.javacc:537:43
            pushOntoLookaheadStack("ItemsPattern", "Python.javacc", 537, 43);
            currentLookaheadProduction= "KeyValuePattern";
            try {
                if (!check$KeyValuePattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:542:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$542$10(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:542:10
            Token token5293= currentLookaheadToken;
            int remainingLookahead5293= remainingLookahead;
            boolean hitFailure5293= hitFailure, passedPredicate5293= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$542$10$(false)) {
                    currentLookaheadToken= token5293;
                    remainingLookahead= remainingLookahead5293;
                    hitFailure= hitFailure5293;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$544$10(false)) {
                        currentLookaheadToken= token5293;
                        remainingLookahead= remainingLookahead5293;
                        hitFailure= hitFailure5293;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5293;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:542:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$542$10$(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:542:10
            // NonTerminal ItemsPattern at Python.javacc:542:10
            pushOntoLookaheadStack("MappingPattern", "Python.javacc", 542, 10);
            currentLookaheadProduction= "ItemsPattern";
            try {
                if (!check$ItemsPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:542:23
            Token token5297= currentLookaheadToken;
            boolean passedPredicate5297= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$542$24(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5297;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5297;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:542:53
            Token token5299= currentLookaheadToken;
            boolean passedPredicate5299= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5299;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5299;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:542:24
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$542$24(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:542:24
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:542:34
            // NonTerminal DoubleStarPattern at Python.javacc:542:34
            pushOntoLookaheadStack("MappingPattern", "Python.javacc", 542, 34);
            currentLookaheadProduction= "DoubleStarPattern";
            try {
                if (!check$DoubleStarPattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:544:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$544$10(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:544:10
            // NonTerminal DoubleStarPattern at Python.javacc:544:10
            pushOntoLookaheadStack("MappingPattern", "Python.javacc", 544, 10);
            currentLookaheadProduction= "DoubleStarPattern";
            try {
                if (!check$DoubleStarPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:544:28
            Token token5306= currentLookaheadToken;
            boolean passedPredicate5306= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5306;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5306;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:558:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$558$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:558:4
            // NonTerminal SignedNumber at Python.javacc:558:4
            pushOntoLookaheadStack("LiteralPattern", "Python.javacc", 558, 4);
            currentLookaheadProduction= "SignedNumber";
            try {
                if (!check$SignedNumber(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:560:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$560$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:560:4
            // NonTerminal Strings at Python.javacc:560:4
            pushOntoLookaheadStack("LiteralPattern", "Python.javacc", 560, 4);
            currentLookaheadProduction= "Strings";
            try {
                if (!check$Strings(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:564:22
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$564$22(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:564:22
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:564:32
            // NonTerminal MaybeStarPattern at Python.javacc:564:32
            pushOntoLookaheadStack("MaybeSequencePattern", "Python.javacc", 564, 32);
            currentLookaheadProduction= "MaybeStarPattern";
            try {
                if (!check$MaybeStarPattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:568:31
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$568$31(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:568:31
            // NonTerminal MaybeSequencePattern at Python.javacc:568:31
            pushOntoLookaheadStack("OpenSequencePattern", "Python.javacc", 568, 31);
            currentLookaheadProduction= "MaybeSequencePattern";
            try {
                if (!check$MaybeSequencePattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:572:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$572$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:572:5
            if (!scanToken(LBRACKET)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:572:9
            Token token5319= currentLookaheadToken;
            boolean passedPredicate5319= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$572$10(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5319;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5319;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:572:32
            if (!scanToken(RBRACKET)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:572:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$572$10(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:572:10
            // NonTerminal MaybeSequencePattern at Python.javacc:572:10
            pushOntoLookaheadStack("SequencePattern", "Python.javacc", 572, 10);
            currentLookaheadProduction= "MaybeSequencePattern";
            try {
                if (!check$MaybeSequencePattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:574:5
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$574$5(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:574:5
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:574:9
            Token token5326= currentLookaheadToken;
            boolean passedPredicate5326= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$574$10(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5326;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5326;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:574:31
            if (!scanToken(RPAREN)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:574:10
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$574$10(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:574:10
            // NonTerminal OpenSequencePattern at Python.javacc:574:10
            pushOntoLookaheadStack("SequencePattern", "Python.javacc", 574, 10);
            currentLookaheadProduction= "OpenSequencePattern";
            try {
                if (!check$OpenSequencePattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:582:11
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$582$11$(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:582:11
            Token token5331= currentLookaheadToken;
            int remainingLookahead5331= remainingLookahead;
            boolean hitFailure5331= hitFailure, passedPredicate5331= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$582$11(false)) {
                    currentLookaheadToken= token5331;
                    remainingLookahead= remainingLookahead5331;
                    hitFailure= hitFailure5331;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$585$11(false)) {
                        currentLookaheadToken= token5331;
                        remainingLookahead= remainingLookahead5331;
                        hitFailure= hitFailure5331;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5331;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:582:11
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$582$11(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-2147483647;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$582$16(true)) return false;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:583:11
            // NonTerminal KeywordPatterns at Python.javacc:583:11
            pushOntoLookaheadStack("ClassPattern", "Python.javacc", 583, 11);
            currentLookaheadProduction= "KeywordPatterns";
            try {
                if (!check$KeywordPatterns(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:583:27
            Token token5335= currentLookaheadToken;
            boolean passedPredicate5335= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5335;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5335;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:585:11
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$585$11(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:585:11
            // NonTerminal PositionalPatterns at Python.javacc:585:11
            pushOntoLookaheadStack("ClassPattern", "Python.javacc", 585, 11);
            currentLookaheadProduction= "PositionalPatterns";
            try {
                if (!check$PositionalPatterns(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:585:30
            Token token5339= currentLookaheadToken;
            boolean passedPredicate5339= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$585$31(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5339;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5339;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:585:58
            Token token5341= currentLookaheadToken;
            boolean passedPredicate5341= passedPredicate;
            passedPredicate= false;
            try {
                if (!scanToken(COMMA)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5341;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5341;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:585:31
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$585$31(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:585:31
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:585:41
            // NonTerminal KeywordPatterns at Python.javacc:585:41
            pushOntoLookaheadStack("ClassPattern", "Python.javacc", 585, 41);
            currentLookaheadProduction= "KeywordPatterns";
            try {
                if (!check$KeywordPatterns(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:595:8
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$595$8(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-0;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            if (!(getToken(1).getType()== TokenType.COMMA&&!(getToken(2).getType()== TokenType.NAME&&getToken(3).getType()== TokenType.ASSIGN))) return false;
            passedPredicate= true;
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:596:11
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:596:15
            // NonTerminal Pattern at Python.javacc:596:15
            pushOntoLookaheadStack("PositionalPatterns", "Python.javacc", 596, 15);
            currentLookaheadProduction= "Pattern";
            try {
                if (!check$Pattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:602:35
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$602$35(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:602:35
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 2;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-2;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:602:45
            // NonTerminal KeywordPattern at Python.javacc:602:45
            pushOntoLookaheadStack("KeywordPatterns", "Python.javacc", 602, 45);
            currentLookaheadProduction= "KeywordPattern";
            try {
                if (!check$KeywordPattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:604:28
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$604$28(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:604:28
            if (!scanToken(BIT_OR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:604:32
            // NonTerminal ClosedPattern at Python.javacc:604:32
            pushOntoLookaheadStack("OrPattern", "Python.javacc", 604, 32);
            currentLookaheadProduction= "ClosedPattern";
            try {
                if (!check$ClosedPattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:606:22
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$606$22(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:606:22
            if (!scanToken(AS)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:606:27
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:609:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$609$4(boolean scanToEnd) {
        int prevPassedPredicateThreshold= this.passedPredicateThreshold;
        this.passedPredicateThreshold= -1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:609:4
            // NonTerminal StarNamedExpression at Python.javacc:609:4
            pushOntoLookaheadStack("SubjectExpression", "Python.javacc", 609, 4);
            currentLookaheadProduction= "StarNamedExpression";
            try {
                if (!check$StarNamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:609:24
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:609:33
            Token token5361= currentLookaheadToken;
            boolean passedPredicate5361= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$609$34(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5361;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5361;
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if (remainingLookahead<=this.passedPredicateThreshold) {
                passedPredicate= true;
                this.passedPredicateThreshold= prevPassedPredicateThreshold;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:609:34
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$609$34(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:609:34
            // NonTerminal StarNamedExpressions at Python.javacc:609:34
            pushOntoLookaheadStack("SubjectExpression", "Python.javacc", 609, 34);
            currentLookaheadProduction= "StarNamedExpressions";
            try {
                if (!check$StarNamedExpressions(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:611:4
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$611$4(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:611:4
            // NonTerminal NamedExpression at Python.javacc:611:4
            pushOntoLookaheadStack("SubjectExpression", "Python.javacc", 611, 4);
            currentLookaheadProduction= "NamedExpression";
            try {
                if (!check$NamedExpression(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:614:21
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$614$21(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:614:21
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:614:25
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // scanahead routine for expansion at: 
    // Python.javacc:616:42
    // BuildScanRoutine macro
    private final boolean check$Python_javacc$616$42(boolean scanToEnd) {
        boolean $reachedScanCode$= false;
        int passedPredicateThreshold= remainingLookahead-1;
        try {
            lookaheadRoutineNesting++;
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            $reachedScanCode$= true;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:616:42
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:616:46
            if (!scanToken(NAME)) return false;
        }
        finally {
            lookaheadRoutineNesting--;
            if ($reachedScanCode$&&remainingLookahead<=passedPredicateThreshold) {
                passedPredicate= true;
            }
        }
        passedPredicate= false;
        return true;
    }

    // BuildPredicateRoutine: expansion at Python.javacc:55:6
    private final boolean scan$Python_javacc$55$6() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$240$9(true)) return false;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:55:14
    private final boolean scan$Python_javacc$55$14() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:55:14
            // NonTerminal GenExp at Python.javacc:55:14
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 55, 14);
            currentLookaheadProduction= "GenExp";
            try {
                if (!check$GenExp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:57:6
    private final boolean scan$Python_javacc$57$6() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:57:6
            // NonTerminal ListComp at Python.javacc:57:6
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 57, 6);
            currentLookaheadProduction= "ListComp";
            try {
                if (!check$ListComp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:59:6
    private final boolean scan$Python_javacc$59$6() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:59:6
            // NonTerminal SetComp at Python.javacc:59:6
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 59, 6);
            currentLookaheadProduction= "SetComp";
            try {
                if (!check$SetComp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:59:16
    private final boolean scan$Python_javacc$59$16() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:59:16
            // NonTerminal DictComp at Python.javacc:59:16
            pushOntoLookaheadStack("AtomicExpression", "Python.javacc", 59, 16);
            currentLookaheadProduction= "DictComp";
            try {
                if (!check$DictComp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:59:27
    private final boolean scan$Python_javacc$59$27() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$332$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:65:5
    private final boolean scan$Python_javacc$65$5() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:65:5
            Token token5382= currentLookaheadToken;
            boolean passedPredicate5382= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$65$6(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5382;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5382;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:65:18
            if (!scanToken(COLON)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:65:27
            Token token5385= currentLookaheadToken;
            boolean passedPredicate5385= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$65$28(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5385;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5385;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:65:40
            Token token5387= currentLookaheadToken;
            boolean passedPredicate5387= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$65$41(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5387;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5387;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:67:6
    private final boolean scan$Python_javacc$67$6() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:67:9
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:67:16
            if (!scanToken(COLONEQUALS)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:70:21
    private final boolean scan$Python_javacc$70$21() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:70:21
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:70:31
            // NonTerminal Slice at Python.javacc:70:31
            pushOntoLookaheadStack("Slices", "Python.javacc", 70, 31);
            currentLookaheadProduction= "Slice";
            try {
                if (!check$Slice(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:73:4
    private final boolean scan$Python_javacc$73$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$485$8(true)) return false;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:80:40
    private final boolean scan$Python_javacc$80$40() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:80:40
            if (!scanToken(SEMICOLON)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:80:50
            // NonTerminal SmallStatement at Python.javacc:80:50
            pushOntoLookaheadStack("SimpleStatement", "Python.javacc", 80, 50);
            currentLookaheadProduction= "SmallStatement";
            try {
                if (!check$SmallStatement(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:83:4
    private final boolean scan$Python_javacc$83$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$462$7(true)) return false;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:111:5
    private final boolean scan$Python_javacc$111$5() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:111:5
            // NonTerminal FunctionDefinition at Python.javacc:111:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 111, 5);
            currentLookaheadProduction= "FunctionDefinition";
            try {
                if (!check$FunctionDefinition(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:115:5
    private final boolean scan$Python_javacc$115$5() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:115:5
            // NonTerminal ClassDefinition at Python.javacc:115:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 115, 5);
            currentLookaheadProduction= "ClassDefinition";
            try {
                if (!check$ClassDefinition(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:117:5
    private final boolean scan$Python_javacc$117$5() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:117:5
            // NonTerminal WithStatement at Python.javacc:117:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 117, 5);
            currentLookaheadProduction= "WithStatement";
            try {
                if (!check$WithStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:121:5
    private final boolean scan$Python_javacc$121$5() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:121:5
            // NonTerminal ForStatement at Python.javacc:121:5
            pushOntoLookaheadStack("CompoundStatement", "Python.javacc", 121, 5);
            currentLookaheadProduction= "ForStatement";
            try {
                if (!check$ForStatement(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:159:9
    private final boolean scan$Python_javacc$159$9() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$159$14(true)) return false;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:166:45
    private final boolean scan$Python_javacc$166$45() {
        remainingLookahead= 2;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:166:52
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:166:56
            // NonTerminal WithItem at Python.javacc:166:56
            pushOntoLookaheadStack("WithItemsInParentheses", "Python.javacc", 166, 56);
            currentLookaheadProduction= "WithItem";
            try {
                if (!check$WithItem(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:185:41
    private final boolean scan$Python_javacc$185$41() {
        remainingLookahead= 2;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:185:48
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:185:52
            // NonTerminal PrimaryExpression at Python.javacc:185:52
            pushOntoLookaheadStack("DelStatement", "Python.javacc", 185, 52);
            currentLookaheadProduction= "PrimaryExpression";
            try {
                if (!check$PrimaryExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:187:21
    private final boolean scan$Python_javacc$187$21() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:187:24
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:187:31
            if (!scanToken(COLONEQUALS)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:189:22
    private final boolean scan$Python_javacc$189$22() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:189:25
            if (!scanToken(DOT)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:189:29
            if (!scanToken(NAME)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:191:32
    private final boolean scan$Python_javacc$191$32() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:191:32
            // NonTerminal ImportFrom1 at Python.javacc:191:32
            pushOntoLookaheadStack("ImportStatement", "Python.javacc", 191, 32);
            currentLookaheadProduction= "ImportFrom1";
            try {
                if (!check$ImportFrom1(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:191:46
    private final boolean scan$Python_javacc$191$46() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:191:46
            // NonTerminal ImportFrom2 at Python.javacc:191:46
            pushOntoLookaheadStack("ImportStatement", "Python.javacc", 191, 46);
            currentLookaheadProduction= "ImportFrom2";
            try {
                if (!check$ImportFrom2(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:202:26
    private final boolean scan$Python_javacc$202$26() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:202:26
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:202:30
            if (!scanToken(NAME)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:202:42
            Token token5460= currentLookaheadToken;
            boolean passedPredicate5460= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$202$43(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5460;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5460;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:204:30
    private final boolean scan$Python_javacc$204$30() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:204:30
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:204:34
            if (!scanToken(NAME)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:204:46
            Token token5465= currentLookaheadToken;
            boolean passedPredicate5465= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$204$47(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5465;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5465;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:219:35
    private final boolean scan$Python_javacc$219$35() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:219:35
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:219:45
            // NonTerminal StarExpression at Python.javacc:219:45
            pushOntoLookaheadStack("StarExpressions", "Python.javacc", 219, 45);
            currentLookaheadProduction= "StarExpression";
            try {
                if (!check$StarExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:221:45
    private final boolean scan$Python_javacc$221$45() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:221:45
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:221:55
            // NonTerminal StarNamedExpression at Python.javacc:221:55
            pushOntoLookaheadStack("StarNamedExpressions", "Python.javacc", 221, 55);
            currentLookaheadProduction= "StarNamedExpression";
            try {
                if (!check$StarNamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:255:8
    private final boolean scan$Python_javacc$255$8() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:255:8
            // NonTerminal GenExp at Python.javacc:255:8
            pushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 255, 8);
            currentLookaheadProduction= "GenExp";
            try {
                if (!check$GenExp(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:262:5
    private final boolean scan$Python_javacc$262$5() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:262:5
            if (!scanToken(YIELD)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:262:13
            if (!scanToken(FROM)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:262:25
            // NonTerminal Expression at Python.javacc:262:25
            pushOntoLookaheadStack("YieldExpression", "Python.javacc", 262, 25);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:289:10
    private final boolean scan$Python_javacc$289$10() {
        remainingLookahead= 3;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:290:10
            if (!scanToken(COMMA)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:291:10
            // NonTerminal Argument at Python.javacc:291:10
            pushOntoLookaheadStack("InvocationArguments", "Python.javacc", 291, 10);
            currentLookaheadProduction= "Argument";
            try {
                if (!check$Argument(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:292:10
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:303:4
    private final boolean scan$Python_javacc$303$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:303:4
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:305:7
            Token token5486= currentLookaheadToken;
            int remainingLookahead5486= remainingLookahead;
            boolean hitFailure5486= hitFailure, passedPredicate5486= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$305$7(false)) {
                    currentLookaheadToken= token5486;
                    remainingLookahead= remainingLookahead5486;
                    hitFailure= hitFailure5486;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!scanToken(ASSIGN)) {
                        currentLookaheadToken= token5486;
                        remainingLookahead= remainingLookahead5486;
                        hitFailure= hitFailure5486;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5486;
            }
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:311:4
            // NonTerminal Expression at Python.javacc:311:4
            pushOntoLookaheadStack("Argument", "Python.javacc", 311, 4);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:305:7
    private final boolean scan$Python_javacc$305$7() {
        remainingLookahead= 1;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:306:7
            if (!scanToken(COLONEQUALS)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:314:7
    private final boolean scan$Python_javacc$314$7() {
        remainingLookahead= 1;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:314:35
            if (!scanToken(STAR)) return false;
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:329:57
    private final boolean scan$Python_javacc$329$57() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:329:57
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:329:67
            // NonTerminal DoubleStarredKeyValuePair at Python.javacc:329:67
            pushOntoLookaheadStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 67);
            currentLookaheadProduction= "DoubleStarredKeyValuePair";
            try {
                if (!check$DoubleStarredKeyValuePair(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:391:27
    private final boolean scan$Python_javacc$391$27() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:391:27
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:391:37
            // NonTerminal StarTarget at Python.javacc:391:37
            pushOntoLookaheadStack("StarTargets", "Python.javacc", 391, 37);
            currentLookaheadProduction= "StarTarget";
            try {
                if (!check$StarTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:404:4
    private final boolean scan$Python_javacc$404$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:4
            if (!scanToken(STAR)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:8
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:17
            // NonTerminal ParamMaybeDefault at Python.javacc:404:17
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 17);
            currentLookaheadProduction= "ParamMaybeDefault";
            try {
                if (!check$ParamMaybeDefault(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrMore specified at Python.javacc:404:35
            boolean passedPredicate5554= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token5555= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$404$36(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token5555;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5554;
            }
            hitFailure= false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:404:66
            Token token5557= currentLookaheadToken;
            boolean passedPredicate5557= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$404$67(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5557;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5557;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:404:36
    private final boolean scan$Python_javacc$404$36() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:404:36
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:404:46
            // NonTerminal ParamMaybeDefault at Python.javacc:404:46
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 404, 46);
            currentLookaheadProduction= "ParamMaybeDefault";
            try {
                if (!check$ParamMaybeDefault(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:406:16
    private final boolean scan$Python_javacc$406$16() {
        remainingLookahead= 1;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Python_javacc$406$23()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:48
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:52
            // NonTerminal Expression at Python.javacc:406:52
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 52);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:406:65
    private final boolean scan$Python_javacc$406$65() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:406:65
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:406:75
            // NonTerminal ParamMaybeDefault at Python.javacc:406:75
            pushOntoLookaheadStack("StarEtc", "Python.javacc", 406, 75);
            currentLookaheadProduction= "ParamMaybeDefault";
            try {
                if (!check$ParamMaybeDefault(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:414:8
    private final boolean scan$Python_javacc$414$8() {
        remainingLookahead= 1;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (backscan$Python_javacc$414$15()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:415:8
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:415:12
            // NonTerminal Expression at Python.javacc:415:12
            pushOntoLookaheadStack("KeyWords", "Python.javacc", 415, 12);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:425:8
    private final boolean scan$Python_javacc$425$8() {
        remainingLookahead= 1;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Python_javacc$425$15()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:425:38
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:425:42
            // NonTerminal Expression at Python.javacc:425:42
            pushOntoLookaheadStack("Parameters", "Python.javacc", 425, 42);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:427:8
    private final boolean scan$Python_javacc$427$8() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:427:8
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:430:11
            Token token5577= currentLookaheadToken;
            int remainingLookahead5577= remainingLookahead;
            boolean hitFailure5577= hitFailure, passedPredicate5577= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$430$11(false)) {
                    currentLookaheadToken= token5577;
                    remainingLookahead= remainingLookahead5577;
                    hitFailure= hitFailure5577;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$433$11(false)) {
                        currentLookaheadToken= token5577;
                        remainingLookahead= remainingLookahead5577;
                        hitFailure= hitFailure5577;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5577;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:430:11
    private final boolean scan$Python_javacc$430$11() {
        remainingLookahead= 1;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:431:11
            if (!scanToken(SLASH)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for CodeBlock specified at Python.javacc:431:15
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:433:19
    private final boolean scan$Python_javacc$433$19() {
        remainingLookahead= 1;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (!backscan$Python_javacc$433$26()) return false;
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:433:49
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:433:53
            // NonTerminal Expression at Python.javacc:433:53
            pushOntoLookaheadStack("Parameters", "Python.javacc", 433, 53);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:437:14
    private final boolean scan$Python_javacc$437$14() {
        remainingLookahead= 0;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            passedPredicate= true;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:445:7
    private final boolean scan$Python_javacc$445$7() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (check$Python_javacc$445$13(true)) return false;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:464:3
    private final boolean scan$Python_javacc$464$3() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:3
            // NonTerminal SimpleAssignTarget at Python.javacc:464:3
            pushOntoLookaheadStack("Assignment", "Python.javacc", 464, 3);
            currentLookaheadProduction= "SimpleAssignTarget";
            try {
                if (!check$SimpleAssignTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:464:22
            if (!scanToken(COLON)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:464:31
            // NonTerminal Expression at Python.javacc:464:31
            pushOntoLookaheadStack("Assignment", "Python.javacc", 464, 31);
            currentLookaheadProduction= "Expression";
            try {
                if (!check$Expression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:464:42
            Token token5593= currentLookaheadToken;
            boolean passedPredicate5593= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$464$43(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5593;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5593;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:466:3
    private final boolean scan$Python_javacc$466$3() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:3
            // NonTerminal SimpleAssignTarget at Python.javacc:466:3
            pushOntoLookaheadStack("Assignment", "Python.javacc", 466, 3);
            currentLookaheadProduction= "SimpleAssignTarget";
            try {
                if (!check$SimpleAssignTarget(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:466:22
            if (!scanToken(first_set$Python_javacc$466$22)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:466:38
            Token token5599= currentLookaheadToken;
            int remainingLookahead5599= remainingLookahead;
            boolean hitFailure5599= hitFailure, passedPredicate5599= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$466$38(false)) {
                    currentLookaheadToken= token5599;
                    remainingLookahead= remainingLookahead5599;
                    hitFailure= hitFailure5599;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$466$56(false)) {
                        currentLookaheadToken= token5599;
                        remainingLookahead= remainingLookahead5599;
                        hitFailure= hitFailure5599;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5599;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:468:4
    private final boolean scan$Python_javacc$468$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:468:4
            // NonTerminal StarTargets at Python.javacc:468:4
            pushOntoLookaheadStack("Assignment", "Python.javacc", 468, 4);
            currentLookaheadProduction= "StarTargets";
            try {
                if (!check$StarTargets(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:468:16
            if (!scanToken(ASSIGN)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:508:4
    private final boolean scan$Python_javacc$508$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:508:4
            // NonTerminal OpenSequencePattern at Python.javacc:508:4
            pushOntoLookaheadStack("Patterns", "Python.javacc", 508, 4);
            currentLookaheadProduction= "OpenSequencePattern";
            try {
                if (!check$OpenSequencePattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:520:4
    private final boolean scan$Python_javacc$520$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:520:4
            // NonTerminal ClassPattern at Python.javacc:520:4
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 520, 4);
            currentLookaheadProduction= "ClassPattern";
            try {
                if (!check$ClassPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:526:4
    private final boolean scan$Python_javacc$526$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:526:6
            // NonTerminal GroupPattern at Python.javacc:526:6
            pushOntoLookaheadStack("ClosedPattern", "Python.javacc", 526, 6);
            currentLookaheadProduction= "GroupPattern";
            try {
                if (!check$GroupPattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:537:33
    private final boolean scan$Python_javacc$537$33() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:537:33
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:537:43
            // NonTerminal KeyValuePattern at Python.javacc:537:43
            pushOntoLookaheadStack("ItemsPattern", "Python.javacc", 537, 43);
            currentLookaheadProduction= "KeyValuePattern";
            try {
                if (!check$KeyValuePattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:542:24
    private final boolean scan$Python_javacc$542$24() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:542:24
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:542:34
            // NonTerminal DoubleStarPattern at Python.javacc:542:34
            pushOntoLookaheadStack("MappingPattern", "Python.javacc", 542, 34);
            currentLookaheadProduction= "DoubleStarPattern";
            try {
                if (!check$DoubleStarPattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:564:22
    private final boolean scan$Python_javacc$564$22() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:564:22
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:564:32
            // NonTerminal MaybeStarPattern at Python.javacc:564:32
            pushOntoLookaheadStack("MaybeSequencePattern", "Python.javacc", 564, 32);
            currentLookaheadProduction= "MaybeStarPattern";
            try {
                if (!check$MaybeStarPattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:574:10
    private final boolean scan$Python_javacc$574$10() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:574:10
            // NonTerminal OpenSequencePattern at Python.javacc:574:10
            pushOntoLookaheadStack("SequencePattern", "Python.javacc", 574, 10);
            currentLookaheadProduction= "OpenSequencePattern";
            try {
                if (!check$OpenSequencePattern(false)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:582:11
    private final boolean scan$Python_javacc$582$11() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (remainingLookahead<=0) {
                passedPredicate= true;
                return!hitFailure;
            }
            if (!check$Python_javacc$582$16(true)) return false;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:585:31
    private final boolean scan$Python_javacc$585$31() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:585:31
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 1;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-1;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:585:41
            // NonTerminal KeywordPatterns at Python.javacc:585:41
            pushOntoLookaheadStack("ClassPattern", "Python.javacc", 585, 41);
            currentLookaheadProduction= "KeywordPatterns";
            try {
                if (!check$KeywordPatterns(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:595:8
    private final boolean scan$Python_javacc$595$8() {
        remainingLookahead= 0;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            if (!(getToken(1).getType()== TokenType.COMMA&&!(getToken(2).getType()== TokenType.NAME&&getToken(3).getType()== TokenType.ASSIGN))) return false;
            passedPredicate= true;
            // End BuildPredicateCode macro
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:602:35
    private final boolean scan$Python_javacc$602$35() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:602:35
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 2;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead-2;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:602:45
            // NonTerminal KeywordPattern at Python.javacc:602:45
            pushOntoLookaheadStack("KeywordPatterns", "Python.javacc", 602, 45);
            currentLookaheadProduction= "KeywordPattern";
            try {
                if (!check$KeywordPattern(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // BuildPredicateRoutine: expansion at Python.javacc:609:4
    private final boolean scan$Python_javacc$609$4() {
        remainingLookahead= UNLIMITED;
        currentLookaheadToken= lastConsumedToken;
        final boolean scanToEnd= false;
        try {
            // BuildPredicateCode macro
            // End BuildPredicateCode macro
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:609:4
            // NonTerminal StarNamedExpression at Python.javacc:609:4
            pushOntoLookaheadStack("SubjectExpression", "Python.javacc", 609, 4);
            currentLookaheadProduction= "StarNamedExpression";
            try {
                if (!check$StarNamedExpression(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:609:24
            if (!scanToken(COMMA)) return false;
            if (!scanToEnd&&lookaheadStack.size()<=1) {
                if (lookaheadRoutineNesting== 0) {
                    remainingLookahead= 0;
                }
                else if (lookaheadStack.size()== 1) {
                    passedPredicateThreshold= remainingLookahead;
                }
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:609:33
            Token token5641= currentLookaheadToken;
            boolean passedPredicate5641= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$609$34(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5641;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate5641;
            }
            return true;
        }
        finally {
            lookaheadRoutineNesting= 0;
            currentLookaheadToken= null;
            hitFailure= false;
        }
    }

    // lookahead routine for lookahead at: 
    // Python.javacc:159:9
    private final boolean check$Python_javacc$159$14(boolean scanToEnd) {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:159:14
            // NonTerminal WithItemsInParentheses at Python.javacc:159:14
            pushOntoLookaheadStack("WithStatement", "Python.javacc", 159, 14);
            currentLookaheadProduction= "WithItemsInParentheses";
            try {
                if (!check$WithItemsInParentheses(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:159:37
            if (!scanToken(COLON)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // Python.javacc:240:4
    private final boolean check$Python_javacc$240$9(boolean scanToEnd) {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:240:9
            if (!scanToken(LPAREN)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:240:14
            Token token5649= currentLookaheadToken;
            int remainingLookahead5649= remainingLookahead;
            boolean hitFailure5649= hitFailure, passedPredicate5649= passedPredicate;
            try {
                passedPredicate= false;
                if (!scanToken(RPAREN)) {
                    currentLookaheadToken= token5649;
                    remainingLookahead= remainingLookahead5649;
                    hitFailure= hitFailure5649;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$240$20(false)) {
                        currentLookaheadToken= token5649;
                        remainingLookahead= remainingLookahead5649;
                        hitFailure= hitFailure5649;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5649;
            }
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // Python.javacc:332:3
    private final boolean check$Python_javacc$332$8(boolean scanToEnd) {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:332:8
            if (!scanToken(LBRACE)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:332:13
            Token token5654= currentLookaheadToken;
            int remainingLookahead5654= remainingLookahead;
            boolean hitFailure5654= hitFailure, passedPredicate5654= passedPredicate;
            try {
                passedPredicate= false;
                if (!scanToken(RBRACE)) {
                    currentLookaheadToken= token5654;
                    remainingLookahead= remainingLookahead5654;
                    hitFailure= hitFailure5654;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$332$19(false)) {
                        currentLookaheadToken= token5654;
                        remainingLookahead= remainingLookahead5654;
                        hitFailure= hitFailure5654;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5654;
            }
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // Python.javacc:445:7
    private final boolean check$Python_javacc$445$13(boolean scanToEnd) {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (!scanToken(COLON, RPAREN)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // Python.javacc:462:2
    private final boolean check$Python_javacc$462$7(boolean scanToEnd) {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ExpansionChoice specified at Python.javacc:462:7
            Token token5657= currentLookaheadToken;
            int remainingLookahead5657= remainingLookahead;
            boolean hitFailure5657= hitFailure, passedPredicate5657= passedPredicate;
            try {
                passedPredicate= false;
                if (!check$Python_javacc$462$7$(false)) {
                    currentLookaheadToken= token5657;
                    remainingLookahead= remainingLookahead5657;
                    hitFailure= hitFailure5657;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$462$51(false)) {
                        currentLookaheadToken= token5657;
                        remainingLookahead= remainingLookahead5657;
                        hitFailure= hitFailure5657;
                        return false;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate5657;
            }
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // Python.javacc:485:3
    private final boolean check$Python_javacc$485$8(boolean scanToEnd) {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:485:8
            // NonTerminal MatchStatementLA at Python.javacc:485:8
            pushOntoLookaheadStack("MatchStatement", "Python.javacc", 485, 8);
            currentLookaheadProduction= "MatchStatementLA";
            try {
                if (!check$MatchStatementLA(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    // lookahead routine for lookahead at: 
    // Python.javacc:582:11
    private final boolean check$Python_javacc$582$16(boolean scanToEnd) {
        int prevRemainingLookahead= remainingLookahead;
        boolean prevHitFailure= hitFailure;
        Token prevScanAheadToken= currentLookaheadToken;
        try {
            lookaheadRoutineNesting++;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpRef specified at Python.javacc:582:16
            if (!scanToken(NAME)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:582:23
            if (!scanToken(ASSIGN)) return false;
            return!hitFailure;
        }
        finally {
            lookaheadRoutineNesting--;
            currentLookaheadToken= prevScanAheadToken;
            remainingLookahead= prevRemainingLookahead;
            hitFailure= prevHitFailure;
        }
    }

    private final boolean backscan$Python_javacc$406$23() {
        ListIterator<NonTerminalCall> stackIterator= stackIteratorBackward();
        NonTerminalCall ntc= null;
        if (!stackIterator.hasNext()) {
            return false;
        }
        stackIterator.next();
        if (!stackIterator.hasNext()) return false;
        ntc= stackIterator.next();
        if (ntc.productionName!="FunctionDefinition") return false;
        return true;
    }

    private final boolean backscan$Python_javacc$414$15() {
        ListIterator<NonTerminalCall> stackIterator= stackIteratorBackward();
        NonTerminalCall ntc= null;
        while (stackIterator.hasNext()) {
            ntc= stackIterator.next();
            if (ntc.productionName== "LambdaDefinition") {
                stackIterator.previous();
                break;
            }
            if (!stackIterator.hasNext()) return false;
        }
        if (!stackIterator.hasNext()) return false;
        ntc= stackIterator.next();
        if (ntc.productionName!="LambdaDefinition") return false;
        return true;
    }

    private final boolean backscan$Python_javacc$425$15() {
        ListIterator<NonTerminalCall> stackIterator= stackIteratorBackward();
        NonTerminalCall ntc= null;
        if (!stackIterator.hasNext()) return false;
        ntc= stackIterator.next();
        if (ntc.productionName!="FunctionDefinition") return false;
        return true;
    }

    private final boolean backscan$Python_javacc$433$26() {
        ListIterator<NonTerminalCall> stackIterator= stackIteratorBackward();
        NonTerminalCall ntc= null;
        if (!stackIterator.hasNext()) return false;
        ntc= stackIterator.next();
        if (ntc.productionName!="FunctionDefinition") return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$SignedNumber(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:33:3
        Token token5672= currentLookaheadToken;
        boolean passedPredicate5672= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(MINUS)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5672;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5672;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:34:3
        if (!scanToken(first_set$Python_javacc$34$3)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:35:3
        Token token5675= currentLookaheadToken;
        boolean passedPredicate5675= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$35$4(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5675;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5675;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Strings(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:38:11
        if (!scanToken(STRING_LITERAL)) {
            return false;
        }
        boolean passedPredicate5678= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5679= currentLookaheadToken;
                passedPredicate= false;
                if (!scanToken(STRING_LITERAL)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5679;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5678;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$AtomicExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:41:5
        Token token5681= currentLookaheadToken;
        int remainingLookahead5681= remainingLookahead;
        boolean hitFailure5681= hitFailure, passedPredicate5681= passedPredicate;
        try {
            passedPredicate= false;
            if (!scanToken(NAME)) {
                currentLookaheadToken= token5681;
                remainingLookahead= remainingLookahead5681;
                hitFailure= hitFailure5681;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!scanToken(first_set$Python_javacc$43$5)) {
                    currentLookaheadToken= token5681;
                    remainingLookahead= remainingLookahead5681;
                    hitFailure= hitFailure5681;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$45$5(false)) {
                        currentLookaheadToken= token5681;
                        remainingLookahead= remainingLookahead5681;
                        hitFailure= hitFailure5681;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!scanToken(TRUE)) {
                            currentLookaheadToken= token5681;
                            remainingLookahead= remainingLookahead5681;
                            hitFailure= hitFailure5681;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!scanToken(FALSE)) {
                                currentLookaheadToken= token5681;
                                remainingLookahead= remainingLookahead5681;
                                hitFailure= hitFailure5681;
                                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                passedPredicate= false;
                                if (!scanToken(NONE)) {
                                    currentLookaheadToken= token5681;
                                    remainingLookahead= remainingLookahead5681;
                                    hitFailure= hitFailure5681;
                                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                    passedPredicate= false;
                                    if (!scanToken(PEG_PARSER)) {
                                        currentLookaheadToken= token5681;
                                        remainingLookahead= remainingLookahead5681;
                                        hitFailure= hitFailure5681;
                                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                        passedPredicate= false;
                                        if (!check$Python_javacc$55$5(false)) {
                                            currentLookaheadToken= token5681;
                                            remainingLookahead= remainingLookahead5681;
                                            hitFailure= hitFailure5681;
                                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                            passedPredicate= false;
                                            if (!check$Python_javacc$57$5(false)) {
                                                currentLookaheadToken= token5681;
                                                remainingLookahead= remainingLookahead5681;
                                                hitFailure= hitFailure5681;
                                                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                                passedPredicate= false;
                                                if (!check$Python_javacc$59$5(false)) {
                                                    currentLookaheadToken= token5681;
                                                    remainingLookahead= remainingLookahead5681;
                                                    hitFailure= hitFailure5681;
                                                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                                    passedPredicate= false;
                                                    if (!scanToken(ELLIPSIS)) {
                                                        currentLookaheadToken= token5681;
                                                        remainingLookahead= remainingLookahead5681;
                                                        hitFailure= hitFailure5681;
                                                        return false;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5681;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Slice(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:65:5
        Token token5683= currentLookaheadToken;
        int remainingLookahead5683= remainingLookahead;
        boolean hitFailure5683= hitFailure, passedPredicate5683= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$65$5(false)) {
                currentLookaheadToken= token5683;
                remainingLookahead= remainingLookahead5683;
                hitFailure= hitFailure5683;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$67$5(false)) {
                    currentLookaheadToken= token5683;
                    remainingLookahead= remainingLookahead5683;
                    hitFailure= hitFailure5683;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5683;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Slices(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:70:10
        if (!scanToken(LBRACKET)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:70:14
        // NonTerminal Slice at Python.javacc:70:14
        pushOntoLookaheadStack("Slices", "Python.javacc", 70, 14);
        currentLookaheadProduction= "Slice";
        try {
            if (!check$Slice(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:70:20
        boolean passedPredicate5688= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5689= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$70$21(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5689;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5688;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:70:39
        Token token5691= currentLookaheadToken;
        boolean passedPredicate5691= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5691;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5691;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:70:45
        if (!scanToken(RBRACKET)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Statement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:73:4
        Token token5694= currentLookaheadToken;
        int remainingLookahead5694= remainingLookahead;
        boolean hitFailure5694= hitFailure, passedPredicate5694= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$73$4(false)) {
                currentLookaheadToken= token5694;
                remainingLookahead= remainingLookahead5694;
                hitFailure= hitFailure5694;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$75$4(false)) {
                    currentLookaheadToken= token5694;
                    remainingLookahead= remainingLookahead5694;
                    hitFailure= hitFailure5694;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$77$4(false)) {
                        currentLookaheadToken= token5694;
                        remainingLookahead= remainingLookahead5694;
                        hitFailure= hitFailure5694;
                        return false;
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5694;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$SimpleStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:80:24
        // NonTerminal SmallStatement at Python.javacc:80:24
        pushOntoLookaheadStack("SimpleStatement", "Python.javacc", 80, 24);
        currentLookaheadProduction= "SmallStatement";
        try {
            if (!check$SmallStatement(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:80:39
        boolean passedPredicate5698= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5699= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$80$40(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5699;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5698;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:80:67
        Token token5701= currentLookaheadToken;
        boolean passedPredicate5701= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(SEMICOLON)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5701;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5701;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:80:73
        if (!scanToken(NEWLINE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$SmallStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:83:4
        Token token5704= currentLookaheadToken;
        int remainingLookahead5704= remainingLookahead;
        boolean hitFailure5704= hitFailure, passedPredicate5704= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$83$4(false)) {
                currentLookaheadToken= token5704;
                remainingLookahead= remainingLookahead5704;
                hitFailure= hitFailure5704;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$85$4(false)) {
                    currentLookaheadToken= token5704;
                    remainingLookahead= remainingLookahead5704;
                    hitFailure= hitFailure5704;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$87$4(false)) {
                        currentLookaheadToken= token5704;
                        remainingLookahead= remainingLookahead5704;
                        hitFailure= hitFailure5704;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!check$Python_javacc$89$4(false)) {
                            currentLookaheadToken= token5704;
                            remainingLookahead= remainingLookahead5704;
                            hitFailure= hitFailure5704;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!check$Python_javacc$91$4(false)) {
                                currentLookaheadToken= token5704;
                                remainingLookahead= remainingLookahead5704;
                                hitFailure= hitFailure5704;
                                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                passedPredicate= false;
                                if (!check$Python_javacc$93$4(false)) {
                                    currentLookaheadToken= token5704;
                                    remainingLookahead= remainingLookahead5704;
                                    hitFailure= hitFailure5704;
                                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                    passedPredicate= false;
                                    if (!scanToken(BREAK)) {
                                        currentLookaheadToken= token5704;
                                        remainingLookahead= remainingLookahead5704;
                                        hitFailure= hitFailure5704;
                                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                        passedPredicate= false;
                                        if (!scanToken(CONTINUE)) {
                                            currentLookaheadToken= token5704;
                                            remainingLookahead= remainingLookahead5704;
                                            hitFailure= hitFailure5704;
                                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                            passedPredicate= false;
                                            if (!scanToken(PASS)) {
                                                currentLookaheadToken= token5704;
                                                remainingLookahead= remainingLookahead5704;
                                                hitFailure= hitFailure5704;
                                                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                                passedPredicate= false;
                                                if (!check$Python_javacc$101$4(false)) {
                                                    currentLookaheadToken= token5704;
                                                    remainingLookahead= remainingLookahead5704;
                                                    hitFailure= hitFailure5704;
                                                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                                    passedPredicate= false;
                                                    if (!check$Python_javacc$103$4(false)) {
                                                        currentLookaheadToken= token5704;
                                                        remainingLookahead= remainingLookahead5704;
                                                        hitFailure= hitFailure5704;
                                                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                                        passedPredicate= false;
                                                        if (!check$Python_javacc$105$4(false)) {
                                                            currentLookaheadToken= token5704;
                                                            remainingLookahead= remainingLookahead5704;
                                                            hitFailure= hitFailure5704;
                                                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                                            passedPredicate= false;
                                                            if (!check$Python_javacc$107$4(false)) {
                                                                currentLookaheadToken= token5704;
                                                                remainingLookahead= remainingLookahead5704;
                                                                hitFailure= hitFailure5704;
                                                                return false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5704;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$CompoundStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:111:5
        Token token5706= currentLookaheadToken;
        int remainingLookahead5706= remainingLookahead;
        boolean hitFailure5706= hitFailure, passedPredicate5706= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$111$5(false)) {
                currentLookaheadToken= token5706;
                remainingLookahead= remainingLookahead5706;
                hitFailure= hitFailure5706;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$113$5(false)) {
                    currentLookaheadToken= token5706;
                    remainingLookahead= remainingLookahead5706;
                    hitFailure= hitFailure5706;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$115$5(false)) {
                        currentLookaheadToken= token5706;
                        remainingLookahead= remainingLookahead5706;
                        hitFailure= hitFailure5706;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!check$Python_javacc$117$5(false)) {
                            currentLookaheadToken= token5706;
                            remainingLookahead= remainingLookahead5706;
                            hitFailure= hitFailure5706;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!check$Python_javacc$119$5(false)) {
                                currentLookaheadToken= token5706;
                                remainingLookahead= remainingLookahead5706;
                                hitFailure= hitFailure5706;
                                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                passedPredicate= false;
                                if (!check$Python_javacc$121$5(false)) {
                                    currentLookaheadToken= token5706;
                                    remainingLookahead= remainingLookahead5706;
                                    hitFailure= hitFailure5706;
                                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                    passedPredicate= false;
                                    if (!check$Python_javacc$123$5(false)) {
                                        currentLookaheadToken= token5706;
                                        remainingLookahead= remainingLookahead5706;
                                        hitFailure= hitFailure5706;
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5706;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ReturnStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:126:19
        if (!scanToken(RETURN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:126:28
        Token token5710= currentLookaheadToken;
        boolean passedPredicate5710= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$126$29(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5710;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5710;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$GlobalStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:128:19
        if (!scanToken(GLOBAL)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:128:28
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:128:35
        boolean passedPredicate5715= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5716= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$128$36(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5716;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5715;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$NonlocalStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:130:21
        if (!scanToken(NONLOCAL)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:130:32
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:130:39
        boolean passedPredicate5721= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5722= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$130$40(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5722;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5721;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$AssertStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:132:19
        if (!scanToken(_ASSERT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:132:28
        // NonTerminal Expression at Python.javacc:132:28
        pushOntoLookaheadStack("AssertStatement", "Python.javacc", 132, 28);
        currentLookaheadProduction= "Expression";
        try {
            if (!check$Expression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:132:39
        boolean passedPredicate5727= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5728= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$132$40(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5728;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5727;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$RaiseStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:134:18
        if (!scanToken(RAISE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:134:26
        Token token5732= currentLookaheadToken;
        boolean passedPredicate5732= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$134$28(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5732;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5732;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Block(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:137:5
        Token token5734= currentLookaheadToken;
        int remainingLookahead5734= remainingLookahead;
        boolean hitFailure5734= hitFailure, passedPredicate5734= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$137$5(false)) {
                currentLookaheadToken= token5734;
                remainingLookahead= remainingLookahead5734;
                hitFailure= hitFailure5734;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$139$5(false)) {
                    currentLookaheadToken= token5734;
                    remainingLookahead= remainingLookahead5734;
                    hitFailure= hitFailure5734;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5734;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ElseBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:142:13
        if (!scanToken(ELSE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:142:20
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:142:24
        // NonTerminal Block at Python.javacc:142:24
        pushOntoLookaheadStack("ElseBlock", "Python.javacc", 142, 24);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ExceptBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:144:15
        if (!scanToken(EXCEPT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:144:24
        Token token5742= currentLookaheadToken;
        boolean passedPredicate5742= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$144$26(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5742;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5742;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:144:59
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:144:63
        // NonTerminal Block at Python.javacc:144:63
        pushOntoLookaheadStack("ExceptBlock", "Python.javacc", 144, 63);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$IfStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:147:5
        if (!scanToken(IF)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:147:10
        // NonTerminal NamedExpression at Python.javacc:147:10
        pushOntoLookaheadStack("IfStatement", "Python.javacc", 147, 10);
        currentLookaheadProduction= "NamedExpression";
        try {
            if (!check$NamedExpression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:147:26
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:147:30
        // NonTerminal Block at Python.javacc:147:30
        pushOntoLookaheadStack("IfStatement", "Python.javacc", 147, 30);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:148:6
        boolean passedPredicate5751= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5752= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$148$7(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5752;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5751;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:149:6
        Token token5754= currentLookaheadToken;
        boolean passedPredicate5754= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$149$7(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5754;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5754;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$FinallyBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:152:16
        if (!scanToken(FINALLY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:152:26
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:152:30
        // NonTerminal Block at Python.javacc:152:30
        pushOntoLookaheadStack("FinallyBlock", "Python.javacc", 152, 30);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$WhileStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:154:18
        if (!scanToken(WHILE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:154:26
        // NonTerminal NamedExpression at Python.javacc:154:26
        pushOntoLookaheadStack("WhileStatement", "Python.javacc", 154, 26);
        currentLookaheadProduction= "NamedExpression";
        try {
            if (!check$NamedExpression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:154:42
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:154:46
        // NonTerminal Block at Python.javacc:154:46
        pushOntoLookaheadStack("WhileStatement", "Python.javacc", 154, 46);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:154:52
        Token token5765= currentLookaheadToken;
        boolean passedPredicate5765= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$154$53(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5765;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5765;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$WithStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:157:5
        Token token5768= currentLookaheadToken;
        boolean passedPredicate5768= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(ASYNC)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5768;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5768;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:157:15
        if (!scanToken(WITH)) return false;
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:159:9
        Token token5772= currentLookaheadToken;
        int remainingLookahead5772= remainingLookahead;
        boolean hitFailure5772= hitFailure, passedPredicate5772= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$159$9(false)) {
                currentLookaheadToken= token5772;
                remainingLookahead= remainingLookahead5772;
                hitFailure= hitFailure5772;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$161$9(false)) {
                    currentLookaheadToken= token5772;
                    remainingLookahead= remainingLookahead5772;
                    hitFailure= hitFailure5772;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5772;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:163:5
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:163:9
        // NonTerminal Block at Python.javacc:163:9
        pushOntoLookaheadStack("WithStatement", "Python.javacc", 163, 9);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$WithItemsInParentheses(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:166:31
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:166:35
        // NonTerminal WithItem at Python.javacc:166:35
        pushOntoLookaheadStack("WithItemsInParentheses", "Python.javacc", 166, 35);
        currentLookaheadProduction= "WithItem";
        try {
            if (!check$WithItem(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:166:44
        boolean passedPredicate5779= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5780= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$166$45(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5780;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5779;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:166:67
        Token token5782= currentLookaheadToken;
        boolean passedPredicate5782= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5782;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5782;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:166:73
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$WithItem(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:168:12
        // NonTerminal Expression at Python.javacc:168:12
        pushOntoLookaheadStack("WithItem", "Python.javacc", 168, 12);
        currentLookaheadProduction= "Expression";
        try {
            if (!check$Expression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:168:23
        Token token5787= currentLookaheadToken;
        boolean passedPredicate5787= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$168$24(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5787;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5787;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ForStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:171:4
        Token token5790= currentLookaheadToken;
        boolean passedPredicate5790= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(ASYNC)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5790;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5790;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:171:14
        if (!scanToken(FOR)) return false;
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:172:4
        // NonTerminal StarTargets at Python.javacc:172:4
        pushOntoLookaheadStack("ForStatement", "Python.javacc", 172, 4);
        currentLookaheadProduction= "StarTargets";
        try {
            if (!check$StarTargets(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:172:16
        if (!scanToken(IN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:172:21
        // NonTerminal StarExpressions at Python.javacc:172:21
        pushOntoLookaheadStack("ForStatement", "Python.javacc", 172, 21);
        currentLookaheadProduction= "StarExpressions";
        try {
            if (!check$StarExpressions(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:172:37
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:173:4
        // NonTerminal Block at Python.javacc:173:4
        pushOntoLookaheadStack("ForStatement", "Python.javacc", 173, 4);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:173:10
        Token token5798= currentLookaheadToken;
        boolean passedPredicate5798= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$173$11(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5798;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5798;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$TryStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:177:4
        if (!scanToken(TRY)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:177:10
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:177:14
        // NonTerminal Block at Python.javacc:177:14
        pushOntoLookaheadStack("TryStatement", "Python.javacc", 177, 14);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:179:8
        Token token5805= currentLookaheadToken;
        int remainingLookahead5805= remainingLookahead;
        boolean hitFailure5805= hitFailure, passedPredicate5805= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$179$8(false)) {
                currentLookaheadToken= token5805;
                remainingLookahead= remainingLookahead5805;
                hitFailure= hitFailure5805;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$181$8(false)) {
                    currentLookaheadToken= token5805;
                    remainingLookahead= remainingLookahead5805;
                    hitFailure= hitFailure5805;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5805;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$DelStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:185:16
        if (!scanToken(DEL)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:185:22
        // NonTerminal PrimaryExpression at Python.javacc:185:22
        pushOntoLookaheadStack("DelStatement", "Python.javacc", 185, 22);
        currentLookaheadProduction= "PrimaryExpression";
        try {
            if (!check$PrimaryExpression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:185:40
        boolean passedPredicate5810= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5811= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$185$41(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5811;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5810;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:185:72
        Token token5813= currentLookaheadToken;
        boolean passedPredicate5813= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5813;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5813;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$NamedExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:187:19
        Token token5816= currentLookaheadToken;
        boolean passedPredicate5816= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$187$21(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5816;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5816;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:187:38
        // NonTerminal Expression at Python.javacc:187:38
        pushOntoLookaheadStack("NamedExpression", "Python.javacc", 187, 38);
        currentLookaheadProduction= "Expression";
        try {
            if (!check$Expression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$DottedName(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:189:14
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:189:21
        boolean passedPredicate5821= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5822= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$189$22(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5822;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5821;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ImportStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:191:19
        Token token5824= currentLookaheadToken;
        int remainingLookahead5824= remainingLookahead;
        boolean hitFailure5824= hitFailure, passedPredicate5824= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$191$19(false)) {
                currentLookaheadToken= token5824;
                remainingLookahead= remainingLookahead5824;
                hitFailure= hitFailure5824;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$191$32(false)) {
                    currentLookaheadToken= token5824;
                    remainingLookahead= remainingLookahead5824;
                    hitFailure= hitFailure5824;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$191$46(false)) {
                        currentLookaheadToken= token5824;
                        remainingLookahead= remainingLookahead5824;
                        hitFailure= hitFailure5824;
                        return false;
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5824;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ImportName(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:193:19
        if (!scanToken(IMPORT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:193:28
        // NonTerminal DottedName at Python.javacc:193:28
        pushOntoLookaheadStack("ImportName", "Python.javacc", 193, 28);
        currentLookaheadProduction= "DottedName";
        try {
            if (!check$DottedName(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:193:39
        Token token5829= currentLookaheadToken;
        boolean passedPredicate5829= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$193$40(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5829;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5829;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:193:53
        boolean passedPredicate5831= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5832= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$193$54(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5832;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5831;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ImportFrom1(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:195:20
        if (!scanToken(FROM)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:195:27
        boolean passedPredicate5836= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5837= currentLookaheadToken;
                passedPredicate= false;
                if (!scanToken(DOT, ELLIPSIS)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5837;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5836;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:195:42
        // NonTerminal DottedName at Python.javacc:195:42
        pushOntoLookaheadStack("ImportFrom1", "Python.javacc", 195, 42);
        currentLookaheadProduction= "DottedName";
        try {
            if (!check$DottedName(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:195:58
        if (!scanToken(IMPORT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:195:68
        // NonTerminal ImportFromTargets at Python.javacc:195:68
        pushOntoLookaheadStack("ImportFrom1", "Python.javacc", 195, 68);
        currentLookaheadProduction= "ImportFromTargets";
        try {
            if (!check$ImportFromTargets(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ImportFrom2(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:197:20
        if (!scanToken(FROM)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:197:27
        if (!scanToken(DOT, ELLIPSIS)) {
            return false;
        }
        boolean passedPredicate5844= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5845= currentLookaheadToken;
                passedPredicate= false;
                if (!scanToken(DOT, ELLIPSIS)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5845;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5844;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:197:42
        if (!scanToken(IMPORT)) return false;
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:197:56
        // NonTerminal ImportFromTargets at Python.javacc:197:56
        pushOntoLookaheadStack("ImportFrom2", "Python.javacc", 197, 56);
        currentLookaheadProduction= "ImportFromTargets";
        try {
            if (!check$ImportFromTargets(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ImportFromTargets(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:200:4
        Token token5849= currentLookaheadToken;
        int remainingLookahead5849= remainingLookahead;
        boolean hitFailure5849= hitFailure, passedPredicate5849= passedPredicate;
        try {
            passedPredicate= false;
            if (!scanToken(STAR)) {
                currentLookaheadToken= token5849;
                remainingLookahead= remainingLookahead5849;
                hitFailure= hitFailure5849;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$202$4(false)) {
                    currentLookaheadToken= token5849;
                    remainingLookahead= remainingLookahead5849;
                    hitFailure= hitFailure5849;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$204$4(false)) {
                        currentLookaheadToken= token5849;
                        remainingLookahead= remainingLookahead5849;
                        hitFailure= hitFailure5849;
                        return false;
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5849;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarNamedExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:208:6
        Token token5851= currentLookaheadToken;
        int remainingLookahead5851= remainingLookahead;
        boolean hitFailure5851= hitFailure, passedPredicate5851= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$208$6(false)) {
                currentLookaheadToken= token5851;
                remainingLookahead= remainingLookahead5851;
                hitFailure= hitFailure5851;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$210$6(false)) {
                    currentLookaheadToken= token5851;
                    remainingLookahead= remainingLookahead5851;
                    hitFailure= hitFailure5851;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5851;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:214:5
        Token token5853= currentLookaheadToken;
        int remainingLookahead5853= remainingLookahead;
        boolean hitFailure5853= hitFailure, passedPredicate5853= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$214$5(false)) {
                currentLookaheadToken= token5853;
                remainingLookahead= remainingLookahead5853;
                hitFailure= hitFailure5853;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$216$5(false)) {
                    currentLookaheadToken= token5853;
                    remainingLookahead= remainingLookahead5853;
                    hitFailure= hitFailure5853;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5853;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarExpressions(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:219:19
        // NonTerminal StarExpression at Python.javacc:219:19
        pushOntoLookaheadStack("StarExpressions", "Python.javacc", 219, 19);
        currentLookaheadProduction= "StarExpression";
        try {
            if (!check$StarExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:219:34
        boolean passedPredicate5857= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5858= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$219$35(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5858;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5857;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:219:62
        Token token5860= currentLookaheadToken;
        boolean passedPredicate5860= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5860;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5860;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarNamedExpressions(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:221:24
        // NonTerminal StarNamedExpression at Python.javacc:221:24
        pushOntoLookaheadStack("StarNamedExpressions", "Python.javacc", 221, 24);
        currentLookaheadProduction= "StarNamedExpression";
        try {
            if (!check$StarNamedExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:221:44
        boolean passedPredicate5864= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5865= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$221$45(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5865;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5864;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:221:77
        Token token5867= currentLookaheadToken;
        boolean passedPredicate5867= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5867;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5867;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$BitwiseOr(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:223:13
        // NonTerminal BitwiseXor at Python.javacc:223:13
        pushOntoLookaheadStack("BitwiseOr", "Python.javacc", 223, 13);
        currentLookaheadProduction= "BitwiseXor";
        try {
            if (!check$BitwiseXor(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:223:24
        boolean passedPredicate5871= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5872= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$223$25(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5872;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5871;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$BitwiseXor(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:225:14
        // NonTerminal BitwiseAnd at Python.javacc:225:14
        pushOntoLookaheadStack("BitwiseXor", "Python.javacc", 225, 14);
        currentLookaheadProduction= "BitwiseAnd";
        try {
            if (!check$BitwiseAnd(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:225:25
        boolean passedPredicate5876= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5877= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$225$26(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5877;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5876;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$BitwiseAnd(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:227:14
        // NonTerminal ShiftExpression at Python.javacc:227:14
        pushOntoLookaheadStack("BitwiseAnd", "Python.javacc", 227, 14);
        currentLookaheadProduction= "ShiftExpression";
        try {
            if (!check$ShiftExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:227:30
        boolean passedPredicate5881= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5882= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$227$31(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5882;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5881;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ShiftExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:229:19
        // NonTerminal AdditiveExpression at Python.javacc:229:19
        pushOntoLookaheadStack("ShiftExpression", "Python.javacc", 229, 19);
        currentLookaheadProduction= "AdditiveExpression";
        try {
            if (!check$AdditiveExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:229:38
        boolean passedPredicate5886= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5887= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$229$39(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5887;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5886;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$AdditiveExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:231:22
        // NonTerminal MultiplicativeExpression at Python.javacc:231:22
        pushOntoLookaheadStack("AdditiveExpression", "Python.javacc", 231, 22);
        currentLookaheadProduction= "MultiplicativeExpression";
        try {
            if (!check$MultiplicativeExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:231:47
        boolean passedPredicate5891= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5892= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$231$48(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5892;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5891;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$MultiplicativeExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:233:28
        // NonTerminal UnaryExpression at Python.javacc:233:28
        pushOntoLookaheadStack("MultiplicativeExpression", "Python.javacc", 233, 28);
        currentLookaheadProduction= "UnaryExpression";
        try {
            if (!check$UnaryExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:233:44
        boolean passedPredicate5896= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5897= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$233$45(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5897;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5896;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$UnaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:235:19
        Token token5899= currentLookaheadToken;
        int remainingLookahead5899= remainingLookahead;
        boolean hitFailure5899= hitFailure, passedPredicate5899= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$235$19(false)) {
                currentLookaheadToken= token5899;
                remainingLookahead= remainingLookahead5899;
                hitFailure= hitFailure5899;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$235$27(false)) {
                    currentLookaheadToken= token5899;
                    remainingLookahead= remainingLookahead5899;
                    hitFailure= hitFailure5899;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5899;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Power(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:237:9
        // NonTerminal AwaitPrimary at Python.javacc:237:9
        pushOntoLookaheadStack("Power", "Python.javacc", 237, 9);
        currentLookaheadProduction= "AwaitPrimary";
        try {
            if (!check$AwaitPrimary(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:237:22
        Token token5903= currentLookaheadToken;
        boolean passedPredicate5903= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$237$23(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5903;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5903;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Tuple(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:241:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:241:9
        Token token5907= currentLookaheadToken;
        boolean passedPredicate5907= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$241$10(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5907;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5907;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:241:58
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Group(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:244:9
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:244:14
        Token token5913= currentLookaheadToken;
        int remainingLookahead5913= remainingLookahead;
        boolean hitFailure5913= hitFailure, passedPredicate5913= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$244$14(false)) {
                currentLookaheadToken= token5913;
                remainingLookahead= remainingLookahead5913;
                hitFailure= hitFailure5913;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$244$32(false)) {
                    currentLookaheadToken= token5913;
                    remainingLookahead= remainingLookahead5913;
                    hitFailure= hitFailure5913;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5913;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:244:49
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$AwaitPrimary(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:246:16
        Token token5917= currentLookaheadToken;
        boolean passedPredicate5917= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(AWAIT)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5917;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5917;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:246:26
        // NonTerminal PrimaryExpression at Python.javacc:246:26
        pushOntoLookaheadStack("AwaitPrimary", "Python.javacc", 246, 26);
        currentLookaheadProduction= "PrimaryExpression";
        try {
            if (!check$PrimaryExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$PrimaryExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:249:4
        // NonTerminal AtomicExpression at Python.javacc:249:4
        pushOntoLookaheadStack("PrimaryExpression", "Python.javacc", 249, 4);
        currentLookaheadProduction= "AtomicExpression";
        try {
            if (!check$AtomicExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:250:4
        boolean passedPredicate5922= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5923= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$251$8(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5923;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5922;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$YieldExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:262:5
        Token token5925= currentLookaheadToken;
        int remainingLookahead5925= remainingLookahead;
        boolean hitFailure5925= hitFailure, passedPredicate5925= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$262$5(false)) {
                currentLookaheadToken= token5925;
                remainingLookahead= remainingLookahead5925;
                hitFailure= hitFailure5925;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$264$5(false)) {
                    currentLookaheadToken= token5925;
                    remainingLookahead= remainingLookahead5925;
                    hitFailure= hitFailure5925;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5925;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$YieldStatement(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:267:19
        // NonTerminal YieldExpression at Python.javacc:267:19
        pushOntoLookaheadStack("YieldStatement", "Python.javacc", 267, 19);
        currentLookaheadProduction= "YieldExpression";
        try {
            if (!check$YieldExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$AnnotatedRhs(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:269:16
        Token token5929= currentLookaheadToken;
        int remainingLookahead5929= remainingLookahead;
        boolean hitFailure5929= hitFailure, passedPredicate5929= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$269$16(false)) {
                currentLookaheadToken= token5929;
                remainingLookahead= remainingLookahead5929;
                hitFailure= hitFailure5929;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$269$34(false)) {
                    currentLookaheadToken= token5929;
                    remainingLookahead= remainingLookahead5929;
                    hitFailure= hitFailure5929;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5929;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Decorators(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:271:14
        if (!check$Python_javacc$271$15(false)) {
            return false;
        }
        boolean passedPredicate5932= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5933= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$271$15(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5933;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5932;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$InvocationArguments(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:276:4
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:277:4
        Token token5940= currentLookaheadToken;
        boolean passedPredicate5940= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$278$7(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5940;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5940;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:299:4
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Argument(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:303:4
        Token token5943= currentLookaheadToken;
        int remainingLookahead5943= remainingLookahead;
        boolean hitFailure5943= hitFailure, passedPredicate5943= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$303$4(false)) {
                currentLookaheadToken= token5943;
                remainingLookahead= remainingLookahead5943;
                hitFailure= hitFailure5943;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$313$4(false)) {
                    currentLookaheadToken= token5943;
                    remainingLookahead= remainingLookahead5943;
                    hitFailure= hitFailure5943;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5943;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$KeyValuePair(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:321:16
        // NonTerminal Expression at Python.javacc:321:16
        pushOntoLookaheadStack("KeyValuePair", "Python.javacc", 321, 16);
        currentLookaheadProduction= "Expression";
        try {
            if (!check$Expression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:321:27
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:321:31
        // NonTerminal Expression at Python.javacc:321:31
        pushOntoLookaheadStack("KeyValuePair", "Python.javacc", 321, 31);
        currentLookaheadProduction= "Expression";
        try {
            if (!check$Expression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$DoubleStarredKeyValuePair(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:324:5
        Token token5949= currentLookaheadToken;
        int remainingLookahead5949= remainingLookahead;
        boolean hitFailure5949= hitFailure, passedPredicate5949= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$324$5(false)) {
                currentLookaheadToken= token5949;
                remainingLookahead= remainingLookahead5949;
                hitFailure= hitFailure5949;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$326$5(false)) {
                    currentLookaheadToken= token5949;
                    remainingLookahead= remainingLookahead5949;
                    hitFailure= hitFailure5949;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5949;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$DoubleStarredKeyValuePairs(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:329:30
        // NonTerminal DoubleStarredKeyValuePair at Python.javacc:329:30
        pushOntoLookaheadStack("DoubleStarredKeyValuePairs", "Python.javacc", 329, 30);
        currentLookaheadProduction= "DoubleStarredKeyValuePair";
        try {
            if (!check$DoubleStarredKeyValuePair(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:329:56
        boolean passedPredicate5953= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5954= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$329$57(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5954;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5953;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:329:95
        Token token5956= currentLookaheadToken;
        boolean passedPredicate5956= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5956;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5956;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Dict(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:334:5
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:335:5
        Token token5962= currentLookaheadToken;
        boolean passedPredicate5962= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$335$6(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5962;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5962;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:336:5
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$DictComp(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:340:12
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:340:16
        // NonTerminal KeyValuePair at Python.javacc:340:16
        pushOntoLookaheadStack("DictComp", "Python.javacc", 340, 16);
        currentLookaheadProduction= "KeyValuePair";
        try {
            if (!check$KeyValuePair(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 2;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead-2;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:340:35
        if (!check$Python_javacc$340$36(false)) {
            return false;
        }
        boolean passedPredicate5968= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5969= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$340$36(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5969;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5968;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:340:50
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Set(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:342:7
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:342:11
        // NonTerminal StarNamedExpressions at Python.javacc:342:11
        pushOntoLookaheadStack("Set", "Python.javacc", 342, 11);
        currentLookaheadProduction= "StarNamedExpressions";
        try {
            if (!check$StarNamedExpressions(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:342:32
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$SetComp(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:344:11
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:344:15
        // NonTerminal NamedExpression at Python.javacc:344:15
        pushOntoLookaheadStack("SetComp", "Python.javacc", 344, 15);
        currentLookaheadProduction= "NamedExpression";
        try {
            if (!check$NamedExpression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 2;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead-2;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:344:37
        if (!check$Python_javacc$344$38(false)) {
            return false;
        }
        boolean passedPredicate5979= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token5980= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$344$38(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token5980;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate5979;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:344:52
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ClassDefinition(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:347:5
        Token token5984= currentLookaheadToken;
        boolean passedPredicate5984= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$347$6(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5984;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5984;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:347:18
        if (!scanToken(CLASS)) return false;
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:348:5
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:348:12
        Token token5988= currentLookaheadToken;
        boolean passedPredicate5988= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$348$13(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5988;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5988;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:349:5
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:350:5
        // NonTerminal Block at Python.javacc:350:5
        pushOntoLookaheadStack("ClassDefinition", "Python.javacc", 350, 5);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$FunctionDefinition(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:354:5
        Token token5993= currentLookaheadToken;
        boolean passedPredicate5993= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$354$6(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5993;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5993;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:355:5
        Token token5995= currentLookaheadToken;
        boolean passedPredicate5995= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(ASYNC)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token5995;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate5995;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:356:5
        if (!scanToken(DEF)) return false;
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:357:5
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:358:5
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:359:5
        // NonTerminal Parameters at Python.javacc:359:5
        pushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 359, 5);
        currentLookaheadProduction= "Parameters";
        try {
            if (!check$Parameters(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:360:5
        if (!scanToken(RPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:361:5
        Token token6002= currentLookaheadToken;
        boolean passedPredicate6002= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$361$6(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6002;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6002;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:362:5
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:362:9
        // NonTerminal Block at Python.javacc:362:9
        pushOntoLookaheadStack("FunctionDefinition", "Python.javacc", 362, 9);
        currentLookaheadProduction= "Block";
        try {
            if (!check$Block(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$LambdaDefinition(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:365:20
        if (!scanToken(LAMBDA)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:365:29
        // NonTerminal Parameters at Python.javacc:365:29
        pushOntoLookaheadStack("LambdaDefinition", "Python.javacc", 365, 29);
        currentLookaheadProduction= "Parameters";
        try {
            if (!check$Parameters(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:365:40
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:365:44
        // NonTerminal Expression at Python.javacc:365:44
        pushOntoLookaheadStack("LambdaDefinition", "Python.javacc", 365, 44);
        currentLookaheadProduction= "Expression";
        try {
            if (!check$Expression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Expression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:371:14
        Token token6011= currentLookaheadToken;
        int remainingLookahead6011= remainingLookahead;
        boolean hitFailure6011= hitFailure, passedPredicate6011= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$371$14(false)) {
                currentLookaheadToken= token6011;
                remainingLookahead= remainingLookahead6011;
                hitFailure= hitFailure6011;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$371$65(false)) {
                    currentLookaheadToken= token6011;
                    remainingLookahead= remainingLookahead6011;
                    hitFailure= hitFailure6011;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6011;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Disjunction(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:373:15
        // NonTerminal Conjunction at Python.javacc:373:15
        pushOntoLookaheadStack("Disjunction", "Python.javacc", 373, 15);
        currentLookaheadProduction= "Conjunction";
        try {
            if (!check$Conjunction(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:373:27
        boolean passedPredicate6015= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6016= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$373$28(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6016;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6015;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Conjunction(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:375:15
        // NonTerminal Inversion at Python.javacc:375:15
        pushOntoLookaheadStack("Conjunction", "Python.javacc", 375, 15);
        currentLookaheadProduction= "Inversion";
        try {
            if (!check$Inversion(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:375:25
        boolean passedPredicate6020= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6021= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$375$26(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6021;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6020;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Inversion(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:377:13
        boolean passedPredicate6024= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6025= currentLookaheadToken;
                passedPredicate= false;
                if (!scanToken(NOT)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6025;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6024;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:377:22
        // NonTerminal Comparison at Python.javacc:377:22
        pushOntoLookaheadStack("Inversion", "Python.javacc", 377, 22);
        currentLookaheadProduction= "Comparison";
        try {
            if (!check$Comparison(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Comparison(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:379:14
        // NonTerminal BitwiseOr at Python.javacc:379:14
        pushOntoLookaheadStack("Comparison", "Python.javacc", 379, 14);
        currentLookaheadProduction= "BitwiseOr";
        try {
            if (!check$BitwiseOr(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:379:24
        boolean passedPredicate6030= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6031= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$379$25(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6031;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6030;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ComparisonOperator(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:382:4
        Token token6033= currentLookaheadToken;
        int remainingLookahead6033= remainingLookahead;
        boolean hitFailure6033= hitFailure, passedPredicate6033= passedPredicate;
        try {
            passedPredicate= false;
            if (!scanToken(LT)) {
                currentLookaheadToken= token6033;
                remainingLookahead= remainingLookahead6033;
                hitFailure= hitFailure6033;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!scanToken(GT)) {
                    currentLookaheadToken= token6033;
                    remainingLookahead= remainingLookahead6033;
                    hitFailure= hitFailure6033;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!scanToken(EQ)) {
                        currentLookaheadToken= token6033;
                        remainingLookahead= remainingLookahead6033;
                        hitFailure= hitFailure6033;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!scanToken(GE)) {
                            currentLookaheadToken= token6033;
                            remainingLookahead= remainingLookahead6033;
                            hitFailure= hitFailure6033;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!scanToken(LE)) {
                                currentLookaheadToken= token6033;
                                remainingLookahead= remainingLookahead6033;
                                hitFailure= hitFailure6033;
                                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                passedPredicate= false;
                                if (!scanToken(NE)) {
                                    currentLookaheadToken= token6033;
                                    remainingLookahead= remainingLookahead6033;
                                    hitFailure= hitFailure6033;
                                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                    passedPredicate= false;
                                    if (!check$Python_javacc$384$4(false)) {
                                        currentLookaheadToken= token6033;
                                        remainingLookahead= remainingLookahead6033;
                                        hitFailure= hitFailure6033;
                                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                        passedPredicate= false;
                                        if (!check$Python_javacc$386$4(false)) {
                                            currentLookaheadToken= token6033;
                                            remainingLookahead= remainingLookahead6033;
                                            hitFailure= hitFailure6033;
                                            return false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6033;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarTarget(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:389:14
        Token token6036= currentLookaheadToken;
        boolean passedPredicate6036= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(STAR)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6036;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6036;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:389:20
        // NonTerminal PrimaryExpression at Python.javacc:389:20
        pushOntoLookaheadStack("StarTarget", "Python.javacc", 389, 20);
        currentLookaheadProduction= "PrimaryExpression";
        try {
            if (!check$PrimaryExpression(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarTargets(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:391:15
        // NonTerminal StarTarget at Python.javacc:391:15
        pushOntoLookaheadStack("StarTargets", "Python.javacc", 391, 15);
        currentLookaheadProduction= "StarTarget";
        try {
            if (!check$StarTarget(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:391:26
        boolean passedPredicate6041= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6042= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$391$27(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6042;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6041;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:391:50
        Token token6044= currentLookaheadToken;
        boolean passedPredicate6044= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6044;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6044;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ForIfClause(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:393:15
        Token token6047= currentLookaheadToken;
        boolean passedPredicate6047= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(ASYNC)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6047;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6047;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:393:25
        if (!scanToken(FOR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:393:31
        // NonTerminal StarTargets at Python.javacc:393:31
        pushOntoLookaheadStack("ForIfClause", "Python.javacc", 393, 31);
        currentLookaheadProduction= "StarTargets";
        try {
            if (!check$StarTargets(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:393:43
        if (!scanToken(IN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:393:48
        // NonTerminal Disjunction at Python.javacc:393:48
        pushOntoLookaheadStack("ForIfClause", "Python.javacc", 393, 48);
        currentLookaheadProduction= "Disjunction";
        try {
            if (!check$Disjunction(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:393:60
        boolean passedPredicate6053= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6054= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$393$61(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6054;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6053;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$GenExp(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:395:10
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:395:14
        // NonTerminal NamedExpression at Python.javacc:395:14
        pushOntoLookaheadStack("GenExp", "Python.javacc", 395, 14);
        currentLookaheadProduction= "NamedExpression";
        try {
            if (!check$NamedExpression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 2;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead-2;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:395:36
        if (!check$Python_javacc$395$37(false)) {
            return false;
        }
        boolean passedPredicate6059= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6060= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$395$37(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6060;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6059;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:395:51
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$List(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:397:8
        if (!scanToken(LBRACKET)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:397:12
        Token token6065= currentLookaheadToken;
        boolean passedPredicate6065= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$397$13(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6065;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6065;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:397:35
        if (!scanToken(RBRACKET)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ListComp(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:399:12
        if (!scanToken(LBRACKET)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:399:16
        // NonTerminal NamedExpression at Python.javacc:399:16
        pushOntoLookaheadStack("ListComp", "Python.javacc", 399, 16);
        currentLookaheadProduction= "NamedExpression";
        try {
            if (!check$NamedExpression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 2;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead-2;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:399:38
        if (!check$Python_javacc$399$39(false)) {
            return false;
        }
        boolean passedPredicate6071= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6072= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$399$39(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6072;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6071;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:399:53
        if (!scanToken(RBRACKET)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarEtc(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:402:4
        Token token6075= currentLookaheadToken;
        int remainingLookahead6075= remainingLookahead;
        boolean hitFailure6075= hitFailure, passedPredicate6075= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$402$4(false)) {
                currentLookaheadToken= token6075;
                remainingLookahead= remainingLookahead6075;
                hitFailure= hitFailure6075;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$404$4(false)) {
                    currentLookaheadToken= token6075;
                    remainingLookahead= remainingLookahead6075;
                    hitFailure= hitFailure6075;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$406$4(false)) {
                        currentLookaheadToken= token6075;
                        remainingLookahead= remainingLookahead6075;
                        hitFailure= hitFailure6075;
                        return false;
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6075;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ParamMaybeDefault(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:409:21
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:409:28
        Token token6079= currentLookaheadToken;
        boolean passedPredicate6079= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$409$29(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6079;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6079;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:409:45
        Token token6081= currentLookaheadToken;
        boolean passedPredicate6081= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$409$46(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6081;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6081;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$KeyWords(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:412:4
        if (!scanToken(STAR_STAR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:412:9
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:413:4
        Token token6086= currentLookaheadToken;
        boolean passedPredicate6086= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$414$8(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6086;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6086;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Parameters(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:421:5
        Token token6089= currentLookaheadToken;
        boolean passedPredicate6089= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$422$7(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6089;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6089;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:444:5
        Token token6091= currentLookaheadToken;
        boolean passedPredicate6091= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$445$7(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6091;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6091;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:447:5
        Token token6093= currentLookaheadToken;
        boolean passedPredicate6093= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6093;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6093;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$SimpleAssignTarget(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:456:4
        Token token6096= currentLookaheadToken;
        int remainingLookahead6096= remainingLookahead;
        boolean hitFailure6096= hitFailure, passedPredicate6096= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$456$4(false)) {
                currentLookaheadToken= token6096;
                remainingLookahead= remainingLookahead6096;
                hitFailure= hitFailure6096;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$458$4(false)) {
                    currentLookaheadToken= token6096;
                    remainingLookahead= remainingLookahead6096;
                    hitFailure= hitFailure6096;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6096;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Assignment(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:464:3
        Token token6100= currentLookaheadToken;
        int remainingLookahead6100= remainingLookahead;
        boolean hitFailure6100= hitFailure, passedPredicate6100= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$464$3(false)) {
                currentLookaheadToken= token6100;
                remainingLookahead= remainingLookahead6100;
                hitFailure= hitFailure6100;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$466$3(false)) {
                    currentLookaheadToken= token6100;
                    remainingLookahead= remainingLookahead6100;
                    hitFailure= hitFailure6100;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$468$3(false)) {
                        currentLookaheadToken= token6100;
                        remainingLookahead= remainingLookahead6100;
                        hitFailure= hitFailure6100;
                        return false;
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6100;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$MatchStatementLA(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:476:4
        Token token6102= currentLookaheadToken;
        int remainingLookahead6102= remainingLookahead;
        boolean hitFailure6102= hitFailure, passedPredicate6102= passedPredicate;
        try {
            passedPredicate= false;
            if (!scanToken(MATCH)) {
                currentLookaheadToken= token6102;
                remainingLookahead= remainingLookahead6102;
                hitFailure= hitFailure6102;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$478$4(false)) {
                    currentLookaheadToken= token6102;
                    remainingLookahead= remainingLookahead6102;
                    hitFailure= hitFailure6102;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6102;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$MatchStatement(boolean scanToEnd) {
        EnumSet<TokenType> previousActives6105= EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged6106= false;
        somethingChanged6106= activateTokenTypes(MATCH);
        try {
            if (!scanToken(MATCH)) return false;
        }
        finally {
            token_source.activeTokenTypes= previousActives6105;
            if (somethingChanged6106) {
                token_source.reset(currentLookaheadToken);
                nextTokenType= null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:487:4
        // NonTerminal SubjectExpression at Python.javacc:487:4
        pushOntoLookaheadStack("MatchStatement", "Python.javacc", 487, 4);
        currentLookaheadProduction= "SubjectExpression";
        try {
            if (!check$SubjectExpression(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:488:4
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:489:4
        if (!scanToken(NEWLINE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:490:4
        if (!scanToken(INDENT)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:491:25
        EnumSet<TokenType> previousActives6113= EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged6114= false;
        somethingChanged6114= activateTokenTypes(CASE);
        try {
            if (!check$Python_javacc$491$26(false)) {
                return false;
            }
            boolean passedPredicate6115= passedPredicate;
            try {
                while (remainingLookahead> 0&&!hitFailure) {
                    Token token6116= currentLookaheadToken;
                    passedPredicate= false;
                    if (!check$Python_javacc$491$26(false)) {
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        currentLookaheadToken= token6116;
                        break;
                    }
                }
            }
            finally {
                passedPredicate= passedPredicate6115;
            }
            hitFailure= false;
        }
        finally {
            token_source.activeTokenTypes= previousActives6113;
            if (somethingChanged6114) {
                token_source.reset(currentLookaheadToken);
                nextTokenType= null;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:492:4
        if (!scanToken(DEDENT)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$CaseBlock(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:496:5
        if (!scanToken(CASE)) return false;
        EnumSet<TokenType> previousActives6121= EnumSet.copyOf(token_source.activeTokenTypes);
        boolean somethingChanged6122= false;
        somethingChanged6122= somethingChanged6122|=deactivateTokenTypes(CASE);
        try {
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:499:7
            // NonTerminal Patterns at Python.javacc:499:7
            pushOntoLookaheadStack("CaseBlock", "Python.javacc", 499, 7);
            currentLookaheadProduction= "Patterns";
            try {
                if (!check$Patterns(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for ZeroOrOne specified at Python.javacc:500:7
            Token token6126= currentLookaheadToken;
            boolean passedPredicate6126= passedPredicate;
            passedPredicate= false;
            try {
                if (!check$Python_javacc$500$8(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6126;
                    hitFailure= false;
                }
            }
            finally {
                passedPredicate= passedPredicate6126;
            }
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for RegexpStringLiteral specified at Python.javacc:501:7
            if (!scanToken(COLON)) return false;
            if (hitFailure) return false;
            if (remainingLookahead<=0) {
                return true;
            }
            // Lookahead Code for NonTerminal specified at Python.javacc:502:7
            // NonTerminal Block at Python.javacc:502:7
            pushOntoLookaheadStack("CaseBlock", "Python.javacc", 502, 7);
            currentLookaheadProduction= "Block";
            try {
                if (!check$Block(true)) return false;
            }
            finally {
                popLookaheadStack();
            }
        }
        finally {
            token_source.activeTokenTypes= previousActives6121;
            if (somethingChanged6122) {
                token_source.reset(currentLookaheadToken);
                nextTokenType= null;
            }
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Patterns(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:508:4
        Token token6130= currentLookaheadToken;
        int remainingLookahead6130= remainingLookahead;
        boolean hitFailure6130= hitFailure, passedPredicate6130= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$508$4(false)) {
                currentLookaheadToken= token6130;
                remainingLookahead= remainingLookahead6130;
                hitFailure= hitFailure6130;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$510$4(false)) {
                    currentLookaheadToken= token6130;
                    remainingLookahead= remainingLookahead6130;
                    hitFailure= hitFailure6130;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6130;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$StarPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:514:4
        if (!scanToken(STAR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:514:8
        if (!scanToken(NAME)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$MaybeStarPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:517:25
        Token token6135= currentLookaheadToken;
        int remainingLookahead6135= remainingLookahead;
        boolean hitFailure6135= hitFailure, passedPredicate6135= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$517$25(false)) {
                currentLookaheadToken= token6135;
                remainingLookahead= remainingLookahead6135;
                hitFailure= hitFailure6135;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$517$39(false)) {
                    currentLookaheadToken= token6135;
                    remainingLookahead= remainingLookahead6135;
                    hitFailure= hitFailure6135;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6135;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ClosedPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:520:4
        Token token6137= currentLookaheadToken;
        int remainingLookahead6137= remainingLookahead;
        boolean hitFailure6137= hitFailure, passedPredicate6137= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$520$4(false)) {
                currentLookaheadToken= token6137;
                remainingLookahead= remainingLookahead6137;
                hitFailure= hitFailure6137;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$522$4(false)) {
                    currentLookaheadToken= token6137;
                    remainingLookahead= remainingLookahead6137;
                    hitFailure= hitFailure6137;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!check$Python_javacc$524$4(false)) {
                        currentLookaheadToken= token6137;
                        remainingLookahead= remainingLookahead6137;
                        hitFailure= hitFailure6137;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!check$Python_javacc$526$4(false)) {
                            currentLookaheadToken= token6137;
                            remainingLookahead= remainingLookahead6137;
                            hitFailure= hitFailure6137;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!check$Python_javacc$528$4(false)) {
                                currentLookaheadToken= token6137;
                                remainingLookahead= remainingLookahead6137;
                                hitFailure= hitFailure6137;
                                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                                passedPredicate= false;
                                if (!check$Python_javacc$530$4(false)) {
                                    currentLookaheadToken= token6137;
                                    remainingLookahead= remainingLookahead6137;
                                    hitFailure= hitFailure6137;
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6137;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$GroupPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:533:16
        if (!scanToken(LPAREN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:533:20
        // NonTerminal Pattern at Python.javacc:533:20
        pushOntoLookaheadStack("GroupPattern", "Python.javacc", 533, 20);
        currentLookaheadProduction= "Pattern";
        try {
            if (!check$Pattern(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:533:28
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$KeyValuePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:535:19
        Token token6145= currentLookaheadToken;
        int remainingLookahead6145= remainingLookahead;
        boolean hitFailure6145= hitFailure, passedPredicate6145= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$535$19$(false)) {
                currentLookaheadToken= token6145;
                remainingLookahead= remainingLookahead6145;
                hitFailure= hitFailure6145;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$535$36(false)) {
                    currentLookaheadToken= token6145;
                    remainingLookahead= remainingLookahead6145;
                    hitFailure= hitFailure6145;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6145;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:535:47
        if (!scanToken(COLON)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:535:51
        // NonTerminal Pattern at Python.javacc:535:51
        pushOntoLookaheadStack("KeyValuePattern", "Python.javacc", 535, 51);
        currentLookaheadProduction= "Pattern";
        try {
            if (!check$Pattern(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ItemsPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:537:16
        // NonTerminal KeyValuePattern at Python.javacc:537:16
        pushOntoLookaheadStack("ItemsPattern", "Python.javacc", 537, 16);
        currentLookaheadProduction= "KeyValuePattern";
        try {
            if (!check$KeyValuePattern(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:537:32
        boolean passedPredicate6151= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6152= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$537$33(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6152;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6151;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$MappingPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:540:3
        if (!scanToken(LBRACE)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:541:6
        Token token6156= currentLookaheadToken;
        boolean passedPredicate6156= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$542$10(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6156;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6156;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:546:3
        if (!scanToken(RBRACE)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$DoubleStarPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:549:21
        if (!scanToken(STAR_STAR)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:549:26
        if (!scanToken(NAME)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$LiteralPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:552:4
        Token token6162= currentLookaheadToken;
        int remainingLookahead6162= remainingLookahead;
        boolean hitFailure6162= hitFailure, passedPredicate6162= passedPredicate;
        try {
            passedPredicate= false;
            if (!scanToken(NONE)) {
                currentLookaheadToken= token6162;
                remainingLookahead= remainingLookahead6162;
                hitFailure= hitFailure6162;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!scanToken(TRUE)) {
                    currentLookaheadToken= token6162;
                    remainingLookahead= remainingLookahead6162;
                    hitFailure= hitFailure6162;
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    passedPredicate= false;
                    if (!scanToken(FALSE)) {
                        currentLookaheadToken= token6162;
                        remainingLookahead= remainingLookahead6162;
                        hitFailure= hitFailure6162;
                        if (passedPredicate&&!legacyGlitchyLookahead) return false;
                        passedPredicate= false;
                        if (!check$Python_javacc$558$4(false)) {
                            currentLookaheadToken= token6162;
                            remainingLookahead= remainingLookahead6162;
                            hitFailure= hitFailure6162;
                            if (passedPredicate&&!legacyGlitchyLookahead) return false;
                            passedPredicate= false;
                            if (!check$Python_javacc$560$4(false)) {
                                currentLookaheadToken= token6162;
                                remainingLookahead= remainingLookahead6162;
                                hitFailure= hitFailure6162;
                                return false;
                            }
                        }
                    }
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6162;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$MaybeSequencePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:564:4
        // NonTerminal MaybeStarPattern at Python.javacc:564:4
        pushOntoLookaheadStack("MaybeSequencePattern", "Python.javacc", 564, 4);
        currentLookaheadProduction= "MaybeStarPattern";
        try {
            if (!check$MaybeStarPattern(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:564:21
        boolean passedPredicate6166= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6167= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$564$22(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6167;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6166;
        }
        hitFailure= false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:564:51
        Token token6169= currentLookaheadToken;
        boolean passedPredicate6169= passedPredicate;
        passedPredicate= false;
        try {
            if (!scanToken(COMMA)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6169;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6169;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$OpenSequencePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:568:4
        // NonTerminal MaybeStarPattern at Python.javacc:568:4
        pushOntoLookaheadStack("OpenSequencePattern", "Python.javacc", 568, 4);
        currentLookaheadProduction= "MaybeStarPattern";
        try {
            if (!check$MaybeStarPattern(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:568:21
        if (!scanToken(COMMA)) return false;
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:568:30
        Token token6174= currentLookaheadToken;
        boolean passedPredicate6174= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$568$31(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6174;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6174;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$SequencePattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:572:5
        Token token6176= currentLookaheadToken;
        int remainingLookahead6176= remainingLookahead;
        boolean hitFailure6176= hitFailure, passedPredicate6176= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$572$5(false)) {
                currentLookaheadToken= token6176;
                remainingLookahead= remainingLookahead6176;
                hitFailure= hitFailure6176;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$574$5(false)) {
                    currentLookaheadToken= token6176;
                    remainingLookahead= remainingLookahead6176;
                    hitFailure= hitFailure6176;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6176;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$ClassPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:578:4
        // NonTerminal NameOrAttribute at Python.javacc:578:4
        pushOntoLookaheadStack("ClassPattern", "Python.javacc", 578, 4);
        currentLookaheadProduction= "NameOrAttribute";
        try {
            if (!check$NameOrAttribute(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:579:4
        if (!scanToken(LPAREN)) return false;
        if (!scanToEnd&&lookaheadStack.size()<=1) {
            if (lookaheadRoutineNesting== 0) {
                remainingLookahead= 0;
            }
            else if (lookaheadStack.size()== 1) {
                passedPredicateThreshold= remainingLookahead;
            }
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:581:7
        Token token6181= currentLookaheadToken;
        boolean passedPredicate6181= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$582$11$(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6181;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6181;
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:587:4
        if (!scanToken(RPAREN)) return false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$PositionalPatterns(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:591:4
        // NonTerminal Pattern at Python.javacc:591:4
        pushOntoLookaheadStack("PositionalPatterns", "Python.javacc", 591, 4);
        currentLookaheadProduction= "Pattern";
        try {
            if (!check$Pattern(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:592:4
        boolean passedPredicate6186= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6187= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$595$8(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6187;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6186;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$KeywordPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:600:18
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpStringLiteral specified at Python.javacc:600:25
        if (!scanToken(ASSIGN)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:600:29
        // NonTerminal Pattern at Python.javacc:600:29
        pushOntoLookaheadStack("KeywordPattern", "Python.javacc", 600, 29);
        currentLookaheadProduction= "Pattern";
        try {
            if (!check$Pattern(true)) return false;
        }
        finally {
            popLookaheadStack();
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$KeywordPatterns(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:602:19
        // NonTerminal KeywordPattern at Python.javacc:602:19
        pushOntoLookaheadStack("KeywordPatterns", "Python.javacc", 602, 19);
        currentLookaheadProduction= "KeywordPattern";
        try {
            if (!check$KeywordPattern(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:602:34
        boolean passedPredicate6195= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6196= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$602$35(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6196;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6195;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$OrPattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:604:13
        // NonTerminal ClosedPattern at Python.javacc:604:13
        pushOntoLookaheadStack("OrPattern", "Python.javacc", 604, 13);
        currentLookaheadProduction= "ClosedPattern";
        try {
            if (!check$ClosedPattern(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:604:27
        boolean passedPredicate6200= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6201= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$604$28(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6201;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6200;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Pattern(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for NonTerminal specified at Python.javacc:606:11
        // NonTerminal OrPattern at Python.javacc:606:11
        pushOntoLookaheadStack("Pattern", "Python.javacc", 606, 11);
        currentLookaheadProduction= "OrPattern";
        try {
            if (!check$OrPattern(false)) return false;
        }
        finally {
            popLookaheadStack();
        }
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrOne specified at Python.javacc:606:21
        Token token6205= currentLookaheadToken;
        boolean passedPredicate6205= passedPredicate;
        passedPredicate= false;
        try {
            if (!check$Python_javacc$606$22(false)) {
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                currentLookaheadToken= token6205;
                hitFailure= false;
            }
        }
        finally {
            passedPredicate= passedPredicate6205;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$SubjectExpression(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ExpansionChoice specified at Python.javacc:609:4
        Token token6207= currentLookaheadToken;
        int remainingLookahead6207= remainingLookahead;
        boolean hitFailure6207= hitFailure, passedPredicate6207= passedPredicate;
        try {
            passedPredicate= false;
            if (!check$Python_javacc$609$4(false)) {
                currentLookaheadToken= token6207;
                remainingLookahead= remainingLookahead6207;
                hitFailure= hitFailure6207;
                if (passedPredicate&&!legacyGlitchyLookahead) return false;
                passedPredicate= false;
                if (!check$Python_javacc$611$4(false)) {
                    currentLookaheadToken= token6207;
                    remainingLookahead= remainingLookahead6207;
                    hitFailure= hitFailure6207;
                    return false;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6207;
        }
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$Attribute(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:614:13
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for OneOrMore specified at Python.javacc:614:20
        if (!check$Python_javacc$614$21(false)) {
            return false;
        }
        boolean passedPredicate6211= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6212= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$614$21(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6212;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6211;
        }
        hitFailure= false;
        return true;
    }

    // BuildProductionLookaheadMethod macro
    private final boolean check$NameOrAttribute(boolean scanToEnd) {
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for RegexpRef specified at Python.javacc:616:34
        if (!scanToken(NAME)) return false;
        if (hitFailure) return false;
        if (remainingLookahead<=0) {
            return true;
        }
        // Lookahead Code for ZeroOrMore specified at Python.javacc:616:41
        boolean passedPredicate6216= passedPredicate;
        try {
            while (remainingLookahead> 0&&!hitFailure) {
                Token token6217= currentLookaheadToken;
                passedPredicate= false;
                if (!check$Python_javacc$616$42(false)) {
                    if (passedPredicate&&!legacyGlitchyLookahead) return false;
                    currentLookaheadToken= token6217;
                    break;
                }
            }
        }
        finally {
            passedPredicate= passedPredicate6216;
        }
        hitFailure= false;
        return true;
    }

    ArrayList<NonTerminalCall> parsingStack= new ArrayList<> ();
    private ArrayList<NonTerminalCall> lookaheadStack= new ArrayList<> ();
    /**
 * Inner class that represents entering a grammar production
 */
    class NonTerminalCall {
        final String sourceFile;
        final String productionName;
        final int line, column;
        NonTerminalCall(String sourceFile, String productionName, int line, int column) {
            this.sourceFile= sourceFile;
            this.productionName= productionName;
            this.line= line;
            this.column= column;
        }

        final PythonLexer getTokenSource() {
            return PythonParser.this.token_source;
        }

        StackTraceElement createStackTraceElement() {
            return new StackTraceElement("PythonParser", productionName, sourceFile, line);
        }

        void dump(PrintStream ps) {
            ps.println(productionName+":"+line+":"+column);
        }

    }
    private final void pushOntoCallStack(String methodName, String fileName, int line, int column) {
        parsingStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popCallStack() {
        NonTerminalCall ntc= parsingStack.remove(parsingStack.size()-1);
        this.currentlyParsedProduction= ntc.productionName;
    }

    private final void restoreCallStack(int prevSize) {
        while (parsingStack.size()> prevSize) {
            popCallStack();
        }
    }

    private ListIterator<NonTerminalCall> stackIteratorBackward() {
        final ListIterator<NonTerminalCall> parseStackIterator= parsingStack.listIterator(parsingStack.size());
        final ListIterator<NonTerminalCall> lookaheadStackIterator= lookaheadStack.listIterator(lookaheadStack.size());
        return new ListIterator<NonTerminalCall> () {
            public boolean hasNext() {
                return lookaheadStackIterator.hasPrevious()||parseStackIterator.hasPrevious();
            }

            public NonTerminalCall next() {
                return lookaheadStackIterator.hasPrevious()?lookaheadStackIterator.previous():
                parseStackIterator.previous();
            }

            public NonTerminalCall previous() {
                return parseStackIterator.hasNext()?parseStackIterator.next():
                lookaheadStackIterator.next();
            }

            public boolean hasPrevious() {
                return parseStackIterator.hasNext()||lookaheadStackIterator.hasNext();
            }

            public void add(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void set(NonTerminalCall ntc) {
                throw new UnsupportedOperationException();
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }

            public int previousIndex() {
                throw new UnsupportedOperationException();
            }

            public int nextIndex() {
                throw new UnsupportedOperationException();
            }

        }
        ;
    }

    private final void pushOntoLookaheadStack(String methodName, String fileName, int line, int column) {
        lookaheadStack.add(new NonTerminalCall(fileName, methodName, line, column));
    }

    private final void popLookaheadStack() {
        NonTerminalCall ntc= lookaheadStack.remove(lookaheadStack.size()-1);
        this.currentLookaheadProduction= ntc.productionName;
    }

    void dumpLookaheadStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= lookaheadStack.listIterator(lookaheadStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpCallStack(PrintStream ps) {
        ListIterator<NonTerminalCall> it= parsingStack.listIterator(parsingStack.size());
        while (it.hasPrevious()) {
            it.previous().dump(ps);
        }
    }

    void dumpLookaheadCallStack(PrintStream ps) {
        ps.println("Current Parser Production is: "+currentlyParsedProduction);
        ps.println("Current Lookahead Production is: "+currentLookaheadProduction);
        ps.println("---Lookahead Stack---");
        dumpLookaheadStack(ps);
        ps.println("---Call Stack---");
        dumpCallStack(ps);
    }

    public boolean isParserTolerant() {
        return false;
    }

    public void setParserTolerant(boolean tolerantParsing) {
        if (tolerantParsing) {
            throw new UnsupportedOperationException("This parser was not built with that feature!");
        }
    }

    private Token consumeToken(TokenType expectedType) {
        Token oldToken= lastConsumedToken;
        Token nextToken= nextToken(lastConsumedToken);
        if (nextToken.getType()!=expectedType) {
            nextToken= handleUnexpectedTokenType(expectedType, nextToken);
        }
        this.lastConsumedToken= nextToken;
        this.nextTokenType= null;
        if (buildTree&&tokensAreNodes) {
            pushNode(lastConsumedToken);
        }
        return lastConsumedToken;
    }

    private Token handleUnexpectedTokenType(TokenType expectedType, Token nextToken) {
        throw new ParseException(this, nextToken, EnumSet.of(expectedType), parsingStack);
    }

    private class ParseState {
        Token lastConsumed;
        ArrayList<NonTerminalCall> parsingStack;
        NodeScope nodeScope;
        ParseState() {
            this.lastConsumed= PythonParser.this.lastConsumedToken;
            @SuppressWarnings("unchecked")
            ArrayList<NonTerminalCall> parsingStack= (ArrayList<NonTerminalCall> ) PythonParser.this.parsingStack.clone();
            this.parsingStack= parsingStack;
            this.nodeScope= currentNodeScope.clone();
        }

    }
    private boolean buildTree= true;
    private boolean tokensAreNodes= true;
    private boolean unparsedTokensAreNodes= false;
    public boolean isTreeBuildingEnabled() {
        return buildTree;
    }

    public void setUnparsedTokensAreNodes(boolean unparsedTokensAreNodes) {
        this.unparsedTokensAreNodes= unparsedTokensAreNodes;
    }

    public void setTokensAreNodes(boolean tokensAreNodes) {
        this.tokensAreNodes= tokensAreNodes;
    }

    NodeScope currentNodeScope= new NodeScope();
    /** 
	 * @return the root node of the AST. It only makes sense to call
	 * this after a successful parse. 
	 */
    public Node rootNode() {
        return currentNodeScope.rootNode();
    }

    /**
     * push a node onto the top of the node stack
     * @param n the node to push
     */
    public void pushNode(Node n) {
        currentNodeScope.add(n);
    }

    /** 
     * @return the node on the top of the stack, and remove it from the
     * stack.  
     */
    public Node popNode() {
        return currentNodeScope.pop();
    }

    /** 
     * @return the node currently on the top of the tree-building stack. 
     */
    public Node peekNode() {
        return currentNodeScope.peek();
    }

    /**
     * Puts the node on the top of the stack. However, unlike pushNode()
     * it replaces the node that is currently on the top of the stack.
     * This is effectively equivalent to popNode() followed by pushNode(n)
     * @param n the node to poke
     */
    public void pokeNode(Node n) {
        currentNodeScope.poke(n);
    }

    /** 
     * @return the number of Nodes on the tree-building stack in the current node
	 * scope. 
	 */
    public int nodeArity() {
        return currentNodeScope.size();
    }

    private void clearNodeScope() {
        currentNodeScope.clear();
    }

    private void openNodeScope(Node n) {
        new NodeScope();
        if (n!=null) {
            Token next= nextToken(lastConsumedToken);
            n.setTokenSource(lastConsumedToken.getTokenSource());
            n.setBeginOffset(next.getBeginOffset());
            n.open();
        }
    }

    /* A definite node is constructed from a specified number of
	 * children.  That number of nodes are popped from the stack and
	 * made the children of the definite node.  Then the definite node
	 * is pushed on to the stack.
	 */
    private void closeNodeScope(Node n, int num) {
        n.setEndOffset(lastConsumedToken.getEndOffset());
        currentNodeScope.close();
        ArrayList<Node> nodes= new ArrayList<Node> ();
        for (int i= 0; i<num; i++) {
            nodes.add(popNode());
        }
        Collections.reverse(nodes);
        for (Node child : nodes) {
            // FIXME deal with the UNPARSED_TOKENS_ARE_NODES case
            n.addChild(child);
        }
        n.close();
        pushNode(n);
    }

    /**
	 * A conditional node is constructed if the condition is true.  All
	 * the nodes that have been pushed since the node was opened are
	 * made children of the conditional node, which is then pushed
	 * on to the stack.  If the condition is false the node is not
	 * constructed and they are left on the stack. 
	 */
    private void closeNodeScope(Node n, boolean condition) {
        if (n!=null&&condition) {
            n.setEndOffset(lastConsumedToken.getEndOffset());
            int a= nodeArity();
            currentNodeScope.close();
            ArrayList<Node> nodes= new ArrayList<Node> ();
            while (a--> 0) {
                nodes.add(popNode());
            }
            Collections.reverse(nodes);
            for (Node child : nodes) {
                if (unparsedTokensAreNodes&&child instanceof Token) {
                    Token tok= (Token) child;
                    while (tok.previousCachedToken()!=null&&tok.previousCachedToken().isUnparsed()) {
                        tok= tok.previousCachedToken();
                    }
                    while (tok.isUnparsed()) {
                        n.addChild(tok);
                        tok= tok.nextCachedToken();
                    }
                }
                n.addChild(child);
            }
            n.close();
            pushNode(n);
        }
        else  {
            currentNodeScope.close();
        }
    }

    public boolean getBuildTree() {
        return buildTree;
    }

    public void setBuildTree(boolean buildTree) {
        this.buildTree= buildTree;
    }

    /**
     * Just a kludge so that existing jjtree-based code that uses
     * parser.jjtree.foo can work without change.
     */
    PythonParser jjtree= this;
    @SuppressWarnings("serial")
    class NodeScope extends ArrayList<Node>  {
        NodeScope parentScope;
        NodeScope() {
            this.parentScope= PythonParser.this.currentNodeScope;
            PythonParser.this.currentNodeScope= this;
        }

        boolean isRootScope() {
            return parentScope== null;
        }

        Node rootNode() {
            NodeScope ns= this;
            while (ns.parentScope!=null) {
                ns= ns.parentScope;
            }
            return ns.isEmpty()?null:
            ns.get(0);
        }

        Node peek() {
            if (isEmpty()) {
                return parentScope== null?null:
                parentScope.peek();
            }
            return get(size()-1);
        }

        Node pop() {
            return isEmpty()?parentScope.pop():
            remove(size()-1);
        }

        void poke(Node n) {
            if (isEmpty()) {
                parentScope.poke(n);
            }
            else  {
                set(size()-1, n);
            }
        }

        void close() {
            parentScope.addAll(this);
            PythonParser.this.currentNodeScope= parentScope;
        }

        int nestingLevel() {
            int result= 0;
            NodeScope parent= this;
            while (parent.parentScope!=null) {
                result++;
                parent= parent.parentScope;
            }
            return result;
        }

        public NodeScope clone() {
            NodeScope clone= (NodeScope) super.clone();
            if (parentScope!=null) {
                clone.parentScope= parentScope.clone();
            }
            return clone;
        }

    }
}
