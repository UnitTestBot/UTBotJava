/* Generated by: JavaCC 21 Parser Generator. Do not edit. 
  * Generated Code for IndentToken Token subclass
  * by the ASTToken.java.ftl template
  */
package org.parsers.python.ast;

import org.parsers.python.*;
import org.parsers.python.PythonConstants.TokenType;
import static org.parsers.python.PythonConstants.TokenType.*;
import java.util.List;
import java.util.ArrayList;
public class IndentToken extends Token {
    private List<Integer> indents;
    public static Token makeIndentToken(Token followingToken, PythonLexer tokenSource, List<Integer> indents) {
        IndentToken result= new IndentToken(TokenType.INDENT, tokenSource, 0, 0);
        result.indents= new ArrayList<Integer> (indents.size());
        result.indents.addAll(indents);
        followingToken.preInsert(result);
        return result;
    }

    public List<Integer> getIndents() {
        return new ArrayList<Integer> (indents);
    }

    public boolean isVirtual() {
        return true;
    }

    /*
 *  Commented out, as interferes with representation used in tests
 *
   public String toString() {
       return "INDENT";
   }
 */
    public int getIndentAmount() {
        return indents.get(indents.size()-1)-indents.get(indents.size()-2);
    }

    public IndentToken(TokenType type, PythonLexer tokenSource, int beginOffset, int endOffset) {
        super(type, tokenSource, beginOffset, endOffset);
    }

}
