plugins {
    id 'com.jetbrains.rdgen' version "2022.3.1"
}

import com.jetbrains.rd.generator.gradle.RdGenExtension
import com.jetbrains.rd.generator.gradle.RdGenTask


apply from: "${parent.projectDir}/gradle/include/jvm-project.gradle"

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
    lifetimedProcessMockCompileClasspath.extendsFrom configurations.compileClasspath
    processWithRdServerMockCompileClasspath.extendsFrom configurations.compileClasspath
    rdgenModelsCompileClasspath.extendsFrom configurations.compileClasspath
}

sourceSets {
    lifetimedProcessMock {
        kotlin {
            srcDirs = ["src/main/lifetimedProcessMock"]
        }
    }
    processWithRdServerMock {
        kotlin {
            srcDirs = ["src/main/processWithRdServerMock"]
        }
    }
    rdgenModels {
        kotlin {
            srcDirs = ["src/main/rdgen"]
        }
    }
}

dependencies {
    implementation group: 'com.jetbrains.rd', name: 'rd-framework', version: '2022.3.1'
    implementation group: 'com.jetbrains.rd', name: 'rd-core', version: '2022.3.1'

    implementation group: 'io.github.microutils', name: 'kotlin-logging', version: kotlin_logging_version

    processWithRdServerMockImplementation project(':utbot-rd')

    rdgenModelsCompileClasspath group: 'com.jetbrains.rd', name: 'rd-gen', version: '2022.3.1'
}

task lifetimedProcessMockJar (type: Jar) {
    dependsOn lifetimedProcessMockClasses
    archiveAppendix.set("lifetimedProcessMock")

    manifest {
        attributes(
                'Main-Class': 'org.utbot.rd.tests.LifetimedProcessMockKt'
        )
    }

    from configurations.lifetimedProcessMockCompileClasspath.collect {
        (it.isDirectory() || !it.exists()) ? it : zipTree(it)
    } + sourceSets.lifetimedProcessMock.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task processWithRdServerMockJar (type: Jar) {
    dependsOn processWithRdServerMockClasses
    archiveAppendix.set("processWithRdServerMock")

    manifest {
        attributes(
                'Main-Class': 'org.utbot.rd.tests.ProcessWithRdServerMockKt'
        )
    }

    from configurations.processWithRdServerMockCompileClasspath.collect {
        (it.isDirectory() || !it.exists()) ? it : zipTree(it)
    } + sourceSets.processWithRdServerMock.output

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    dependsOn lifetimedProcessMockJar
    dependsOn processWithRdServerMockJar
    systemProperty("RD_MOCK_PROCESS", lifetimedProcessMockJar.archiveFile.get().getAsFile().canonicalPath)
    systemProperty("PROCESS_WITH_RD_SERVER_MOCK", processWithRdServerMockJar.archiveFile.get().getAsFile().canonicalPath)
}

task generateProtocolModels(type: RdGenTask) {
    def currentProjectDir = project.projectDir
    def instrumentationProjectDir = project.rootProject.childProjects["utbot-instrumentation"].projectDir
    def hashDir = new File(instrumentationProjectDir, "build/rdgen/hashes/models")
    def sourcesDir = new File(currentProjectDir, "src/main/rdgen/org/utbot/rd/models")
    def generatedOutputDir = new File(instrumentationProjectDir, "src/main/kotlin/org/utbot/instrumentation/rd/generated")
    def rdParams = extensions.getByName("params") as RdGenExtension

    group = "rdgen"
    rdParams.verbose = true
    rdParams.sources(sourcesDir)
    rdParams.hashFolder = hashDir.canonicalPath
    // where to search roots
    rdParams.packages = "org.utbot.rd.models"

    rdParams.generator {
        language = "kotlin"
        transform = "symmetric"
        root = "org.utbot.rd.models.ProtocolRoot"

        directory = generatedOutputDir.canonicalPath
        namespace = "org.utbot.instrumentation.rd.generated"
    }
}