//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.10.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace UtBot.Rd.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: CSharpModel.kt:8</p>
  /// </summary>
  public class VSharpModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public RdCall<GenerateArguments, GenerateResults> Generate => _Generate;
    [NotNull] public ISignal<string> Ping => _Ping;
    [NotNull] public ISignal<string> Log => _Log;
    
    //private fields
    [NotNull] private readonly RdCall<GenerateArguments, GenerateResults> _Generate;
    [NotNull] private readonly RdSignal<string> _Ping;
    [NotNull] private readonly RdSignal<string> _Log;
    
    //primary constructor
    private VSharpModel(
      [NotNull] RdCall<GenerateArguments, GenerateResults> generate,
      [NotNull] RdSignal<string> ping,
      [NotNull] RdSignal<string> log
    )
    {
      if (generate == null) throw new ArgumentNullException("generate");
      if (ping == null) throw new ArgumentNullException("ping");
      if (log == null) throw new ArgumentNullException("log");
      
      _Generate = generate;
      _Ping = ping;
      _Log = log;
      _Generate.Async = true;
      _Ping.Async = true;
      _Log.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("generate", _Generate));
      BindableChildren.Add(new KeyValuePair<string, object>("ping", _Ping));
      BindableChildren.Add(new KeyValuePair<string, object>("log", _Log));
    }
    //secondary constructor
    private VSharpModel (
    ) : this (
      new RdCall<GenerateArguments, GenerateResults>(GenerateArguments.Read, GenerateArguments.Write, GenerateResults.Read, GenerateResults.Write),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 9120359939503061610L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(CSharpRoot), CSharpRoot.RegisterDeclaredTypesSerializers);
    }
    
    public VSharpModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("VSharpModel"));
      Bind(lifetime, protocol, "VSharpModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("VSharpModel (");
      using (printer.IndentCookie()) {
        printer.Print("generate = "); _Generate.PrintEx(printer); printer.Println();
        printer.Print("ping = "); _Ping.PrintEx(printer); printer.Println();
        printer.Print("log = "); _Log.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: CSharpModel.kt:21</p>
  /// </summary>
  public sealed class GenerateArguments : IPrintable, IEquatable<GenerateArguments>
  {
    //fields
    //public fields
    [NotNull] public string AssemblyPath {get; private set;}
    [NotNull] public string ProjectCsprojPath {get; private set;}
    [NotNull] public string SolutionFilePath {get; private set;}
    [NotNull] public List<MethodDescriptor> Methods {get; private set;}
    public int GenerationTimeoutInSeconds {get; private set;}
    [CanBeNull] public string TargetFramework {get; private set;}
    [NotNull] public List<MapEntry> AssembliesFullNameToTheirPath {get; private set;}
    
    //private fields
    //primary constructor
    public GenerateArguments(
      [NotNull] string assemblyPath,
      [NotNull] string projectCsprojPath,
      [NotNull] string solutionFilePath,
      [NotNull] List<MethodDescriptor> methods,
      int generationTimeoutInSeconds,
      [CanBeNull] string targetFramework,
      [NotNull] List<MapEntry> assembliesFullNameToTheirPath
    )
    {
      if (assemblyPath == null) throw new ArgumentNullException("assemblyPath");
      if (projectCsprojPath == null) throw new ArgumentNullException("projectCsprojPath");
      if (solutionFilePath == null) throw new ArgumentNullException("solutionFilePath");
      if (methods == null) throw new ArgumentNullException("methods");
      if (assembliesFullNameToTheirPath == null) throw new ArgumentNullException("assembliesFullNameToTheirPath");
      
      AssemblyPath = assemblyPath;
      ProjectCsprojPath = projectCsprojPath;
      SolutionFilePath = solutionFilePath;
      Methods = methods;
      GenerationTimeoutInSeconds = generationTimeoutInSeconds;
      TargetFramework = targetFramework;
      AssembliesFullNameToTheirPath = assembliesFullNameToTheirPath;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string assemblyPath, [NotNull] out string projectCsprojPath, [NotNull] out string solutionFilePath, [NotNull] out List<MethodDescriptor> methods, out int generationTimeoutInSeconds, [CanBeNull] out string targetFramework, [NotNull] out List<MapEntry> assembliesFullNameToTheirPath)
    {
      assemblyPath = AssemblyPath;
      projectCsprojPath = ProjectCsprojPath;
      solutionFilePath = SolutionFilePath;
      methods = Methods;
      generationTimeoutInSeconds = GenerationTimeoutInSeconds;
      targetFramework = TargetFramework;
      assembliesFullNameToTheirPath = AssembliesFullNameToTheirPath;
    }
    //statics
    
    public static CtxReadDelegate<GenerateArguments> Read = (ctx, reader) => 
    {
      var assemblyPath = reader.ReadString();
      var projectCsprojPath = reader.ReadString();
      var solutionFilePath = reader.ReadString();
      var methods = ReadMethodDescriptorList(ctx, reader);
      var generationTimeoutInSeconds = reader.ReadInt();
      var targetFramework = ReadStringNullable(ctx, reader);
      var assembliesFullNameToTheirPath = ReadMapEntryList(ctx, reader);
      var _result = new GenerateArguments(assemblyPath, projectCsprojPath, solutionFilePath, methods, generationTimeoutInSeconds, targetFramework, assembliesFullNameToTheirPath);
      return _result;
    };
    public static CtxReadDelegate<List<MethodDescriptor>> ReadMethodDescriptorList = MethodDescriptor.Read.List();
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<List<MapEntry>> ReadMapEntryList = MapEntry.Read.List();
    
    public static CtxWriteDelegate<GenerateArguments> Write = (ctx, writer, value) => 
    {
      writer.Write(value.AssemblyPath);
      writer.Write(value.ProjectCsprojPath);
      writer.Write(value.SolutionFilePath);
      WriteMethodDescriptorList(ctx, writer, value.Methods);
      writer.Write(value.GenerationTimeoutInSeconds);
      WriteStringNullable(ctx, writer, value.TargetFramework);
      WriteMapEntryList(ctx, writer, value.AssembliesFullNameToTheirPath);
    };
    public static  CtxWriteDelegate<List<MethodDescriptor>> WriteMethodDescriptorList = MethodDescriptor.Write.List();
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<List<MapEntry>> WriteMapEntryList = MapEntry.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((GenerateArguments) obj);
    }
    public bool Equals(GenerateArguments other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return AssemblyPath == other.AssemblyPath && ProjectCsprojPath == other.ProjectCsprojPath && SolutionFilePath == other.SolutionFilePath && Methods.SequenceEqual(other.Methods) && GenerationTimeoutInSeconds == other.GenerationTimeoutInSeconds && Equals(TargetFramework, other.TargetFramework) && AssembliesFullNameToTheirPath.SequenceEqual(other.AssembliesFullNameToTheirPath);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + AssemblyPath.GetHashCode();
        hash = hash * 31 + ProjectCsprojPath.GetHashCode();
        hash = hash * 31 + SolutionFilePath.GetHashCode();
        hash = hash * 31 + Methods.ContentHashCode();
        hash = hash * 31 + GenerationTimeoutInSeconds.GetHashCode();
        hash = hash * 31 + (TargetFramework != null ? TargetFramework.GetHashCode() : 0);
        hash = hash * 31 + AssembliesFullNameToTheirPath.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("GenerateArguments (");
      using (printer.IndentCookie()) {
        printer.Print("assemblyPath = "); AssemblyPath.PrintEx(printer); printer.Println();
        printer.Print("projectCsprojPath = "); ProjectCsprojPath.PrintEx(printer); printer.Println();
        printer.Print("solutionFilePath = "); SolutionFilePath.PrintEx(printer); printer.Println();
        printer.Print("methods = "); Methods.PrintEx(printer); printer.Println();
        printer.Print("generationTimeoutInSeconds = "); GenerationTimeoutInSeconds.PrintEx(printer); printer.Println();
        printer.Print("targetFramework = "); TargetFramework.PrintEx(printer); printer.Println();
        printer.Print("assembliesFullNameToTheirPath = "); AssembliesFullNameToTheirPath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: CSharpModel.kt:31</p>
  /// </summary>
  public sealed class GenerateResults : IPrintable, IEquatable<GenerateResults>
  {
    //fields
    //public fields
    [CanBeNull] public string GeneratedProjectPath {get; private set;}
    [NotNull] public List<string> GeneratedFilesPaths {get; private set;}
    [CanBeNull] public string ExceptionMessage {get; private set;}
    public int TestsCount {get; private set;}
    public int ErrorsCount {get; private set;}
    
    //private fields
    //primary constructor
    public GenerateResults(
      [CanBeNull] string generatedProjectPath,
      [NotNull] List<string> generatedFilesPaths,
      [CanBeNull] string exceptionMessage,
      int testsCount,
      int errorsCount
    )
    {
      if (generatedFilesPaths == null) throw new ArgumentNullException("generatedFilesPaths");
      
      GeneratedProjectPath = generatedProjectPath;
      GeneratedFilesPaths = generatedFilesPaths;
      ExceptionMessage = exceptionMessage;
      TestsCount = testsCount;
      ErrorsCount = errorsCount;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out string generatedProjectPath, [NotNull] out List<string> generatedFilesPaths, [CanBeNull] out string exceptionMessage, out int testsCount, out int errorsCount)
    {
      generatedProjectPath = GeneratedProjectPath;
      generatedFilesPaths = GeneratedFilesPaths;
      exceptionMessage = ExceptionMessage;
      testsCount = TestsCount;
      errorsCount = ErrorsCount;
    }
    //statics
    
    public static CtxReadDelegate<GenerateResults> Read = (ctx, reader) => 
    {
      var generatedProjectPath = ReadStringNullable(ctx, reader);
      var generatedFilesPaths = ReadStringList(ctx, reader);
      var exceptionMessage = ReadStringNullable(ctx, reader);
      var testsCount = reader.ReadInt();
      var errorsCount = reader.ReadInt();
      var _result = new GenerateResults(generatedProjectPath, generatedFilesPaths, exceptionMessage, testsCount, errorsCount);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<GenerateResults> Write = (ctx, writer, value) => 
    {
      WriteStringNullable(ctx, writer, value.GeneratedProjectPath);
      WriteStringList(ctx, writer, value.GeneratedFilesPaths);
      WriteStringNullable(ctx, writer, value.ExceptionMessage);
      writer.Write(value.TestsCount);
      writer.Write(value.ErrorsCount);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((GenerateResults) obj);
    }
    public bool Equals(GenerateResults other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(GeneratedProjectPath, other.GeneratedProjectPath) && GeneratedFilesPaths.SequenceEqual(other.GeneratedFilesPaths) && Equals(ExceptionMessage, other.ExceptionMessage) && TestsCount == other.TestsCount && ErrorsCount == other.ErrorsCount;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (GeneratedProjectPath != null ? GeneratedProjectPath.GetHashCode() : 0);
        hash = hash * 31 + GeneratedFilesPaths.ContentHashCode();
        hash = hash * 31 + (ExceptionMessage != null ? ExceptionMessage.GetHashCode() : 0);
        hash = hash * 31 + TestsCount.GetHashCode();
        hash = hash * 31 + ErrorsCount.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("GenerateResults (");
      using (printer.IndentCookie()) {
        printer.Print("generatedProjectPath = "); GeneratedProjectPath.PrintEx(printer); printer.Println();
        printer.Print("generatedFilesPaths = "); GeneratedFilesPaths.PrintEx(printer); printer.Println();
        printer.Print("exceptionMessage = "); ExceptionMessage.PrintEx(printer); printer.Println();
        printer.Print("testsCount = "); TestsCount.PrintEx(printer); printer.Println();
        printer.Print("errorsCount = "); ErrorsCount.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: CSharpModel.kt:16</p>
  /// </summary>
  public sealed class MapEntry : IPrintable, IEquatable<MapEntry>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public MapEntry(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<MapEntry> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new MapEntry(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<MapEntry> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MapEntry) obj);
    }
    public bool Equals(MapEntry other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MapEntry (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: CSharpModel.kt:9</p>
  /// </summary>
  public sealed class MethodDescriptor : IPrintable, IEquatable<MethodDescriptor>
  {
    //fields
    //public fields
    [NotNull] public string MethodName {get; private set;}
    [NotNull] public string TypeName {get; private set;}
    public bool HasNoOverloads {get; private set;}
    [NotNull] public List<string> Parameters {get; private set;}
    
    //private fields
    //primary constructor
    public MethodDescriptor(
      [NotNull] string methodName,
      [NotNull] string typeName,
      bool hasNoOverloads,
      [NotNull] List<string> parameters
    )
    {
      if (methodName == null) throw new ArgumentNullException("methodName");
      if (typeName == null) throw new ArgumentNullException("typeName");
      if (parameters == null) throw new ArgumentNullException("parameters");
      
      MethodName = methodName;
      TypeName = typeName;
      HasNoOverloads = hasNoOverloads;
      Parameters = parameters;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string methodName, [NotNull] out string typeName, out bool hasNoOverloads, [NotNull] out List<string> parameters)
    {
      methodName = MethodName;
      typeName = TypeName;
      hasNoOverloads = HasNoOverloads;
      parameters = Parameters;
    }
    //statics
    
    public static CtxReadDelegate<MethodDescriptor> Read = (ctx, reader) => 
    {
      var methodName = reader.ReadString();
      var typeName = reader.ReadString();
      var hasNoOverloads = reader.ReadBool();
      var parameters = ReadStringList(ctx, reader);
      var _result = new MethodDescriptor(methodName, typeName, hasNoOverloads, parameters);
      return _result;
    };
    public static CtxReadDelegate<List<string>> ReadStringList = JetBrains.Rd.Impl.Serializers.ReadString.List();
    
    public static CtxWriteDelegate<MethodDescriptor> Write = (ctx, writer, value) => 
    {
      writer.Write(value.MethodName);
      writer.Write(value.TypeName);
      writer.Write(value.HasNoOverloads);
      WriteStringList(ctx, writer, value.Parameters);
    };
    public static  CtxWriteDelegate<List<string>> WriteStringList = JetBrains.Rd.Impl.Serializers.WriteString.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MethodDescriptor) obj);
    }
    public bool Equals(MethodDescriptor other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return MethodName == other.MethodName && TypeName == other.TypeName && HasNoOverloads == other.HasNoOverloads && Parameters.SequenceEqual(other.Parameters);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + MethodName.GetHashCode();
        hash = hash * 31 + TypeName.GetHashCode();
        hash = hash * 31 + HasNoOverloads.GetHashCode();
        hash = hash * 31 + Parameters.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MethodDescriptor (");
      using (printer.IndentCookie()) {
        printer.Print("methodName = "); MethodName.PrintEx(printer); printer.Println();
        printer.Print("typeName = "); TypeName.PrintEx(printer); printer.Println();
        printer.Print("hasNoOverloads = "); HasNoOverloads.PrintEx(printer); printer.Println();
        printer.Print("parameters = "); Parameters.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
