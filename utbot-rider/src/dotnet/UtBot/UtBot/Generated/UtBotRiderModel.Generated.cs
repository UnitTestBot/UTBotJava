//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.10.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: UtBotRiderModel.kt:8</p>
  /// </summary>
  public class UtBotRiderModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public ISignal<StartPublishArgs> StartPublish => _StartPublish;
    [NotNull] public ISignal<string> LogPublishOutput => _LogPublishOutput;
    [NotNull] public ISignal<string> LogPublishError => _LogPublishError;
    [NotNull] public ISignal<int> StopPublish => _StopPublish;
    [NotNull] public ISignal<Unit> StartVSharp => _StartVSharp;
    [NotNull] public ISignal<string> LogVSharp => _LogVSharp;
    [NotNull] public ISignal<int> StopVSharp => _StopVSharp;
    
    //private fields
    [NotNull] private readonly RdSignal<StartPublishArgs> _StartPublish;
    [NotNull] private readonly RdSignal<string> _LogPublishOutput;
    [NotNull] private readonly RdSignal<string> _LogPublishError;
    [NotNull] private readonly RdSignal<int> _StopPublish;
    [NotNull] private readonly RdSignal<Unit> _StartVSharp;
    [NotNull] private readonly RdSignal<string> _LogVSharp;
    [NotNull] private readonly RdSignal<int> _StopVSharp;
    
    //primary constructor
    private UtBotRiderModel(
      [NotNull] RdSignal<StartPublishArgs> startPublish,
      [NotNull] RdSignal<string> logPublishOutput,
      [NotNull] RdSignal<string> logPublishError,
      [NotNull] RdSignal<int> stopPublish,
      [NotNull] RdSignal<Unit> startVSharp,
      [NotNull] RdSignal<string> logVSharp,
      [NotNull] RdSignal<int> stopVSharp
    )
    {
      if (startPublish == null) throw new ArgumentNullException("startPublish");
      if (logPublishOutput == null) throw new ArgumentNullException("logPublishOutput");
      if (logPublishError == null) throw new ArgumentNullException("logPublishError");
      if (stopPublish == null) throw new ArgumentNullException("stopPublish");
      if (startVSharp == null) throw new ArgumentNullException("startVSharp");
      if (logVSharp == null) throw new ArgumentNullException("logVSharp");
      if (stopVSharp == null) throw new ArgumentNullException("stopVSharp");
      
      _StartPublish = startPublish;
      _LogPublishOutput = logPublishOutput;
      _LogPublishError = logPublishError;
      _StopPublish = stopPublish;
      _StartVSharp = startVSharp;
      _LogVSharp = logVSharp;
      _StopVSharp = stopVSharp;
      _StartPublish.Async = true;
      _LogPublishOutput.Async = true;
      _LogPublishError.Async = true;
      _StopPublish.Async = true;
      _StartVSharp.Async = true;
      _LogVSharp.Async = true;
      _StopVSharp.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("startPublish", _StartPublish));
      BindableChildren.Add(new KeyValuePair<string, object>("logPublishOutput", _LogPublishOutput));
      BindableChildren.Add(new KeyValuePair<string, object>("logPublishError", _LogPublishError));
      BindableChildren.Add(new KeyValuePair<string, object>("stopPublish", _StopPublish));
      BindableChildren.Add(new KeyValuePair<string, object>("startVSharp", _StartVSharp));
      BindableChildren.Add(new KeyValuePair<string, object>("logVSharp", _LogVSharp));
      BindableChildren.Add(new KeyValuePair<string, object>("stopVSharp", _StopVSharp));
    }
    //secondary constructor
    internal UtBotRiderModel (
    ) : this (
      new RdSignal<StartPublishArgs>(StartPublishArgs.Read, StartPublishArgs.Write),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<int>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt),
      new RdSignal<Unit>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdSignal<string>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString),
      new RdSignal<int>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 6014484928290881L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(IdeRoot), IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("UtBotRiderModel (");
      using (printer.IndentCookie()) {
        printer.Print("startPublish = "); _StartPublish.PrintEx(printer); printer.Println();
        printer.Print("logPublishOutput = "); _LogPublishOutput.PrintEx(printer); printer.Println();
        printer.Print("logPublishError = "); _LogPublishError.PrintEx(printer); printer.Println();
        printer.Print("stopPublish = "); _StopPublish.PrintEx(printer); printer.Println();
        printer.Print("startVSharp = "); _StartVSharp.PrintEx(printer); printer.Println();
        printer.Print("logVSharp = "); _LogVSharp.PrintEx(printer); printer.Println();
        printer.Print("stopVSharp = "); _StopVSharp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionUtBotRiderModelEx
   {
    public static UtBotRiderModel GetUtBotRiderModel(this Solution solution)
    {
      return solution.GetOrCreateExtension("utBotRiderModel", () => new UtBotRiderModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: UtBotRiderModel.kt:9</p>
  /// </summary>
  public sealed class StartPublishArgs : IPrintable, IEquatable<StartPublishArgs>
  {
    //fields
    //public fields
    [NotNull] public string FileName {get; private set;}
    [NotNull] public string Arguments {get; private set;}
    [NotNull] public string WorkingDirectory {get; private set;}
    
    //private fields
    //primary constructor
    public StartPublishArgs(
      [NotNull] string fileName,
      [NotNull] string arguments,
      [NotNull] string workingDirectory
    )
    {
      if (fileName == null) throw new ArgumentNullException("fileName");
      if (arguments == null) throw new ArgumentNullException("arguments");
      if (workingDirectory == null) throw new ArgumentNullException("workingDirectory");
      
      FileName = fileName;
      Arguments = arguments;
      WorkingDirectory = workingDirectory;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string fileName, [NotNull] out string arguments, [NotNull] out string workingDirectory)
    {
      fileName = FileName;
      arguments = Arguments;
      workingDirectory = WorkingDirectory;
    }
    //statics
    
    public static CtxReadDelegate<StartPublishArgs> Read = (ctx, reader) => 
    {
      var fileName = reader.ReadString();
      var arguments = reader.ReadString();
      var workingDirectory = reader.ReadString();
      var _result = new StartPublishArgs(fileName, arguments, workingDirectory);
      return _result;
    };
    
    public static CtxWriteDelegate<StartPublishArgs> Write = (ctx, writer, value) => 
    {
      writer.Write(value.FileName);
      writer.Write(value.Arguments);
      writer.Write(value.WorkingDirectory);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((StartPublishArgs) obj);
    }
    public bool Equals(StartPublishArgs other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return FileName == other.FileName && Arguments == other.Arguments && WorkingDirectory == other.WorkingDirectory;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + FileName.GetHashCode();
        hash = hash * 31 + Arguments.GetHashCode();
        hash = hash * 31 + WorkingDirectory.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("StartPublishArgs (");
      using (printer.IndentCookie()) {
        printer.Print("fileName = "); FileName.PrintEx(printer); printer.Println();
        printer.Print("arguments = "); Arguments.PrintEx(printer); printer.Println();
        printer.Print("workingDirectory = "); WorkingDirectory.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
